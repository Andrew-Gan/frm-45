
C:\Users\NELO\Atollic\TrueSTUDIO\ARM_workspace_7.1\SDCardTest\Debug\SDCardTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08005900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d4  20000008  08005908  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000dc  08005908  000200dc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d49a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001cfb  00000000  00000000  0002d4d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e68  00000000  00000000  0002f1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d40  00000000  00000000  00030038  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000666c  00000000  00000000  00030d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004100  00000000  00000000  000373e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0003b4e4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003b34  00000000  00000000  0003b564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000008 	.word	0x20000008
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005754 	.word	0x08005754

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	08005754 	.word	0x08005754

080001cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <HAL_InitTick+0x30>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a09      	ldr	r2, [pc, #36]	; (8000200 <HAL_InitTick+0x34>)
 80001da:	fba2 2303 	umull	r2, r3, r2, r3
 80001de:	099b      	lsrs	r3, r3, #6
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f8d1 	bl	8000388 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001e6:	2200      	movs	r2, #0
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	f04f 30ff 	mov.w	r0, #4294967295
 80001ee:	f000 f8af 	bl	8000350 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	10624dd3 	.word	0x10624dd3

08000204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  uwTick++;
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <HAL_IncTick+0x18>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	4a03      	ldr	r2, [pc, #12]	; (800021c <HAL_IncTick+0x18>)
 8000210:	6013      	str	r3, [r2, #0]
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	20000038 	.word	0x20000038

08000220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  return uwTick;
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <HAL_GetTick+0x14>)
 8000226:	681b      	ldr	r3, [r3, #0]
}
 8000228:	4618      	mov	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000038 	.word	0x20000038

08000238 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <NVIC_GetPriorityGrouping+0x18>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000244:	0a1b      	lsrs	r3, r3, #8
}
 8000246:	4618      	mov	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	6039      	str	r1, [r7, #0]
 800025e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000264:	2b00      	cmp	r3, #0
 8000266:	da0b      	bge.n	8000280 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	490d      	ldr	r1, [pc, #52]	; (80002a0 <NVIC_SetPriority+0x4c>)
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f003 030f 	and.w	r3, r3, #15
 8000270:	3b04      	subs	r3, #4
 8000272:	683a      	ldr	r2, [r7, #0]
 8000274:	b2d2      	uxtb	r2, r2
 8000276:	0112      	lsls	r2, r2, #4
 8000278:	b2d2      	uxtb	r2, r2
 800027a:	440b      	add	r3, r1
 800027c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800027e:	e009      	b.n	8000294 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	4908      	ldr	r1, [pc, #32]	; (80002a4 <NVIC_SetPriority+0x50>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	b2d2      	uxtb	r2, r2
 800028a:	0112      	lsls	r2, r2, #4
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	440b      	add	r3, r1
 8000290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b089      	sub	sp, #36	; 0x24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	60f8      	str	r0, [r7, #12]
 80002b0:	60b9      	str	r1, [r7, #8]
 80002b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002bc:	69fb      	ldr	r3, [r7, #28]
 80002be:	f1c3 0307 	rsb	r3, r3, #7
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	bf28      	it	cs
 80002c6:	2304      	movcs	r3, #4
 80002c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ca:	69fb      	ldr	r3, [r7, #28]
 80002cc:	3304      	adds	r3, #4
 80002ce:	2b06      	cmp	r3, #6
 80002d0:	d902      	bls.n	80002d8 <NVIC_EncodePriority+0x30>
 80002d2:	69fb      	ldr	r3, [r7, #28]
 80002d4:	3b03      	subs	r3, #3
 80002d6:	e000      	b.n	80002da <NVIC_EncodePriority+0x32>
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	2201      	movs	r2, #1
 80002de:	69bb      	ldr	r3, [r7, #24]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	1e5a      	subs	r2, r3, #1
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	401a      	ands	r2, r3
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002ee:	2101      	movs	r1, #1
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	fa01 f303 	lsl.w	r3, r1, r3
 80002f6:	1e59      	subs	r1, r3, #1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002fc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3724      	adds	r7, #36	; 0x24
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop

0800030c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3b01      	subs	r3, #1
 8000318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800031c:	d301      	bcc.n	8000322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031e:	2301      	movs	r3, #1
 8000320:	e00f      	b.n	8000342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000322:	4a0a      	ldr	r2, [pc, #40]	; (800034c <SysTick_Config+0x40>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3b01      	subs	r3, #1
 8000328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800032a:	210f      	movs	r1, #15
 800032c:	f04f 30ff 	mov.w	r0, #4294967295
 8000330:	f7ff ff90 	bl	8000254 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <SysTick_Config+0x40>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <SysTick_Config+0x40>)
 800033c:	2207      	movs	r2, #7
 800033e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000340:	2300      	movs	r3, #0
}
 8000342:	4618      	mov	r0, r3
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	e000e010 	.word	0xe000e010

08000350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000362:	f7ff ff69 	bl	8000238 <NVIC_GetPriorityGrouping>
 8000366:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	68b9      	ldr	r1, [r7, #8]
 800036c:	6978      	ldr	r0, [r7, #20]
 800036e:	f7ff ff9b 	bl	80002a8 <NVIC_EncodePriority>
 8000372:	4602      	mov	r2, r0
 8000374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000378:	4611      	mov	r1, r2
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff6a 	bl	8000254 <NVIC_SetPriority>
}
 8000380:	bf00      	nop
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ffbb 	bl	800030c <SysTick_Config>
 8000396:	4603      	mov	r3, r0
}
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	d106      	bne.n	80003bc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003ae:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80003ba:	e005      	b.n	80003c8 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003bc:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f023 0304 	bic.w	r3, r3, #4
 80003c6:	6013      	str	r3, [r2, #0]
  }
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000e010 	.word	0xe000e010

080003d8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80003dc:	f000 f802 	bl	80003e4 <HAL_SYSTICK_Callback>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop

080003f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000406:	2300      	movs	r3, #0
 8000408:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800040a:	e148      	b.n	800069e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	2101      	movs	r1, #1
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	fa01 f303 	lsl.w	r3, r1, r3
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	2b00      	cmp	r3, #0
 8000420:	f000 813a 	beq.w	8000698 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d003      	beq.n	8000434 <HAL_GPIO_Init+0x40>
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	2b12      	cmp	r3, #18
 8000432:	d123      	bne.n	800047c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	08da      	lsrs	r2, r3, #3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3208      	adds	r2, #8
 800043c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000440:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	f003 0307 	and.w	r3, r3, #7
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	220f      	movs	r2, #15
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	43db      	mvns	r3, r3
 8000452:	693a      	ldr	r2, [r7, #16]
 8000454:	4013      	ands	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	691a      	ldr	r2, [r3, #16]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	f003 0307 	and.w	r3, r3, #7
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	fa02 f303 	lsl.w	r3, r2, r3
 8000468:	693a      	ldr	r2, [r7, #16]
 800046a:	4313      	orrs	r3, r2
 800046c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	08da      	lsrs	r2, r3, #3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3208      	adds	r2, #8
 8000476:	6939      	ldr	r1, [r7, #16]
 8000478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	2203      	movs	r2, #3
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	43db      	mvns	r3, r3
 800048e:	693a      	ldr	r2, [r7, #16]
 8000490:	4013      	ands	r3, r2
 8000492:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	f003 0203 	and.w	r2, r3, #3
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
 80004a4:	693a      	ldr	r2, [r7, #16]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	693a      	ldr	r2, [r7, #16]
 80004ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d00b      	beq.n	80004d0 <HAL_GPIO_Init+0xdc>
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d007      	beq.n	80004d0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d003      	beq.n	80004d0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	2b12      	cmp	r3, #18
 80004ce:	d130      	bne.n	8000532 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	2203      	movs	r2, #3
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	4013      	ands	r3, r2
 80004e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	68da      	ldr	r2, [r3, #12]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	693a      	ldr	r2, [r7, #16]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	693a      	ldr	r2, [r7, #16]
 80004fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000506:	2201      	movs	r2, #1
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	fa02 f303 	lsl.w	r3, r2, r3
 800050e:	43db      	mvns	r3, r3
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4013      	ands	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	091b      	lsrs	r3, r3, #4
 800051c:	f003 0201 	and.w	r2, r3, #1
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	4313      	orrs	r3, r2
 800052a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	2203      	movs	r2, #3
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	43db      	mvns	r3, r3
 8000544:	693a      	ldr	r2, [r7, #16]
 8000546:	4013      	ands	r3, r2
 8000548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	689a      	ldr	r2, [r3, #8]
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	693a      	ldr	r2, [r7, #16]
 8000558:	4313      	orrs	r3, r2
 800055a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	2b00      	cmp	r3, #0
 800056c:	f000 8094 	beq.w	8000698 <HAL_GPIO_Init+0x2a4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000570:	4a52      	ldr	r2, [pc, #328]	; (80006bc <HAL_GPIO_Init+0x2c8>)
 8000572:	4b52      	ldr	r3, [pc, #328]	; (80006bc <HAL_GPIO_Init+0x2c8>)
 8000574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6613      	str	r3, [r2, #96]	; 0x60
 800057c:	4b4f      	ldr	r3, [pc, #316]	; (80006bc <HAL_GPIO_Init+0x2c8>)
 800057e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000588:	4a4d      	ldr	r2, [pc, #308]	; (80006c0 <HAL_GPIO_Init+0x2cc>)
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	3302      	adds	r3, #2
 8000590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000594:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	f003 0303 	and.w	r3, r3, #3
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	220f      	movs	r2, #15
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	43db      	mvns	r3, r3
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	4013      	ands	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005b2:	d00d      	beq.n	80005d0 <HAL_GPIO_Init+0x1dc>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a43      	ldr	r2, [pc, #268]	; (80006c4 <HAL_GPIO_Init+0x2d0>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d007      	beq.n	80005cc <HAL_GPIO_Init+0x1d8>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a42      	ldr	r2, [pc, #264]	; (80006c8 <HAL_GPIO_Init+0x2d4>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d101      	bne.n	80005c8 <HAL_GPIO_Init+0x1d4>
 80005c4:	2302      	movs	r3, #2
 80005c6:	e004      	b.n	80005d2 <HAL_GPIO_Init+0x1de>
 80005c8:	2307      	movs	r3, #7
 80005ca:	e002      	b.n	80005d2 <HAL_GPIO_Init+0x1de>
 80005cc:	2301      	movs	r3, #1
 80005ce:	e000      	b.n	80005d2 <HAL_GPIO_Init+0x1de>
 80005d0:	2300      	movs	r3, #0
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	f002 0203 	and.w	r2, r2, #3
 80005d8:	0092      	lsls	r2, r2, #2
 80005da:	4093      	lsls	r3, r2
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	4313      	orrs	r3, r2
 80005e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80005e2:	4937      	ldr	r1, [pc, #220]	; (80006c0 <HAL_GPIO_Init+0x2cc>)
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	089b      	lsrs	r3, r3, #2
 80005e8:	3302      	adds	r3, #2
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80005f0:	4b36      	ldr	r3, [pc, #216]	; (80006cc <HAL_GPIO_Init+0x2d8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	43db      	mvns	r3, r3
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000608:	2b00      	cmp	r3, #0
 800060a:	d003      	beq.n	8000614 <HAL_GPIO_Init+0x220>
        {
          temp |= iocurrent;
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4313      	orrs	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000614:	4a2d      	ldr	r2, [pc, #180]	; (80006cc <HAL_GPIO_Init+0x2d8>)
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <HAL_GPIO_Init+0x2d8>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	43db      	mvns	r3, r3
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	4013      	ands	r3, r2
 8000628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	4313      	orrs	r3, r2
 800063c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800063e:	4a23      	ldr	r2, [pc, #140]	; (80006cc <HAL_GPIO_Init+0x2d8>)
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <HAL_GPIO_Init+0x2d8>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	43db      	mvns	r3, r3
 800064e:	693a      	ldr	r2, [r7, #16]
 8000650:	4013      	ands	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4313      	orrs	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000668:	4a18      	ldr	r2, [pc, #96]	; (80006cc <HAL_GPIO_Init+0x2d8>)
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_GPIO_Init+0x2d8>)
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	43db      	mvns	r3, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d003      	beq.n	8000692 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4313      	orrs	r3, r2
 8000690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_GPIO_Init+0x2d8>)
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	3301      	adds	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	fa22 f303 	lsr.w	r3, r2, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f47f aeaf 	bne.w	800040c <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 80006ae:	bf00      	nop
 80006b0:	371c      	adds	r7, #28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000
 80006c4:	48000400 	.word	0x48000400
 80006c8:	48000800 	.word	0x48000800
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
 80006dc:	4613      	mov	r3, r2
 80006de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80006e0:	787b      	ldrb	r3, [r7, #1]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80006e6:	887a      	ldrh	r2, [r7, #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80006ec:	e002      	b.n	80006f4 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80006ee:	887a      	ldrh	r2, [r7, #2]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <HAL_PWREx_GetVoltageRange+0x18>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40007000 	.word	0x40007000

0800071c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800072e:	d12d      	bne.n	800078c <HAL_PWREx_ControlVoltageScaling+0x70>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800073c:	d035      	beq.n	80007aa <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074c:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000754:	fba2 2303 	umull	r2, r3, r2, r3
 8000758:	0c9b      	lsrs	r3, r3, #18
 800075a:	2232      	movs	r2, #50	; 0x32
 800075c:	fb02 f303 	mul.w	r3, r2, r3
 8000760:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000762:	e002      	b.n	800076a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3b01      	subs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f3      	bne.n	8000764 <HAL_PWREx_ControlVoltageScaling+0x48>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000784:	2b00      	cmp	r3, #0
 8000786:	d010      	beq.n	80007aa <HAL_PWREx_ControlVoltageScaling+0x8e>
      {
        return HAL_TIMEOUT;
 8000788:	2303      	movs	r3, #3
 800078a:	e00f      	b.n	80007ac <HAL_PWREx_ControlVoltageScaling+0x90>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000798:	d007      	beq.n	80007aa <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
}  
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	40007000 	.word	0x40007000
 80007bc:	20000004 	.word	0x20000004
 80007c0:	431bde83 	.word	0x431bde83

080007c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f003 0310 	and.w	r3, r3, #16
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 80d0 	beq.w	800097e <HAL_RCC_OscConfig+0x1ba>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80007de:	4ba1      	ldr	r3, [pc, #644]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	f003 030c 	and.w	r3, r3, #12
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d179      	bne.n	80008de <HAL_RCC_OscConfig+0x11a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007ea:	4b9e      	ldr	r3, [pc, #632]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d005      	beq.n	8000802 <HAL_RCC_OscConfig+0x3e>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <HAL_RCC_OscConfig+0x3e>
      {
        return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e378      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6a1a      	ldr	r2, [r3, #32]
 8000806:	4b97      	ldr	r3, [pc, #604]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	2b00      	cmp	r3, #0
 8000810:	d004      	beq.n	800081c <HAL_RCC_OscConfig+0x58>
 8000812:	4b94      	ldr	r3, [pc, #592]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800081a:	e005      	b.n	8000828 <HAL_RCC_OscConfig+0x64>
 800081c:	4b91      	ldr	r3, [pc, #580]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 800081e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000822:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000826:	091b      	lsrs	r3, r3, #4
 8000828:	429a      	cmp	r2, r3
 800082a:	d923      	bls.n	8000874 <HAL_RCC_OscConfig+0xb0>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6a1b      	ldr	r3, [r3, #32]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fd39 	bl	80012a8 <RCC_SetFlashLatencyFromMSIRange>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <HAL_RCC_OscConfig+0x7c>
          {
            return HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	e359      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000840:	4a88      	ldr	r2, [pc, #544]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000842:	4b88      	ldr	r3, [pc, #544]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4985      	ldr	r1, [pc, #532]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 800084e:	4b85      	ldr	r3, [pc, #532]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6a1b      	ldr	r3, [r3, #32]
 800085a:	4313      	orrs	r3, r2
 800085c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800085e:	4981      	ldr	r1, [pc, #516]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000860:	4b80      	ldr	r3, [pc, #512]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	4313      	orrs	r3, r2
 8000870:	604b      	str	r3, [r1, #4]
 8000872:	e022      	b.n	80008ba <HAL_RCC_OscConfig+0xf6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000874:	4a7b      	ldr	r2, [pc, #492]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000876:	4b7b      	ldr	r3, [pc, #492]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4978      	ldr	r1, [pc, #480]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000882:	4b78      	ldr	r3, [pc, #480]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a1b      	ldr	r3, [r3, #32]
 800088e:	4313      	orrs	r3, r2
 8000890:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000892:	4974      	ldr	r1, [pc, #464]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000894:	4b73      	ldr	r3, [pc, #460]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	4313      	orrs	r3, r2
 80008a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6a1b      	ldr	r3, [r3, #32]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fcfc 	bl	80012a8 <RCC_SetFlashLatencyFromMSIRange>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e31c      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80008ba:	f000 fc39 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 80008be:	4601      	mov	r1, r0
 80008c0:	4b68      	ldr	r3, [pc, #416]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	4a67      	ldr	r2, [pc, #412]	; (8000a68 <HAL_RCC_OscConfig+0x2a4>)
 80008cc:	5cd3      	ldrb	r3, [r2, r3]
 80008ce:	fa21 f303 	lsr.w	r3, r1, r3
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <HAL_RCC_OscConfig+0x2a8>)
 80008d4:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff fc78 	bl	80001cc <HAL_InitTick>
 80008dc:	e04f      	b.n	800097e <HAL_RCC_OscConfig+0x1ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d032      	beq.n	800094c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80008e6:	4a5f      	ldr	r2, [pc, #380]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80008e8:	4b5e      	ldr	r3, [pc, #376]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80008f2:	f7ff fc95 	bl	8000220 <HAL_GetTick>
 80008f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80008f8:	e008      	b.n	800090c <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008fa:	f7ff fc91 	bl	8000220 <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d901      	bls.n	800090c <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8000908:	2303      	movs	r3, #3
 800090a:	e2f3      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800090c:	4b55      	ldr	r3, [pc, #340]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f0      	beq.n	80008fa <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000918:	4a52      	ldr	r2, [pc, #328]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 800091a:	4b52      	ldr	r3, [pc, #328]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	494f      	ldr	r1, [pc, #316]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000926:	4b4f      	ldr	r3, [pc, #316]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a1b      	ldr	r3, [r3, #32]
 8000932:	4313      	orrs	r3, r2
 8000934:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000936:	494b      	ldr	r1, [pc, #300]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000938:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	4313      	orrs	r3, r2
 8000948:	604b      	str	r3, [r1, #4]
 800094a:	e018      	b.n	800097e <HAL_RCC_OscConfig+0x1ba>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800094c:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 800094e:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f023 0301 	bic.w	r3, r3, #1
 8000956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000958:	f7ff fc62 	bl	8000220 <HAL_GetTick>
 800095c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800095e:	e008      	b.n	8000972 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000960:	f7ff fc5e 	bl	8000220 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	2b02      	cmp	r3, #2
 800096c:	d901      	bls.n	8000972 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800096e:	2303      	movs	r3, #3
 8000970:	e2c0      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000972:	4b3c      	ldr	r3, [pc, #240]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1f0      	bne.n	8000960 <HAL_RCC_OscConfig+0x19c>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d07a      	beq.n	8000a80 <HAL_RCC_OscConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800098a:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f003 030c 	and.w	r3, r3, #12
 8000992:	2b08      	cmp	r3, #8
 8000994:	d00b      	beq.n	80009ae <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f003 030c 	and.w	r3, r3, #12
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800099e:	2b0c      	cmp	r3, #12
 80009a0:	d111      	bne.n	80009c6 <HAL_RCC_OscConfig+0x202>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d10b      	bne.n	80009c6 <HAL_RCC_OscConfig+0x202>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d061      	beq.n	8000a7e <HAL_RCC_OscConfig+0x2ba>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d15d      	bne.n	8000a7e <HAL_RCC_OscConfig+0x2ba>
      {
        return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e296      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ce:	d106      	bne.n	80009de <HAL_RCC_OscConfig+0x21a>
 80009d0:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	e01d      	b.n	8000a1a <HAL_RCC_OscConfig+0x256>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009e6:	d10c      	bne.n	8000a02 <HAL_RCC_OscConfig+0x23e>
 80009e8:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e00b      	b.n	8000a1a <HAL_RCC_OscConfig+0x256>
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a0c:	6013      	str	r3, [r2, #0]
 8000a0e:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d013      	beq.n	8000a4a <HAL_RCC_OscConfig+0x286>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a22:	f7ff fbfd 	bl	8000220 <HAL_GetTick>
 8000a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000a28:	e008      	b.n	8000a3c <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a2a:	f7ff fbf9 	bl	8000220 <HAL_GetTick>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	2b64      	cmp	r3, #100	; 0x64
 8000a36:	d901      	bls.n	8000a3c <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e25b      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_RCC_OscConfig+0x2a0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f0      	beq.n	8000a2a <HAL_RCC_OscConfig+0x266>
 8000a48:	e01a      	b.n	8000a80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a4a:	f7ff fbe9 	bl	8000220 <HAL_GetTick>
 8000a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000a50:	e00e      	b.n	8000a70 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a52:	f7ff fbe5 	bl	8000220 <HAL_GetTick>
 8000a56:	4602      	mov	r2, r0
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	2b64      	cmp	r3, #100	; 0x64
 8000a5e:	d907      	bls.n	8000a70 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 8000a60:	2303      	movs	r3, #3
 8000a62:	e247      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
 8000a64:	40021000 	.word	0x40021000
 8000a68:	08005890 	.word	0x08005890
 8000a6c:	20000004 	.word	0x20000004
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000a70:	4ba9      	ldr	r3, [pc, #676]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1ea      	bne.n	8000a52 <HAL_RCC_OscConfig+0x28e>
 8000a7c:	e000      	b.n	8000a80 <HAL_RCC_OscConfig+0x2bc>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d069      	beq.n	8000b60 <HAL_RCC_OscConfig+0x39c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000a8c:	4ba2      	ldr	r3, [pc, #648]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 030c 	and.w	r3, r3, #12
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d00b      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x2ec>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a98:	4b9f      	ldr	r3, [pc, #636]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000aa0:	2b0c      	cmp	r3, #12
 8000aa2:	d11c      	bne.n	8000ade <HAL_RCC_OscConfig+0x31a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d116      	bne.n	8000ade <HAL_RCC_OscConfig+0x31a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ab0:	4b99      	ldr	r3, [pc, #612]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <HAL_RCC_OscConfig+0x304>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e215      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ac8:	4993      	ldr	r1, [pc, #588]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000aca:	4b93      	ldr	r3, [pc, #588]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	061b      	lsls	r3, r3, #24
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000adc:	e040      	b.n	8000b60 <HAL_RCC_OscConfig+0x39c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d023      	beq.n	8000b2e <HAL_RCC_OscConfig+0x36a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ae6:	4a8c      	ldr	r2, [pc, #560]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000ae8:	4b8b      	ldr	r3, [pc, #556]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000af2:	f7ff fb95 	bl	8000220 <HAL_GetTick>
 8000af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000af8:	e008      	b.n	8000b0c <HAL_RCC_OscConfig+0x348>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000afa:	f7ff fb91 	bl	8000220 <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d901      	bls.n	8000b0c <HAL_RCC_OscConfig+0x348>
          {
            return HAL_TIMEOUT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e1f3      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000b0c:	4b82      	ldr	r3, [pc, #520]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f0      	beq.n	8000afa <HAL_RCC_OscConfig+0x336>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b18:	497f      	ldr	r1, [pc, #508]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000b1a:	4b7f      	ldr	r3, [pc, #508]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	061b      	lsls	r3, r3, #24
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	604b      	str	r3, [r1, #4]
 8000b2c:	e018      	b.n	8000b60 <HAL_RCC_OscConfig+0x39c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b2e:	4a7a      	ldr	r2, [pc, #488]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000b30:	4b79      	ldr	r3, [pc, #484]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b3a:	f7ff fb71 	bl	8000220 <HAL_GetTick>
 8000b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000b40:	e008      	b.n	8000b54 <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b42:	f7ff fb6d 	bl	8000220 <HAL_GetTick>
 8000b46:	4602      	mov	r2, r0
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d901      	bls.n	8000b54 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8000b50:	2303      	movs	r3, #3
 8000b52:	e1cf      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000b54:	4b70      	ldr	r3, [pc, #448]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f0      	bne.n	8000b42 <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0308 	and.w	r3, r3, #8
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d03c      	beq.n	8000be6 <HAL_RCC_OscConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d01c      	beq.n	8000bae <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b74:	4a68      	ldr	r2, [pc, #416]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000b76:	4b68      	ldr	r3, [pc, #416]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b84:	f7ff fb4c 	bl	8000220 <HAL_GetTick>
 8000b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000b8a:	e008      	b.n	8000b9e <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b8c:	f7ff fb48 	bl	8000220 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d901      	bls.n	8000b9e <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e1aa      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000b9e:	4b5e      	ldr	r3, [pc, #376]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0ef      	beq.n	8000b8c <HAL_RCC_OscConfig+0x3c8>
 8000bac:	e01b      	b.n	8000be6 <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bae:	4a5a      	ldr	r2, [pc, #360]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000bb0:	4b59      	ldr	r3, [pc, #356]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bb6:	f023 0301 	bic.w	r3, r3, #1
 8000bba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bbe:	f7ff fb2f 	bl	8000220 <HAL_GetTick>
 8000bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000bc4:	e008      	b.n	8000bd8 <HAL_RCC_OscConfig+0x414>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fb2b 	bl	8000220 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x414>
        {
          return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e18d      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000bd8:	4b4f      	ldr	r3, [pc, #316]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ef      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x402>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 80a6 	beq.w	8000d40 <HAL_RCC_OscConfig+0x57c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000bf8:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10d      	bne.n	8000c20 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c04:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c10:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c20:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <HAL_RCC_OscConfig+0x558>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d118      	bne.n	8000c5e <HAL_RCC_OscConfig+0x49a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c2c:	4a3b      	ldr	r2, [pc, #236]	; (8000d1c <HAL_RCC_OscConfig+0x558>)
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <HAL_RCC_OscConfig+0x558>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c38:	f7ff faf2 	bl	8000220 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x48e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c40:	f7ff faee 	bl	8000220 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e150      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <HAL_RCC_OscConfig+0x558>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f0      	beq.n	8000c40 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d108      	bne.n	8000c78 <HAL_RCC_OscConfig+0x4b4>
 8000c66:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c76:	e024      	b.n	8000cc2 <HAL_RCC_OscConfig+0x4fe>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	d110      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x4de>
 8000c80:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ca0:	e00f      	b.n	8000cc2 <HAL_RCC_OscConfig+0x4fe>
 8000ca2:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000cb2:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cba:	f023 0304 	bic.w	r3, r3, #4
 8000cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d016      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x534>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cca:	f7ff faa9 	bl	8000220 <HAL_GetTick>
 8000cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000cd0:	e00a      	b.n	8000ce8 <HAL_RCC_OscConfig+0x524>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cd2:	f7ff faa5 	bl	8000220 <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x524>
        {
          return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e105      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_RCC_OscConfig+0x554>)
 8000cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0ed      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x50e>
 8000cf6:	e01a      	b.n	8000d2e <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf8:	f7ff fa92 	bl	8000220 <HAL_GetTick>
 8000cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000cfe:	e00f      	b.n	8000d20 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d00:	f7ff fa8e 	bl	8000220 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d906      	bls.n	8000d20 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e0ee      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40007000 	.word	0x40007000
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000d20:	4b76      	ldr	r3, [pc, #472]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1e8      	bne.n	8000d00 <HAL_RCC_OscConfig+0x53c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d105      	bne.n	8000d40 <HAL_RCC_OscConfig+0x57c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d34:	4a71      	ldr	r2, [pc, #452]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000d36:	4b71      	ldr	r3, [pc, #452]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0320 	and.w	r3, r3, #32
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d03c      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x602>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d01c      	beq.n	8000d8e <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000d54:	4a69      	ldr	r2, [pc, #420]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000d56:	4b69      	ldr	r3, [pc, #420]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d64:	f7ff fa5c 	bl	8000220 <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x5ba>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d6c:	f7ff fa58 	bl	8000220 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x5ba>
        {
          return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e0ba      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0ef      	beq.n	8000d6c <HAL_RCC_OscConfig+0x5a8>
 8000d8c:	e01b      	b.n	8000dc6 <HAL_RCC_OscConfig+0x602>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000d8e:	4a5b      	ldr	r2, [pc, #364]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000d90:	4b5a      	ldr	r3, [pc, #360]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d96:	f023 0301 	bic.w	r3, r3, #1
 8000d9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fa3f 	bl	8000220 <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000da6:	f7ff fa3b 	bl	8000220 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e09d      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8000db8:	4b50      	ldr	r3, [pc, #320]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1ef      	bne.n	8000da6 <HAL_RCC_OscConfig+0x5e2>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8091 	beq.w	8000ef2 <HAL_RCC_OscConfig+0x72e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dd0:	4b4a      	ldr	r3, [pc, #296]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 030c 	and.w	r3, r3, #12
 8000dd8:	2b0c      	cmp	r3, #12
 8000dda:	f000 8088 	beq.w	8000eee <HAL_RCC_OscConfig+0x72a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d155      	bne.n	8000e92 <HAL_RCC_OscConfig+0x6ce>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de6:	4a45      	ldr	r2, [pc, #276]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000de8:	4b44      	ldr	r3, [pc, #272]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df2:	f7ff fa15 	bl	8000220 <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dfa:	f7ff fa11 	bl	8000220 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e073      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e0c:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f0      	bne.n	8000dfa <HAL_RCC_OscConfig+0x636>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e18:	4938      	ldr	r1, [pc, #224]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	011a      	lsls	r2, r3, #4
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e34:	085b      	lsrs	r3, r3, #1
 8000e36:	3b01      	subs	r3, #1
 8000e38:	055b      	lsls	r3, r3, #21
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	085b      	lsrs	r3, r3, #1
 8000e42:	3b01      	subs	r3, #1
 8000e44:	065b      	lsls	r3, r3, #25
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4c:	06db      	lsls	r3, r3, #27
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e52:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e5c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e5e:	4a27      	ldr	r2, [pc, #156]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e68:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e6a:	f7ff f9d9 	bl	8000220 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x6c0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e72:	f7ff f9d5 	bl	8000220 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e037      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x6ae>
 8000e90:	e02f      	b.n	8000ef2 <HAL_RCC_OscConfig+0x72e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e92:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d105      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x6f2>
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	f023 0303 	bic.w	r3, r3, #3
 8000eb4:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000eb6:	4a11      	ldr	r2, [pc, #68]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec6:	f7ff f9ab 	bl	8000220 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ece:	f7ff f9a7 	bl	8000220 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e009      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_RCC_OscConfig+0x738>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f0      	bne.n	8000ece <HAL_RCC_OscConfig+0x70a>
 8000eec:	e001      	b.n	8000ef2 <HAL_RCC_OscConfig+0x72e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_RCC_OscConfig+0x730>
    }
  }
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f0e:	4b84      	ldr	r3, [pc, #528]	; (8001120 <HAL_RCC_ClockConfig+0x220>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0207 	and.w	r2, r3, #7
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d210      	bcs.n	8000f3e <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f1c:	4980      	ldr	r1, [pc, #512]	; (8001120 <HAL_RCC_ClockConfig+0x220>)
 8000f1e:	4b80      	ldr	r3, [pc, #512]	; (8001120 <HAL_RCC_ClockConfig+0x220>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 0207 	bic.w	r2, r3, #7
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f2c:	4b7c      	ldr	r3, [pc, #496]	; (8001120 <HAL_RCC_ClockConfig+0x220>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0207 	and.w	r2, r3, #7
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d001      	beq.n	8000f3e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0ec      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d008      	beq.n	8000f5c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f4a:	4976      	ldr	r1, [pc, #472]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8000f4c:	4b75      	ldr	r3, [pc, #468]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 808e 	beq.w	8001086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d107      	bne.n	8000f82 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000f72:	4b6c      	ldr	r3, [pc, #432]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d121      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e0ca      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d107      	bne.n	8000f9a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f8a:	4b66      	ldr	r3, [pc, #408]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d115      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e0be      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d107      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000fa2:	4b60      	ldr	r3, [pc, #384]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0b2      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0aa      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000fc2:	4958      	ldr	r1, [pc, #352]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8000fc4:	4b57      	ldr	r3, [pc, #348]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 0203 	bic.w	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fd4:	f7ff f924 	bl	8000220 <HAL_GetTick>
 8000fd8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d112      	bne.n	8001008 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe4:	f7ff f91c 	bl	8000220 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e08e      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000ffa:	4b4a      	ldr	r3, [pc, #296]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b08      	cmp	r3, #8
 8001004:	d1ee      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xe4>
 8001006:	e03e      	b.n	8001086 <HAL_RCC_ClockConfig+0x186>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b03      	cmp	r3, #3
 800100e:	d112      	bne.n	8001036 <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001012:	f7ff f905 	bl	8000220 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e077      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001028:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b0c      	cmp	r3, #12
 8001032:	d1ee      	bne.n	8001012 <HAL_RCC_ClockConfig+0x112>
 8001034:	e027      	b.n	8001086 <HAL_RCC_ClockConfig+0x186>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d11d      	bne.n	800107a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800103e:	e00a      	b.n	8001056 <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001040:	f7ff f8ee 	bl	8000220 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	f241 3288 	movw	r2, #5000	; 0x1388
 800104e:	4293      	cmp	r3, r2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e060      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1ee      	bne.n	8001040 <HAL_RCC_ClockConfig+0x140>
 8001062:	e010      	b.n	8001086 <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001064:	f7ff f8dc 	bl	8000220 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001072:	4293      	cmp	r3, r2
 8001074:	d901      	bls.n	800107a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e04e      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b04      	cmp	r3, #4
 8001084:	d1ee      	bne.n	8001064 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <HAL_RCC_ClockConfig+0x220>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0207 	and.w	r2, r3, #7
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d910      	bls.n	80010b6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001094:	4922      	ldr	r1, [pc, #136]	; (8001120 <HAL_RCC_ClockConfig+0x220>)
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <HAL_RCC_ClockConfig+0x220>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 0207 	bic.w	r2, r3, #7
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_RCC_ClockConfig+0x220>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0207 	and.w	r2, r3, #7
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d001      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e030      	b.n	8001118 <HAL_RCC_ClockConfig+0x218>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d008      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010c2:	4918      	ldr	r1, [pc, #96]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d009      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010e0:	4910      	ldr	r1, [pc, #64]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010f4:	f000 f81c 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 80010f8:	4601      	mov	r1, r0
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_RCC_ClockConfig+0x224>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_RCC_ClockConfig+0x228>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	fa21 f303 	lsr.w	r3, r1, r3
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_RCC_ClockConfig+0x22c>)
 800110e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff f85b 	bl	80001cc <HAL_InitTick>

  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40022000 	.word	0x40022000
 8001124:	40021000 	.word	0x40021000
 8001128:	08005890 	.word	0x08005890
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	2302      	movs	r3, #2
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	2302      	movs	r3, #2
 8001148:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001162:	2b0c      	cmp	r3, #12
 8001164:	d127      	bne.n	80011b6 <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d121      	bne.n	80011b6 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001172:	4b43      	ldr	r3, [pc, #268]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d107      	bne.n	800118e <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800117e:	4b40      	ldr	r3, [pc, #256]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 8001180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001184:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e005      	b.n	800119a <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800118e:	4b3c      	ldr	r3, [pc, #240]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800119a:	4a3a      	ldr	r2, [pc, #232]	; (8001284 <HAL_RCC_GetSysClockFreq+0x154>)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80011a4:	4b36      	ldr	r3, [pc, #216]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d113      	bne.n	80011d8 <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	60fb      	str	r3, [r7, #12]
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80011b4:	e010      	b.n	80011d8 <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80011b6:	4b32      	ldr	r3, [pc, #200]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d102      	bne.n	80011c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <HAL_RCC_GetSysClockFreq+0x158>)
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e007      	b.n	80011d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_RCC_GetSysClockFreq+0x15c>)
 80011d6:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 030c 	and.w	r3, r3, #12
 80011e0:	2b0c      	cmp	r3, #12
 80011e2:	d145      	bne.n	8001270 <HAL_RCC_GetSysClockFreq+0x140>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	3301      	adds	r3, #1
 80011fa:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d002      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0xd8>
 8001202:	2b03      	cmp	r3, #3
 8001204:	d00d      	beq.n	8001222 <HAL_RCC_GetSysClockFreq+0xf2>
 8001206:	e019      	b.n	800123c <HAL_RCC_GetSysClockFreq+0x10c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001208:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <HAL_RCC_GetSysClockFreq+0x158>)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 8001212:	68d2      	ldr	r2, [r2, #12]
 8001214:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8001218:	0a12      	lsrs	r2, r2, #8
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	613b      	str	r3, [r7, #16]
      break;
 8001220:	e019      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 800122c:	68d2      	ldr	r2, [r2, #12]
 800122e:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 8001232:	0a12      	lsrs	r2, r2, #8
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	613b      	str	r3, [r7, #16]
      break;
 800123a:	e00c      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 8001246:	68d2      	ldr	r2, [r2, #12]
 8001248:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 800124c:	0a12      	lsrs	r2, r2, #8
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	613b      	str	r3, [r7, #16]
      break;
 8001254:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_RCC_GetSysClockFreq+0x150>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800125e:	0e5b      	lsrs	r3, r3, #25
 8001260:	3301      	adds	r3, #1
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001270:	68fb      	ldr	r3, [r7, #12]
}
 8001272:	4618      	mov	r0, r3
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	080058a0 	.word	0x080058a0
 8001288:	00f42400 	.word	0x00f42400
 800128c:	007a1200 	.word	0x007a1200

08001290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000004 	.word	0x20000004

080012a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80012c4:	f7ff fa1c 	bl	8000700 <HAL_PWREx_GetVoltageRange>
 80012c8:	6178      	str	r0, [r7, #20]
 80012ca:	e014      	b.n	80012f6 <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	4a25      	ldr	r2, [pc, #148]	; (8001364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6593      	str	r3, [r2, #88]	; 0x58
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80012e4:	f7ff fa0c 	bl	8000700 <HAL_PWREx_GetVoltageRange>
 80012e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80012ea:	4a1e      	ldr	r2, [pc, #120]	; (8001364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fc:	d10b      	bne.n	8001316 <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b80      	cmp	r3, #128	; 0x80
 8001302:	d919      	bls.n	8001338 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2ba0      	cmp	r3, #160	; 0xa0
 8001308:	d902      	bls.n	8001310 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800130a:	2302      	movs	r3, #2
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	e013      	b.n	8001338 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e010      	b.n	8001338 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b80      	cmp	r3, #128	; 0x80
 800131a:	d902      	bls.n	8001322 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800131c:	2303      	movs	r3, #3
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	e00a      	b.n	8001338 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b80      	cmp	r3, #128	; 0x80
 8001326:	d102      	bne.n	800132e <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001328:	2302      	movs	r3, #2
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	e004      	b.n	8001338 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b70      	cmp	r3, #112	; 0x70
 8001332:	d101      	bne.n	8001338 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001334:	2301      	movs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8001338:	490b      	ldr	r1, [pc, #44]	; (8001368 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0207 	bic.w	r2, r3, #7
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0207 	and.w	r2, r3, #7
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	40022000 	.word	0x40022000

0800136c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800137c:	2300      	movs	r3, #0
 800137e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001380:	2300      	movs	r3, #0
 8001382:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138c:	2b00      	cmp	r3, #0
 800138e:	d02f      	beq.n	80013f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001398:	d005      	beq.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800139a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800139e:	d015      	beq.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d007      	beq.n	80013b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80013a4:	e00f      	b.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80013a6:	4aaa      	ldr	r2, [pc, #680]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80013a8:	4ba9      	ldr	r3, [pc, #676]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80013b2:	e00c      	b.n	80013ce <HAL_RCCEx_PeriphCLKConfig+0x62>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3304      	adds	r3, #4
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f9c8 	bl	8001750 <RCCEx_PLLSAI1_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80013c4:	e003      	b.n	80013ce <HAL_RCCEx_PeriphCLKConfig+0x62>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	74fb      	strb	r3, [r7, #19]
      break;
 80013ca:	e000      	b.n	80013ce <HAL_RCCEx_PeriphCLKConfig+0x62>

#endif /* RCC_PLLSAI2_SUPPORT */

    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;
 80013cc:	bf00      	nop
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 80013ce:	7cfb      	ldrb	r3, [r7, #19]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10b      	bne.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013d4:	499e      	ldr	r1, [pc, #632]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80013d6:	4b9e      	ldr	r3, [pc, #632]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80013d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	4313      	orrs	r3, r2
 80013e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80013ea:	e001      	b.n	80013f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80013ec:	7cfb      	ldrb	r3, [r7, #19]
 80013ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 8094 	beq.w	8001526 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001402:	4b93      	ldr	r3, [pc, #588]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10d      	bne.n	800142a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4a90      	ldr	r2, [pc, #576]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001410:	4b8f      	ldr	r3, [pc, #572]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6593      	str	r3, [r2, #88]	; 0x58
 800141a:	4b8d      	ldr	r3, [pc, #564]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800142a:	4a8a      	ldr	r2, [pc, #552]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800142c:	4b89      	ldr	r3, [pc, #548]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001436:	f7fe fef3 	bl	8000220 <HAL_GetTick>
 800143a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800143c:	e009      	b.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f7fe feef 	bl	8000220 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d902      	bls.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        ret = HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	74fb      	strb	r3, [r7, #19]
        break;
 8001450:	e005      	b.n	800145e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001452:	4b80      	ldr	r3, [pc, #512]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0ef      	beq.n	800143e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 800145e:	7cfb      	ldrb	r3, [r7, #19]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d155      	bne.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001464:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800146e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01e      	beq.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	d019      	beq.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001480:	4b73      	ldr	r3, [pc, #460]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800148a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800148c:	4a70      	ldr	r2, [pc, #448]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800148e:	4b70      	ldr	r3, [pc, #448]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800149c:	4a6c      	ldr	r2, [pc, #432]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800149e:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80014a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80014ac:	4a68      	ldr	r2, [pc, #416]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d016      	beq.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x180>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7fe feaf 	bl	8000220 <HAL_GetTick>
 80014c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80014c4:	e00b      	b.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x172>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7fe feab 	bl	8000220 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d902      	bls.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x172>
          {
            ret = HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	74fb      	strb	r3, [r7, #19]
            break;
 80014dc:	e006      	b.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x180>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80014de:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80014e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ec      	beq.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10b      	bne.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014f2:	4957      	ldr	r1, [pc, #348]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80014f4:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80014f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001502:	4313      	orrs	r3, r2
 8001504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001508:	e004      	b.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800150a:	7cfb      	ldrb	r3, [r7, #19]
 800150c:	74bb      	strb	r3, [r7, #18]
 800150e:	e001      	b.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001510:	7cfb      	ldrb	r3, [r7, #19]
 8001512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001514:	7c7b      	ldrb	r3, [r7, #17]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d105      	bne.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151a:	4a4d      	ldr	r2, [pc, #308]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800151c:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001524:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00a      	beq.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001532:	4947      	ldr	r1, [pc, #284]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001534:	4b46      	ldr	r3, [pc, #280]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	f023 0203 	bic.w	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4313      	orrs	r3, r2
 8001544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00a      	beq.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001554:	493e      	ldr	r1, [pc, #248]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155c:	f023 020c 	bic.w	r2, r3, #12
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	4313      	orrs	r3, r2
 8001566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00a      	beq.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001576:	4936      	ldr	r1, [pc, #216]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	4313      	orrs	r3, r2
 8001588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00a      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001598:	492d      	ldr	r1, [pc, #180]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800159c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a8:	4313      	orrs	r3, r2
 80015aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80015ba:	4925      	ldr	r1, [pc, #148]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ca:	4313      	orrs	r3, r2
 80015cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00a      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015dc:	491c      	ldr	r1, [pc, #112]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80015e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	4313      	orrs	r3, r2
 80015ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015fe:	4914      	ldr	r1, [pc, #80]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001606:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4313      	orrs	r3, r2
 8001610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d02d      	beq.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001620:	490b      	ldr	r1, [pc, #44]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001628:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4313      	orrs	r3, r2
 8001632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800163e:	d10b      	bne.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001640:	4a03      	ldr	r2, [pc, #12]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001642:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800164a:	60d3      	str	r3, [r2, #12]
 800164c:	e016      	b.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40007000 	.word	0x40007000
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001660:	d10c      	bne.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3304      	adds	r3, #4
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f871 	bl	8001750 <RCCEx_PLLSAI1_Config>
 800166e:	4603      	mov	r3, r0
 8001670:	74fb      	strb	r3, [r7, #19]
      
        if(ret != HAL_OK)
 8001672:	7cfb      	ldrb	r3, [r7, #19]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8001678:	7cfb      	ldrb	r3, [r7, #19]
 800167a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d028      	beq.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001688:	4930      	ldr	r1, [pc, #192]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800168c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001690:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	4313      	orrs	r3, r2
 800169a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80016a6:	d106      	bne.n	80016b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80016a8:	4a28      	ldr	r2, [pc, #160]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016b2:	60d3      	str	r3, [r2, #12]
 80016b4:	e011      	b.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016be:	d10c      	bne.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3304      	adds	r3, #4
 80016c4:	2101      	movs	r1, #1
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f842 	bl	8001750 <RCCEx_PLLSAI1_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80016d0:	7cfb      	ldrb	r3, [r7, #19]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80016d6:	7cfb      	ldrb	r3, [r7, #19]
 80016d8:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01c      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016e6:	4919      	ldr	r1, [pc, #100]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f6:	4313      	orrs	r3, r2
 80016f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001704:	d10c      	bne.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3304      	adds	r3, #4
 800170a:	2102      	movs	r1, #2
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f81f 	bl	8001750 <RCCEx_PLLSAI1_Config>
 8001712:	4603      	mov	r3, r0
 8001714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001716:	7cfb      	ldrb	r3, [r7, #19]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800171c:	7cfb      	ldrb	r3, [r7, #19]
 800171e:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00a      	beq.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001734:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	4313      	orrs	r3, r2
 800173e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8001742:	7cbb      	ldrb	r3, [r7, #18]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000

08001750 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d018      	beq.n	80017a0 <RCCEx_PLLSAI1_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800176e:	4b70      	ldr	r3, [pc, #448]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0203 	and.w	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d10d      	bne.n	800179a <RCCEx_PLLSAI1_Config+0x4a>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <RCCEx_PLLSAI1_Config+0x4a>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001786:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 8001796:	429a      	cmp	r2, r3
 8001798:	d044      	beq.n	8001824 <RCCEx_PLLSAI1_Config+0xd4>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
      )
    {
      status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e041      	b.n	8001824 <RCCEx_PLLSAI1_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d00c      	beq.n	80017c2 <RCCEx_PLLSAI1_Config+0x72>
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d013      	beq.n	80017d4 <RCCEx_PLLSAI1_Config+0x84>
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d120      	bne.n	80017f2 <RCCEx_PLLSAI1_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80017b0:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d11d      	bne.n	80017f8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c0:	e01a      	b.n	80017f8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80017c2:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d116      	bne.n	80017fc <RCCEx_PLLSAI1_Config+0xac>
      {
        status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d2:	e013      	b.n	80017fc <RCCEx_PLLSAI1_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80017d4:	4b56      	ldr	r3, [pc, #344]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10f      	bne.n	8001800 <RCCEx_PLLSAI1_Config+0xb0>
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <RCCEx_PLLSAI1_Config+0xb0>
      {
        status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f0:	e006      	b.n	8001800 <RCCEx_PLLSAI1_Config+0xb0>
    default:
      status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
      break;
 80017f6:	e004      	b.n	8001802 <RCCEx_PLLSAI1_Config+0xb2>
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
      {
        status = HAL_ERROR;
      }
      break;
 80017f8:	bf00      	nop
 80017fa:	e002      	b.n	8001802 <RCCEx_PLLSAI1_Config+0xb2>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
      {
        status = HAL_ERROR;
      }
      break;
 80017fc:	bf00      	nop
 80017fe:	e000      	b.n	8001802 <RCCEx_PLLSAI1_Config+0xb2>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
      {
        status = HAL_ERROR;
      }
      break;
 8001800:	bf00      	nop
    default:
      status = HAL_ERROR;
      break;
    }
    
    if(status == HAL_OK)
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10d      	bne.n	8001824 <RCCEx_PLLSAI1_Config+0xd4>
    {
      /* Set PLLSAI1 clock source and divider M */
       MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001808:	4849      	ldr	r0, [pc, #292]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	430b      	orrs	r3, r1
 8001820:	4313      	orrs	r3, r2
 8001822:	60c3      	str	r3, [r0, #12]
    }
  }
  
  if(status == HAL_OK)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d17c      	bne.n	8001924 <RCCEx_PLLSAI1_Config+0x1d4>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800182a:	4a41      	ldr	r2, [pc, #260]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800182c:	4b40      	ldr	r3, [pc, #256]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001836:	f7fe fcf3 	bl	8000220 <HAL_GetTick>
 800183a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800183c:	e009      	b.n	8001852 <RCCEx_PLLSAI1_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800183e:	f7fe fcef 	bl	8000220 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d902      	bls.n	8001852 <RCCEx_PLLSAI1_Config+0x102>
      {
        status = HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	73fb      	strb	r3, [r7, #15]
        break;
 8001850:	e005      	b.n	800185e <RCCEx_PLLSAI1_Config+0x10e>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ef      	bne.n	800183e <RCCEx_PLLSAI1_Config+0xee>
        status = HAL_TIMEOUT;
        break;
      }
    }

    if(status == HAL_OK)    
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d15f      	bne.n	8001924 <RCCEx_PLLSAI1_Config+0x1d4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d110      	bne.n	800188c <RCCEx_PLLSAI1_Config+0x13c>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800186a:	4831      	ldr	r0, [pc, #196]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800186c:	4b30      	ldr	r3, [pc, #192]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001874:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6892      	ldr	r2, [r2, #8]
 800187c:	0211      	lsls	r1, r2, #8
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68d2      	ldr	r2, [r2, #12]
 8001882:	06d2      	lsls	r2, r2, #27
 8001884:	430a      	orrs	r2, r1
 8001886:	4313      	orrs	r3, r2
 8001888:	6103      	str	r3, [r0, #16]
 800188a:	e027      	b.n	80018dc <RCCEx_PLLSAI1_Config+0x18c>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) | 
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d112      	bne.n	80018b8 <RCCEx_PLLSAI1_Config+0x168>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001892:	4827      	ldr	r0, [pc, #156]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800189c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6892      	ldr	r2, [r2, #8]
 80018a4:	0211      	lsls	r1, r2, #8
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6912      	ldr	r2, [r2, #16]
 80018aa:	0852      	lsrs	r2, r2, #1
 80018ac:	3a01      	subs	r2, #1
 80018ae:	0552      	lsls	r2, r2, #21
 80018b0:	430a      	orrs	r2, r1
 80018b2:	4313      	orrs	r3, r2
 80018b4:	6103      	str	r3, [r0, #16]
 80018b6:	e011      	b.n	80018dc <RCCEx_PLLSAI1_Config+0x18c>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80018b8:	481d      	ldr	r0, [pc, #116]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80018c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6892      	ldr	r2, [r2, #8]
 80018ca:	0211      	lsls	r1, r2, #8
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6952      	ldr	r2, [r2, #20]
 80018d0:	0852      	lsrs	r2, r2, #1
 80018d2:	3a01      	subs	r2, #1
 80018d4:	0652      	lsls	r2, r2, #25
 80018d6:	430a      	orrs	r2, r1
 80018d8:	4313      	orrs	r3, r2
 80018da:	6103      	str	r3, [r0, #16]
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7fe fc9a 	bl	8000220 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80018ee:	e009      	b.n	8001904 <RCCEx_PLLSAI1_Config+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80018f0:	f7fe fc96 	bl	8000220 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d902      	bls.n	8001904 <RCCEx_PLLSAI1_Config+0x1b4>
        {
          status = HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	73fb      	strb	r3, [r7, #15]
          break;
 8001902:	e005      	b.n	8001910 <RCCEx_PLLSAI1_Config+0x1c0>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ef      	beq.n	80018f0 <RCCEx_PLLSAI1_Config+0x1a0>
          status = HAL_TIMEOUT;
          break;
        }
      }

      if(status == HAL_OK)    
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <RCCEx_PLLSAI1_Config+0x1d4>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001916:	4906      	ldr	r1, [pc, #24]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e07a      	b.n	8001a3c <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d106      	bne.n	8001966 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f003 fdb5 	bl	80054d0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2202      	movs	r2, #2
 800196a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800197c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001986:	d902      	bls.n	800198e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e002      	b.n	8001994 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800198e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001992:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800199c:	d007      	beq.n	80019ae <HAL_SPI_Init+0x7a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019a6:	d002      	beq.n	80019ae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10b      	bne.n	80019ce <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019be:	d903      	bls.n	80019c8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
 80019c6:	e002      	b.n	80019ce <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6851      	ldr	r1, [r2, #4]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6892      	ldr	r2, [r2, #8]
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6912      	ldr	r2, [r2, #16]
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6952      	ldr	r2, [r2, #20]
 80019e6:	4311      	orrs	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6992      	ldr	r2, [r2, #24]
 80019ec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	69d2      	ldr	r2, [r2, #28]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6a12      	ldr	r2, [r2, #32]
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6992      	ldr	r2, [r2, #24]
 8001a0e:	0c12      	lsrs	r2, r2, #16
 8001a10:	f002 0104 	and.w	r1, r2, #4
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	68d2      	ldr	r2, [r2, #12]
 8001a24:	4311      	orrs	r1, r2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_SPI_Transmit+0x26>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e13e      	b.n	8001ce8 <HAL_SPI_Transmit+0x2a4>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a72:	f7fe fbd5 	bl	8000220 <HAL_GetTick>
 8001a76:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d002      	beq.n	8001a8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
 8001a86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a88:	e125      	b.n	8001cd6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_SPI_Transmit+0x52>
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a9a:	e11c      	b.n	8001cd6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae6:	d107      	bne.n	8001af8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001af6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d107      	bne.n	8001b16 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b1e:	d947      	bls.n	8001bb0 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_SPI_Transmit+0xee>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d138      	bne.n	8001ba4 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	8812      	ldrh	r2, [r2, #0]
 8001b3a:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b50:	e028      	b.n	8001ba4 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00f      	beq.n	8001b80 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	8812      	ldrh	r2, [r2, #0]
 8001b68:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b7e:	e011      	b.n	8001ba4 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_SPI_Transmit+0x15a>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d00a      	beq.n	8001ba4 <HAL_SPI_Transmit+0x160>
 8001b8e:	f7fe fb47 	bl	8000220 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad2      	subs	r2, r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ba2:	e098      	b.n	8001cd6 <HAL_SPI_Transmit+0x292>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1d1      	bne.n	8001b52 <HAL_SPI_Transmit+0x10e>
 8001bae:	e072      	b.n	8001c96 <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_SPI_Transmit+0x17e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d164      	bne.n	8001c8c <HAL_SPI_Transmit+0x248>
    {
      if (hspi->TxXferCount > 1U)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d90f      	bls.n	8001bec <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	8812      	ldrh	r2, [r2, #0]
 8001bd4:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b02      	subs	r3, #2
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bea:	e04f      	b.n	8001c8c <HAL_SPI_Transmit+0x248>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f103 020c 	add.w	r2, r3, #12
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c59      	adds	r1, r3, #1
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001c0c:	e03e      	b.n	8001c8c <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d025      	beq.n	8001c68 <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d90f      	bls.n	8001c46 <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	8812      	ldrh	r2, [r2, #0]
 8001c2e:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3302      	adds	r3, #2
 8001c34:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b02      	subs	r3, #2
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c44:	e022      	b.n	8001c8c <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f103 020c 	add.w	r2, r3, #12
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1c59      	adds	r1, r3, #1
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c66:	e011      	b.n	8001c8c <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_SPI_Transmit+0x242>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d00a      	beq.n	8001c8c <HAL_SPI_Transmit+0x248>
 8001c76:	f7fe fad3 	bl	8000220 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad2      	subs	r2, r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d302      	bcc.n	8001c8c <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c8a:	e024      	b.n	8001cd6 <HAL_SPI_Transmit+0x292>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
        hspi->TxXferCount--;
      }
    }
    while (hspi->TxXferCount > 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1bb      	bne.n	8001c0e <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fb0e 	bl	80022bc <SPI_EndRxTxTransaction>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001ce6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_SPI_TransmitReceive+0x32>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e1e1      	b.n	80020e6 <HAL_SPI_TransmitReceive+0x3f6>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d2a:	f7fe fa79 	bl	8000220 <HAL_GetTick>
 8001d2e:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d00e      	beq.n	8001d64 <HAL_SPI_TransmitReceive+0x74>
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d4c:	d106      	bne.n	8001d5c <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_SPI_TransmitReceive+0x6c>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d003      	beq.n	8001d64 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001d62:	e1b6      	b.n	80020d2 <HAL_SPI_TransmitReceive+0x3e2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_SPI_TransmitReceive+0x86>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_SPI_TransmitReceive+0x86>
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001d7c:	e1a9      	b.n	80020d2 <HAL_SPI_TransmitReceive+0x3e2>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d003      	beq.n	8001d92 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	887a      	ldrh	r2, [r7, #2]
 8001da2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	887a      	ldrh	r2, [r7, #2]
 8001daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	887a      	ldrh	r2, [r7, #2]
 8001dbe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dd4:	d805      	bhi.n	8001de2 <HAL_SPI_TransmitReceive+0xf2>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d908      	bls.n	8001df4 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	6852      	ldr	r2, [r2, #4]
 8001dec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	e007      	b.n	8001e04 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	6852      	ldr	r2, [r2, #4]
 8001dfe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e02:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e2a:	d975      	bls.n	8001f18 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <HAL_SPI_TransmitReceive+0x14e>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d160      	bne.n	8001f00 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	8812      	ldrh	r2, [r2, #0]
 8001e46:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e5c:	e050      	b.n	8001f00 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01c      	beq.n	8001e9e <HAL_SPI_TransmitReceive+0x1ae>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d017      	beq.n	8001e9e <HAL_SPI_TransmitReceive+0x1ae>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	8812      	ldrh	r2, [r2, #0]
 8001e84:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3302      	adds	r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01a      	beq.n	8001ee0 <HAL_SPI_TransmitReceive+0x1f0>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001edc:	2301      	movs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee6:	d00b      	beq.n	8001f00 <HAL_SPI_TransmitReceive+0x210>
 8001ee8:	f7fe f99a 	bl	8000220 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d303      	bcc.n	8001f00 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001efe:	e0e8      	b.n	80020d2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1a9      	bne.n	8001e5e <HAL_SPI_TransmitReceive+0x16e>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1a3      	bne.n	8001e5e <HAL_SPI_TransmitReceive+0x16e>
 8001f16:	e0ca      	b.n	80020ae <HAL_SPI_TransmitReceive+0x3be>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_SPI_TransmitReceive+0x23c>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	f040 80b4 	bne.w	8002094 <HAL_SPI_TransmitReceive+0x3a4>
    {
      if (hspi->TxXferCount > 1U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d90f      	bls.n	8001f56 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	8812      	ldrh	r2, [r2, #0]
 8001f3e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3302      	adds	r3, #2
 8001f44:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b02      	subs	r3, #2
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f54:	e09e      	b.n	8002094 <HAL_SPI_TransmitReceive+0x3a4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f103 020c 	add.w	r2, r3, #12
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1c59      	adds	r1, r3, #1
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f76:	e08d      	b.n	8002094 <HAL_SPI_TransmitReceive+0x3a4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d032      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x2f4>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d02d      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x2f4>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d026      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x2f4>
      {
        if (hspi->TxXferCount > 1U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d90f      	bls.n	8001fc0 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3302      	adds	r3, #2
 8001fae:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b02      	subs	r3, #2
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fbe:	e00f      	b.n	8001fe0 <HAL_SPI_TransmitReceive+0x2f0>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f103 020c 	add.w	r2, r3, #12
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c59      	adds	r1, r3, #1
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d041      	beq.n	8002074 <HAL_SPI_TransmitReceive+0x384>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d03a      	beq.n	8002074 <HAL_SPI_TransmitReceive+0x384>
      {
        if (hspi->RxXferCount > 1U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d920      	bls.n	800204c <HAL_SPI_TransmitReceive+0x35c>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3302      	adds	r3, #2
 800201a:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b02      	subs	r3, #2
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d81a      	bhi.n	8002070 <HAL_SPI_TransmitReceive+0x380>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	6852      	ldr	r2, [r2, #4]
 8002044:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	e011      	b.n	8002070 <HAL_SPI_TransmitReceive+0x380>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	320c      	adds	r2, #12
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002070:	2301      	movs	r3, #1
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207a:	d00b      	beq.n	8002094 <HAL_SPI_TransmitReceive+0x3a4>
 800207c:	f7fe f8d0 	bl	8000220 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	1ad2      	subs	r2, r2, r3
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	429a      	cmp	r2, r3
 800208a:	d303      	bcc.n	8002094 <HAL_SPI_TransmitReceive+0x3a4>
      {
        errorcode = HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002092:	e01e      	b.n	80020d2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
        hspi->TxXferCount--;
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	f47f af6c 	bne.w	8001f78 <HAL_SPI_TransmitReceive+0x288>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f47f af65 	bne.w	8001f78 <HAL_SPI_TransmitReceive+0x288>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f902 	bl	80022bc <SPI_EndRxTxTransaction>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_SPI_TransmitReceive+0x3d4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80020e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3728      	adds	r7, #40	; 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop

080020f0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020fe:	b2db      	uxtb	r3, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800211a:	e04c      	b.n	80021b6 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d048      	beq.n	80021b6 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800212a:	f7fe f879 	bl	8000220 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad2      	subs	r2, r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d33d      	bcc.n	80021b6 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	6852      	ldr	r2, [r2, #4]
 8002144:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002148:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002152:	d111      	bne.n	8002178 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800215c:	d004      	beq.n	8002168 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002166:	d107      	bne.n	8002178 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002176:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002180:	d10f      	bne.n	80021a2 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e00e      	b.n	80021d4 <SPI_WaitFlagStateUntilTimeout+0xc8>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d101      	bne.n	80021ca <SPI_WaitFlagStateUntilTimeout+0xbe>
 80021c6:	2201      	movs	r2, #1
 80021c8:	e000      	b.n	80021cc <SPI_WaitFlagStateUntilTimeout+0xc0>
 80021ca:	2200      	movs	r2, #0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d1a4      	bne.n	800211c <SPI_WaitFlagStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80021ea:	e05a      	b.n	80022a2 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021f2:	d109      	bne.n	8002208 <SPI_WaitFifoStateUntilTimeout+0x2c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	330c      	adds	r3, #12
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002206:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d048      	beq.n	80022a2 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002216:	f7fe f803 	bl	8000220 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	1ad2      	subs	r2, r2, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d33d      	bcc.n	80022a2 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	6852      	ldr	r2, [r2, #4]
 8002230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800223e:	d111      	bne.n	8002264 <SPI_WaitFifoStateUntilTimeout+0x88>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002248:	d004      	beq.n	8002254 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002252:	d107      	bne.n	8002264 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226c:	d10f      	bne.n	800228e <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800228c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e008      	b.n	80022b4 <SPI_WaitFifoStateUntilTimeout+0xd8>
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d19c      	bne.n	80021ec <SPI_WaitFifoStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <SPI_EndRxTxTransaction>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f7ff ff81 	bl	80021dc <SPI_WaitFifoStateUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e027      	b.n	8002340 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff ff06 	bl	800210c <SPI_WaitFlagStateUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e014      	b.n	8002340 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7ff ff5a 	bl	80021dc <SPI_WaitFifoStateUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002332:	f043 0220 	orr.w	r2, r3, #32
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e000      	b.n	8002340 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e01d      	b.n	8002396 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f003 f8dc 	bl	800552c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f000 f826 	bl	80023d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop

080023a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop

080023d8 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a26      	ldr	r2, [pc, #152]	; (8002488 <TIM_Base_SetConfig+0xb0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d003      	beq.n	80023fc <TIM_Base_SetConfig+0x24>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fa:	d108      	bne.n	800240e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <TIM_Base_SetConfig+0xb0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00b      	beq.n	800242e <TIM_Base_SetConfig+0x56>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d007      	beq.n	800242e <TIM_Base_SetConfig+0x56>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <TIM_Base_SetConfig+0xb4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d003      	beq.n	800242e <TIM_Base_SetConfig+0x56>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <TIM_Base_SetConfig+0xb8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <TIM_Base_SetConfig+0xb0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <TIM_Base_SetConfig+0x96>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <TIM_Base_SetConfig+0xb4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d003      	beq.n	800246e <TIM_Base_SetConfig+0x96>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <TIM_Base_SetConfig+0xb8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d103      	bne.n	8002476 <TIM_Base_SetConfig+0x9e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	615a      	str	r2, [r3, #20]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40012c00 	.word	0x40012c00
 800248c:	40014000 	.word	0x40014000
 8002490:	40014400 	.word	0x40014400

08002494 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3301      	adds	r3, #1
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80024a4:	89fb      	ldrh	r3, [r7, #14]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80024b6:	89fb      	ldrh	r3, [r7, #14]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3303      	adds	r3, #3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	3202      	adds	r2, #2
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	3201      	adds	r2, #1
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80024fc:	68fb      	ldr	r3, [r7, #12]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop

0800250c <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	887a      	ldrh	r2, [r7, #2]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop

08002544 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	617a      	str	r2, [r7, #20]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	1c51      	adds	r1, r2, #1
 80025c0:	6139      	str	r1, [r7, #16]
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f1      	bne.n	80025b6 <mem_cpy+0x1a>
	}
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop

080025e0 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	617a      	str	r2, [r7, #20]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f3      	bne.n	80025f0 <mem_set+0x10>
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	61fa      	str	r2, [r7, #28]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	61ba      	str	r2, [r7, #24]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	1acb      	subs	r3, r1, r3
 8002640:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3b01      	subs	r3, #1
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <mem_cmp+0x40>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0eb      	beq.n	800262c <mem_cmp+0x18>

	return r;
 8002654:	697b      	ldr	r3, [r7, #20]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800266e:	e002      	b.n	8002676 <chk_chr+0x12>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3301      	adds	r3, #1
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <chk_chr+0x26>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d1f2      	bne.n	8002670 <chk_chr+0xc>
	return *str;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop

0800269c <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <dbc_1st+0x14>
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <dbc_1st+0x16>
#endif
	return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop

080026c0 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <dbc_2nd+0x14>
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <dbc_2nd+0x16>
#endif
	return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop

080026e4 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	78db      	ldrb	r3, [r3, #3]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d02c      	beq.n	8002752 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7858      	ldrb	r0, [r3, #1]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002706:	2301      	movs	r3, #1
 8002708:	f002 f950 	bl	80049ac <disk_write>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d11d      	bne.n	800274e <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	1ad2      	subs	r2, r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	429a      	cmp	r2, r3
 8002728:	d213      	bcs.n	8002752 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	789b      	ldrb	r3, [r3, #2]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d10f      	bne.n	8002752 <sync_window+0x6e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7858      	ldrb	r0, [r3, #1]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	441a      	add	r2, r3
 8002746:	2301      	movs	r3, #1
 8002748:	f002 f930 	bl	80049ac <disk_write>
 800274c:	e001      	b.n	8002752 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d01b      	beq.n	80027ac <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ffb5 	bl	80026e4 <sync_window>
 800277a:	4603      	mov	r3, r0
 800277c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d113      	bne.n	80027ac <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7858      	ldrb	r0, [r3, #1]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800278e:	2301      	movs	r3, #1
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	f002 f8a5 	bl	80048e0 <disk_read>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop

080027b8 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff8f 	bl	80026e4 <sync_window>
 80027c6:	4603      	mov	r3, r0
 80027c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d158      	bne.n	8002882 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d148      	bne.n	800286a <sync_fs+0xb2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	791b      	ldrb	r3, [r3, #4]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d144      	bne.n	800286a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3334      	adds	r3, #52	; 0x34
 80027e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fef8 	bl	80025e0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3334      	adds	r3, #52	; 0x34
 80027f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80027f8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fe85 	bl	800250c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3334      	adds	r3, #52	; 0x34
 8002806:	4921      	ldr	r1, [pc, #132]	; (800288c <sync_fs+0xd4>)
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fe9b 	bl	8002544 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3334      	adds	r3, #52	; 0x34
 8002812:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002816:	491e      	ldr	r1, [pc, #120]	; (8002890 <sync_fs+0xd8>)
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fe93 	bl	8002544 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3334      	adds	r3, #52	; 0x34
 8002822:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f7ff fe89 	bl	8002544 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3334      	adds	r3, #52	; 0x34
 8002836:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f7ff fe7f 	bl	8002544 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7858      	ldrb	r0, [r3, #1]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285e:	2301      	movs	r3, #1
 8002860:	f002 f8a4 	bl	80049ac <disk_write>
			fs->fsi_flag = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	785b      	ldrb	r3, [r3, #1]
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f002 f916 	bl	8004aa4 <disk_ioctl>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <sync_fs+0xca>
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	41615252 	.word	0x41615252
 8002890:	61417272 	.word	0x61417272

08002894 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	3b02      	subs	r3, #2
 80028a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	1e9a      	subs	r2, r3, #2
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d801      	bhi.n	80028b4 <clst2sect+0x20>
 80028b0:	2300      	movs	r3, #0
 80028b2:	e008      	b.n	80028c6 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	895b      	ldrh	r3, [r3, #10]
 80028bc:	4619      	mov	r1, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	fb03 f301 	mul.w	r3, r3, r1
 80028c4:	4413      	add	r3, r2
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop

080028d4 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d904      	bls.n	80028f4 <get_fat+0x20>
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d802      	bhi.n	80028fa <get_fat+0x26>
		val = 1;	/* Internal error */
 80028f4:	2301      	movs	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	e08c      	b.n	8002a14 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d045      	beq.n	8002994 <get_fat+0xc0>
 8002908:	2b03      	cmp	r3, #3
 800290a:	d05d      	beq.n	80029c8 <get_fat+0xf4>
 800290c:	2b01      	cmp	r3, #1
 800290e:	d177      	bne.n	8002a00 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	0a5b      	lsrs	r3, r3, #9
 8002926:	4413      	add	r3, r2
 8002928:	4619      	mov	r1, r3
 800292a:	6938      	ldr	r0, [r7, #16]
 800292c:	f7ff ff16 	bl	800275c <move_window>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d167      	bne.n	8002a06 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	60fa      	str	r2, [r7, #12]
 800293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002948:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0a5b      	lsrs	r3, r3, #9
 8002952:	4413      	add	r3, r2
 8002954:	4619      	mov	r1, r3
 8002956:	6938      	ldr	r0, [r7, #16]
 8002958:	f7ff ff00 	bl	800275c <move_window>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d153      	bne.n	8002a0a <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
 8002978:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <get_fat+0xb6>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	e002      	b.n	8002990 <get_fat+0xbc>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	617b      	str	r3, [r7, #20]
			break;
 8002992:	e03f      	b.n	8002a14 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	4413      	add	r3, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	6938      	ldr	r0, [r7, #16]
 80029a2:	f7ff fedb 	bl	800275c <move_window>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d130      	bne.n	8002a0e <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80029ba:	4413      	add	r3, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fd69 	bl	8002494 <ld_word>
 80029c2:	4603      	mov	r3, r0
 80029c4:	617b      	str	r3, [r7, #20]
			break;
 80029c6:	e025      	b.n	8002a14 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	09db      	lsrs	r3, r3, #7
 80029d0:	4413      	add	r3, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	6938      	ldr	r0, [r7, #16]
 80029d6:	f7ff fec1 	bl	800275c <move_window>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d118      	bne.n	8002a12 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80029ee:	4413      	add	r3, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fd67 	bl	80024c4 <ld_dword>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80029fc:	617b      	str	r3, [r7, #20]
			break;
 80029fe:	e009      	b.n	8002a14 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002a00:	2301      	movs	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	e006      	b.n	8002a14 <get_fat+0x140>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a06:	bf00      	nop
 8002a08:	e004      	b.n	8002a14 <get_fat+0x140>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a0a:	bf00      	nop
 8002a0c:	e002      	b.n	8002a14 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002a12:	bf00      	nop
		default:
			val = 1;	/* Internal error */
		}
	}

	return val;
 8002a14:	697b      	ldr	r3, [r7, #20]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop

08002a20 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	f240 80d8 	bls.w	8002be8 <put_fat+0x1c8>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	699a      	ldr	r2, [r3, #24]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	f240 80d2 	bls.w	8002be8 <put_fat+0x1c8>
		switch (fs->fs_type) {
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d075      	beq.n	8002b38 <put_fat+0x118>
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	f000 8093 	beq.w	8002b78 <put_fat+0x158>
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	f040 80c8 	bne.w	8002be8 <put_fat+0x1c8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	0a5b      	lsrs	r3, r3, #9
 8002a6e:	4413      	add	r3, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff fe72 	bl	800275c <move_window>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002a7c:	7ffb      	ldrb	r3, [r7, #31]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 80ab 	bne.w	8002bda <put_fat+0x1ba>
			p = fs->win + bc++ % SS(fs);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	1c59      	adds	r1, r3, #1
 8002a8e:	61b9      	str	r1, [r7, #24]
 8002a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a94:	4413      	add	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00f      	beq.n	8002ac2 <put_fat+0xa2>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	b25b      	sxtb	r3, r3
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	b25a      	sxtb	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	b25b      	sxtb	r3, r3
 8002ab4:	f023 030f 	bic.w	r3, r3, #15
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	4313      	orrs	r3, r2
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	e001      	b.n	8002ac6 <put_fat+0xa6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	0a5b      	lsrs	r3, r3, #9
 8002ad8:	4413      	add	r3, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7ff fe3d 	bl	800275c <move_window>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002ae6:	7ffb      	ldrb	r3, [r7, #31]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d178      	bne.n	8002bde <put_fat+0x1be>
			p = fs->win + bc % SS(fs);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <put_fat+0xee>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e00e      	b.n	8002b2c <put_fat+0x10c>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	f023 030f 	bic.w	r3, r3, #15
 8002b18:	b25a      	sxtb	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	4313      	orrs	r3, r2
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	70da      	strb	r2, [r3, #3]
			break;
 8002b36:	e057      	b.n	8002be8 <put_fat+0x1c8>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	4413      	add	r3, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fe09 	bl	800275c <move_window>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b4e:	7ffb      	ldrb	r3, [r7, #31]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d146      	bne.n	8002be2 <put_fat+0x1c2>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002b62:	4413      	add	r3, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	b292      	uxth	r2, r2
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fcce 	bl	800250c <st_word>
			fs->wflag = 1;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	70da      	strb	r2, [r3, #3]
			break;
 8002b76:	e037      	b.n	8002be8 <put_fat+0x1c8>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	09db      	lsrs	r3, r3, #7
 8002b80:	4413      	add	r3, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7ff fde9 	bl	800275c <move_window>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002b8e:	7ffb      	ldrb	r3, [r7, #31]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d128      	bne.n	8002be6 <put_fat+0x1c6>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002ba8:	4413      	add	r3, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fc8a 	bl	80024c4 <ld_dword>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002bb6:	4323      	orrs	r3, r4
 8002bb8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002bc8:	4413      	add	r3, r2
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fcb9 	bl	8002544 <st_dword>
			fs->wflag = 1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	70da      	strb	r2, [r3, #3]
			break;
 8002bd8:	e006      	b.n	8002be8 <put_fat+0x1c8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
 8002bda:	bf00      	nop
 8002bdc:	e004      	b.n	8002be8 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
 8002bde:	bf00      	nop
 8002be0:	e002      	b.n	8002be8 <put_fat+0x1c8>
			fs->wflag = 1;
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <put_fat+0x1c8>
		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
 8002be6:	bf00      	nop
			st_dword(fs->win + clst * 4 % SS(fs), val);
			fs->wflag = 1;
			break;
		}
	}
	return res;
 8002be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd90      	pop	{r4, r7, pc}
 8002bf2:	bf00      	nop

08002bf4 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:entire chain) */
)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d904      	bls.n	8002c1a <remove_chain+0x26>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d801      	bhi.n	8002c1e <remove_chain+0x2a>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e04b      	b.n	8002cb6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00c      	beq.n	8002c3e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	69b8      	ldr	r0, [r7, #24]
 8002c2c:	f7ff fef8 	bl	8002a20 <put_fat>
 8002c30:	4603      	mov	r3, r0
 8002c32:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002c34:	7ffb      	ldrb	r3, [r7, #31]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <remove_chain+0x4a>
 8002c3a:	7ffb      	ldrb	r3, [r7, #31]
 8002c3c:	e03b      	b.n	8002cb6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fe47 	bl	80028d4 <get_fat>
 8002c46:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d031      	beq.n	8002cb2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <remove_chain+0x64>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e02e      	b.n	8002cb6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d101      	bne.n	8002c64 <remove_chain+0x70>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e028      	b.n	8002cb6 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002c64:	2200      	movs	r2, #0
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	69b8      	ldr	r0, [r7, #24]
 8002c6a:	f7ff fed9 	bl	8002a20 <put_fat>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002c72:	7ffb      	ldrb	r3, [r7, #31]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <remove_chain+0x88>
 8002c78:	7ffb      	ldrb	r3, [r7, #31]
 8002c7a:	e01c      	b.n	8002cb6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	3b02      	subs	r3, #2
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d20b      	bcs.n	8002ca2 <remove_chain+0xae>
			fs->free_clst++;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	791b      	ldrb	r3, [r3, #4]
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d8c6      	bhi.n	8002c3e <remove_chain+0x4a>
 8002cb0:	e000      	b.n	8002cb4 <remove_chain+0xc0>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
 8002cb2:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop

08002cc0 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <create_chain+0x2c>
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d81b      	bhi.n	8002d24 <create_chain+0x64>
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	e018      	b.n	8002d24 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fded 	bl	80028d4 <get_fat>
 8002cfa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d801      	bhi.n	8002d06 <create_chain+0x46>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0a9      	b.n	8002e5a <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d101      	bne.n	8002d12 <create_chain+0x52>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	e0a3      	b.n	8002e5a <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d901      	bls.n	8002d20 <create_chain+0x60>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	e09c      	b.n	8002e5a <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <create_chain+0x70>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e094      	b.n	8002e5a <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d129      	bne.n	8002d90 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d801      	bhi.n	8002d50 <create_chain+0x90>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002d50:	69f9      	ldr	r1, [r7, #28]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fdbe 	bl	80028d4 <get_fat>
 8002d58:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d003      	beq.n	8002d68 <create_chain+0xa8>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d66:	d101      	bne.n	8002d6c <create_chain+0xac>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	e076      	b.n	8002e5a <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00e      	beq.n	8002d90 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d906      	bls.n	8002d8c <create_chain+0xcc>
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d901      	bls.n	8002d8c <create_chain+0xcc>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d129      	bne.n	8002dea <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d807      	bhi.n	8002dba <create_chain+0xfa>
					ncl = 2;
 8002daa:	2302      	movs	r3, #2
 8002dac:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d901      	bls.n	8002dba <create_chain+0xfa>
 8002db6:	2300      	movs	r3, #0
 8002db8:	e04f      	b.n	8002e5a <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002dba:	69f9      	ldr	r1, [r7, #28]
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fd89 	bl	80028d4 <get_fat>
 8002dc2:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d003      	beq.n	8002dd8 <create_chain+0x118>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d101      	bne.n	8002ddc <create_chain+0x11c>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	e03e      	b.n	8002e5a <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1da      	bne.n	8002d9a <create_chain+0xda>
 8002de4:	2300      	movs	r3, #0
 8002de6:	e038      	b.n	8002e5a <create_chain+0x19a>
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
					ncl = 2;
					if (ncl > scl) return 0;	/* No free cluster found? */
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
				if (cs == 0) break;				/* Found a free cluster? */
 8002de8:	bf00      	nop
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
				if (ncl == scl) return 0;		/* No free cluster found? */
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8002dea:	f04f 32ff 	mov.w	r2, #4294967295
 8002dee:	69f9      	ldr	r1, [r7, #28]
 8002df0:	6938      	ldr	r0, [r7, #16]
 8002df2:	f7ff fe15 	bl	8002a20 <put_fat>
 8002df6:	4603      	mov	r3, r0
 8002df8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <create_chain+0x154>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	6938      	ldr	r0, [r7, #16]
 8002e0c:	f7ff fe08 	bl	8002a20 <put_fat>
 8002e10:	4603      	mov	r3, r0
 8002e12:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <create_chain+0x188>
		fs->last_clst = ncl;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	3b02      	subs	r3, #2
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d804      	bhi.n	8002e38 <create_chain+0x178>
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	1e5a      	subs	r2, r3, #1
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	791b      	ldrb	r3, [r3, #4]
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	711a      	strb	r2, [r3, #4]
 8002e46:	e007      	b.n	8002e58 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <create_chain+0x194>
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	e000      	b.n	8002e56 <create_chain+0x196>
 8002e54:	2301      	movs	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002e58:	69fb      	ldr	r3, [r7, #28]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop

08002e64 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fc38 	bl	80026e4 <sync_window>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <dir_clear+0x1a>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e036      	b.n	8002eec <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff fd07 	bl	8002894 <clst2sect>
 8002e86:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3334      	adds	r3, #52	; 0x34
 8002e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fba1 	bl	80025e0 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3334      	adds	r3, #52	; 0x34
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e003      	b.n	8002eb6 <dir_clear+0x52>
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	895b      	ldrh	r3, [r3, #10]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d90b      	bls.n	8002eda <dir_clear+0x76>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7858      	ldrb	r0, [r3, #1]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	441a      	add	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	68f9      	ldr	r1, [r7, #12]
 8002ed0:	f001 fd6c 	bl	80049ac <disk_write>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0e9      	beq.n	8002eae <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	895b      	ldrh	r3, [r3, #10]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f0a:	d204      	bcs.n	8002f16 <dir_sdi+0x22>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <dir_sdi+0x26>
		return FR_INT_ERR;
 8002f16:	2302      	movs	r3, #2
 8002f18:	e063      	b.n	8002fe2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <dir_sdi+0x46>
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d902      	bls.n	8002f3a <dir_sdi+0x46>
		clst = fs->dirbase;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10c      	bne.n	8002f5a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	8912      	ldrh	r2, [r2, #8]
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d301      	bcc.n	8002f50 <dir_sdi+0x5c>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e048      	b.n	8002fe2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
 8002f58:	e029      	b.n	8002fae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	895b      	ldrh	r3, [r3, #10]
 8002f5e:	025b      	lsls	r3, r3, #9
 8002f60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002f62:	e019      	b.n	8002f98 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6979      	ldr	r1, [r7, #20]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fcb3 	bl	80028d4 <get_fat>
 8002f6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d101      	bne.n	8002f7c <dir_sdi+0x88>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e032      	b.n	8002fe2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d904      	bls.n	8002f8c <dir_sdi+0x98>
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d801      	bhi.n	8002f90 <dir_sdi+0x9c>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e028      	b.n	8002fe2 <dir_sdi+0xee>
			ofs -= csz;
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	603b      	str	r3, [r7, #0]
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d2e1      	bcs.n	8002f64 <dir_sdi+0x70>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clst2sect(fs, clst);
 8002fa0:	6979      	ldr	r1, [r7, #20]
 8002fa2:	6938      	ldr	r0, [r7, #16]
 8002fa4:	f7ff fc76 	bl	8002894 <clst2sect>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <dir_sdi+0xcc>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e010      	b.n	8002fe2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	0a5b      	lsrs	r3, r3, #9
 8002fc8:	441a      	add	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fda:	441a      	add	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop

08002fec <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	3320      	adds	r3, #32
 8003002:	60fb      	str	r3, [r7, #12]
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <dir_next+0x28>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003012:	d301      	bcc.n	8003018 <dir_next+0x2c>
 8003014:	2304      	movs	r3, #4
 8003016:	e078      	b.n	800310a <dir_next+0x11e>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301e:	2b00      	cmp	r3, #0
 8003020:	d166      	bne.n	80030f0 <dir_next+0x104>
		dp->sect++;				/* Next sector */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <dir_next+0x5e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	8912      	ldrh	r2, [r2, #8]
 800303c:	4293      	cmp	r3, r2
 800303e:	d357      	bcc.n	80030f0 <dir_next+0x104>
				dp->sect = 0; return FR_NO_FILE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
 8003046:	2304      	movs	r3, #4
 8003048:	e05f      	b.n	800310a <dir_next+0x11e>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	0a5b      	lsrs	r3, r3, #9
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	8952      	ldrh	r2, [r2, #10]
 8003052:	3a01      	subs	r2, #1
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d14a      	bne.n	80030f0 <dir_next+0x104>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f7ff fc36 	bl	80028d4 <get_fat>
 8003068:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d801      	bhi.n	8003074 <dir_next+0x88>
 8003070:	2302      	movs	r3, #2
 8003072:	e04a      	b.n	800310a <dir_next+0x11e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d101      	bne.n	8003080 <dir_next+0x94>
 800307c:	2301      	movs	r3, #1
 800307e:	e044      	b.n	800310a <dir_next+0x11e>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	429a      	cmp	r2, r3
 8003088:	d828      	bhi.n	80030dc <dir_next+0xf0>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <dir_next+0xae>
						dp->sect = 0; return FR_NO_FILE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	619a      	str	r2, [r3, #24]
 8003096:	2304      	movs	r3, #4
 8003098:	e037      	b.n	800310a <dir_next+0x11e>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f7ff fe0c 	bl	8002cc0 <create_chain>
 80030a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <dir_next+0xc8>
 80030b0:	2307      	movs	r3, #7
 80030b2:	e02a      	b.n	800310a <dir_next+0x11e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <dir_next+0xd2>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e025      	b.n	800310a <dir_next+0x11e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d101      	bne.n	80030ca <dir_next+0xde>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e01f      	b.n	800310a <dir_next+0x11e>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80030ca:	6979      	ldr	r1, [r7, #20]
 80030cc:	6938      	ldr	r0, [r7, #16]
 80030ce:	f7ff fec9 	bl	8002e64 <dir_clear>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <dir_next+0xf0>
 80030d8:	2301      	movs	r3, #1
 80030da:	e016      	b.n	800310a <dir_next+0x11e>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80030e2:	6979      	ldr	r1, [r7, #20]
 80030e4:	6938      	ldr	r0, [r7, #16]
 80030e6:	f7ff fbd5 	bl	8002894 <clst2sect>
 80030ea:	4602      	mov	r2, r0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003102:	441a      	add	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop

08003114 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003124:	2100      	movs	r1, #0
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fee4 	bl	8002ef4 <dir_sdi>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d12b      	bne.n	800318e <dir_alloc+0x7a>
		n = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	4619      	mov	r1, r3
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7ff fb0b 	bl	800275c <move_window>
 8003146:	4603      	mov	r3, r0
 8003148:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11d      	bne.n	800318c <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2be5      	cmp	r3, #229	; 0xe5
 8003158:	d004      	beq.n	8003164 <dir_alloc+0x50>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	3301      	adds	r3, #1
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d102      	bne.n	8003178 <dir_alloc+0x64>
 8003172:	e00c      	b.n	800318e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003178:	2101      	movs	r1, #1
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff36 	bl	8002fec <dir_next>
 8003180:	4603      	mov	r3, r0
 8003182:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0d7      	beq.n	800313a <dir_alloc+0x26>
 800318a:	e000      	b.n	800318e <dir_alloc+0x7a>
	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(fs, dp->sect);
			if (res != FR_OK) break;
 800318c:	bf00      	nop
			}
			res = dir_next(dp, 1);
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d101      	bne.n	8003198 <dir_alloc+0x84>
 8003194:	2307      	movs	r3, #7
 8003196:	75fb      	strb	r3, [r7, #23]
	return res;
 8003198:	7dfb      	ldrb	r3, [r7, #23]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop

080031a4 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	331a      	adds	r3, #26
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f96e 	bl	8002494 <ld_word>
 80031b8:	4603      	mov	r3, r0
 80031ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d109      	bne.n	80031d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f963 	bl	8002494 <ld_word>
 80031ce:	4603      	mov	r3, r0
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop

080031e4 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	331a      	adds	r3, #26
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	b292      	uxth	r2, r2
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff f986 	bl	800250c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d109      	bne.n	800321c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f103 0214 	add.w	r2, r3, #20
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	b29b      	uxth	r3, r3
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f7ff f978 	bl	800250c <st_word>
	}
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003232:	2100      	movs	r1, #0
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fe5d 	bl	8002ef4 <dir_sdi>
 800323a:	4603      	mov	r3, r0
 800323c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <dir_find+0x24>
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	e03e      	b.n	80032c6 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4619      	mov	r1, r3
 800324e:	6938      	ldr	r0, [r7, #16]
 8003250:	f7ff fa84 	bl	800275c <move_window>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d12f      	bne.n	80032be <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <dir_find+0x4e>
 800326c:	2304      	movs	r3, #4
 800326e:	75fb      	strb	r3, [r7, #23]
 8003270:	e028      	b.n	80032c4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	330b      	adds	r3, #11
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327e:	b2da      	uxtb	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	330b      	adds	r3, #11
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <dir_find+0x86>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69d8      	ldr	r0, [r3, #28]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3320      	adds	r3, #32
 800329c:	220b      	movs	r2, #11
 800329e:	4619      	mov	r1, r3
 80032a0:	f7ff f9b8 	bl	8002614 <mem_cmp>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80032aa:	2100      	movs	r1, #0
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fe9d 	bl	8002fec <dir_next>
 80032b2:	4603      	mov	r3, r0
 80032b4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0c5      	beq.n	8003248 <dir_find+0x24>
 80032bc:	e002      	b.n	80032c4 <dir_find+0xa0>
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <dir_find+0xa0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80032c2:	bf00      	nop
#endif
		res = dir_next(dp, 0);	/* Next entry */
	} while (res == FR_OK);

	return res;
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop

080032d0 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80032de:	2101      	movs	r1, #1
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff17 	bl	8003114 <dir_alloc>
 80032e6:	4603      	mov	r3, r0
 80032e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11c      	bne.n	800332a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	4619      	mov	r1, r3
 80032f6:	68b8      	ldr	r0, [r7, #8]
 80032f8:	f7ff fa30 	bl	800275c <move_window>
 80032fc:	4603      	mov	r3, r0
 80032fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d111      	bne.n	800332a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	2220      	movs	r2, #32
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff f966 	bl	80025e0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69d8      	ldr	r0, [r3, #28]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3320      	adds	r3, #32
 800331c:	220b      	movs	r2, #11
 800331e:	4619      	mov	r1, r3
 8003320:	f7ff f93c 	bl	800259c <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2201      	movs	r2, #1
 8003328:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3320      	adds	r3, #32
 8003348:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 800334a:	220b      	movs	r2, #11
 800334c:	2120      	movs	r1, #32
 800334e:	6938      	ldr	r0, [r7, #16]
 8003350:	f7ff f946 	bl	80025e0 <mem_set>
	si = i = 0; ni = 8;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	2308      	movs	r3, #8
 800335e:	623b      	str	r3, [r7, #32]
#if FF_FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b2e      	cmp	r3, #46	; 0x2e
 800336a:	d136      	bne.n	80033da <create_name+0xa6>
		for (;;) {
			c = (BYTE)p[si++];
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	61fa      	str	r2, [r7, #28]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4413      	add	r3, r2
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (c != '.' || si >= 3) break;
 800337c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003380:	2b2e      	cmp	r3, #46	; 0x2e
 8003382:	d10b      	bne.n	800339c <create_name+0x68>
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d808      	bhi.n	800339c <create_name+0x68>
			sfn[i++] = c;
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	61ba      	str	r2, [r7, #24]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003398:	701a      	strb	r2, [r3, #0]
		}
 800339a:	e7e7      	b.n	800336c <create_name+0x38>
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800339c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033a0:	2b2f      	cmp	r3, #47	; 0x2f
 80033a2:	d009      	beq.n	80033b8 <create_name+0x84>
 80033a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033a8:	2b5c      	cmp	r3, #92	; 0x5c
 80033aa:	d005      	beq.n	80033b8 <create_name+0x84>
 80033ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d901      	bls.n	80033b8 <create_name+0x84>
 80033b4:	2306      	movs	r3, #6
 80033b6:	e0c3      	b.n	8003540 <create_name+0x20c>
		*path = p + si;								/* Return pointer to the next segment */
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	441a      	add	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	330b      	adds	r3, #11
 80033c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80033ca:	2a20      	cmp	r2, #32
 80033cc:	d801      	bhi.n	80033d2 <create_name+0x9e>
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	e000      	b.n	80033d4 <create_name+0xa0>
 80033d2:	2220      	movs	r2, #32
 80033d4:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e0b2      	b.n	8003540 <create_name+0x20c>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	61fa      	str	r2, [r7, #28]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 80033ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	f240 8089 	bls.w	8003506 <create_name+0x1d2>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80033f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033f8:	2b2f      	cmp	r3, #47	; 0x2f
 80033fa:	d007      	beq.n	800340c <create_name+0xd8>
 80033fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003400:	2b5c      	cmp	r3, #92	; 0x5c
 8003402:	d110      	bne.n	8003426 <create_name+0xf2>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003404:	e002      	b.n	800340c <create_name+0xd8>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3301      	adds	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b2f      	cmp	r3, #47	; 0x2f
 8003416:	d0f6      	beq.n	8003406 <create_name+0xd2>
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b5c      	cmp	r3, #92	; 0x5c
 8003422:	d0f0      	beq.n	8003406 <create_name+0xd2>
			break;
 8003424:	e070      	b.n	8003508 <create_name+0x1d4>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8003426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800342a:	2b2e      	cmp	r3, #46	; 0x2e
 800342c:	d003      	beq.n	8003436 <create_name+0x102>
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	429a      	cmp	r2, r3
 8003434:	d30d      	bcc.n	8003452 <create_name+0x11e>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b0b      	cmp	r3, #11
 800343a:	d003      	beq.n	8003444 <create_name+0x110>
 800343c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003440:	2b2e      	cmp	r3, #46	; 0x2e
 8003442:	d001      	beq.n	8003448 <create_name+0x114>
 8003444:	2306      	movs	r3, #6
 8003446:	e07b      	b.n	8003540 <create_name+0x20c>
			i = 8; ni = 11;				/* Enter file extension field */
 8003448:	2308      	movs	r3, #8
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	230b      	movs	r3, #11
 800344e:	623b      	str	r3, [r7, #32]
			continue;
 8003450:	e058      	b.n	8003504 <create_name+0x1d0>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8003452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003456:	2b00      	cmp	r3, #0
 8003458:	da07      	bge.n	800346a <create_name+0x136>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800345a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800345e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003462:	4a39      	ldr	r2, [pc, #228]	; (8003548 <create_name+0x214>)
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800346a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff f914 	bl	800269c <dbc_1st>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d024      	beq.n	80034c4 <create_name+0x190>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	61fa      	str	r2, [r7, #28]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f918 	bl	80026c0 <dbc_2nd>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <create_name+0x16c>
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	429a      	cmp	r2, r3
 800349e:	d801      	bhi.n	80034a4 <create_name+0x170>
 80034a0:	2306      	movs	r3, #6
 80034a2:	e04d      	b.n	8003540 <create_name+0x20c>
			sfn[i++] = c;
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	61ba      	str	r2, [r7, #24]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80034b2:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	61ba      	str	r2, [r7, #24]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e78a      	b.n	80033da <create_name+0xa6>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80034c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c8:	4619      	mov	r1, r3
 80034ca:	4820      	ldr	r0, [pc, #128]	; (800354c <create_name+0x218>)
 80034cc:	f7ff f8ca 	bl	8002664 <chk_chr>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <create_name+0x1a6>
 80034d6:	2306      	movs	r3, #6
 80034d8:	e032      	b.n	8003540 <create_name+0x20c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80034da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034de:	2b60      	cmp	r3, #96	; 0x60
 80034e0:	d908      	bls.n	80034f4 <create_name+0x1c0>
 80034e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034e6:	2b7a      	cmp	r3, #122	; 0x7a
 80034e8:	d804      	bhi.n	80034f4 <create_name+0x1c0>
 80034ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ee:	3b20      	subs	r3, #32
 80034f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	61ba      	str	r2, [r7, #24]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4413      	add	r3, r2
 80034fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003502:	701a      	strb	r2, [r3, #0]
		}
	}
 8003504:	e769      	b.n	80033da <create_name+0xa6>
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003506:	bf00      	nop
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	441a      	add	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <create_name+0x1e8>
 8003518:	2306      	movs	r3, #6
 800351a:	e011      	b.n	8003540 <create_name+0x20c>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2be5      	cmp	r3, #229	; 0xe5
 8003522:	d102      	bne.n	800352a <create_name+0x1f6>
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2205      	movs	r2, #5
 8003528:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	330b      	adds	r3, #11
 800352e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003532:	2a20      	cmp	r2, #32
 8003534:	d801      	bhi.n	800353a <create_name+0x206>
 8003536:	2204      	movs	r2, #4
 8003538:	e000      	b.n	800353c <create_name+0x208>
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800353e:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8003540:	4618      	mov	r0, r3
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	08005810 	.word	0x08005810
 800354c:	0800576c 	.word	0x0800576c

08003550 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	613b      	str	r3, [r7, #16]


#if FF_FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b2f      	cmp	r3, #47	; 0x2f
 8003566:	d00b      	beq.n	8003580 <follow_path+0x30>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b5c      	cmp	r3, #92	; 0x5c
 800356e:	d007      	beq.n	8003580 <follow_path+0x30>
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	e00d      	b.n	8003596 <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	3301      	adds	r3, #1
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b2f      	cmp	r3, #47	; 0x2f
 8003586:	d0f8      	beq.n	800357a <follow_path+0x2a>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b5c      	cmp	r3, #92	; 0x5c
 800358e:	d0f4      	beq.n	800357a <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from root directory */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b1f      	cmp	r3, #31
 800359c:	d80a      	bhi.n	80035b4 <follow_path+0x64>
		dp->fn[NSFLAG] = NS_NONAME;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 80035a6:	2100      	movs	r1, #0
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fca3 	bl	8002ef4 <dir_sdi>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]
 80035b2:	e056      	b.n	8003662 <follow_path+0x112>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80035b4:	463b      	mov	r3, r7
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff febb 	bl	8003334 <create_name>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d147      	bne.n	8003658 <follow_path+0x108>
			res = dir_find(dp);				/* Find an object with the segment name */
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fe2b 	bl	8003224 <dir_find>
 80035ce:	4603      	mov	r3, r0
 80035d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80035d8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <follow_path+0xc8>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d13a      	bne.n	800365c <follow_path+0x10c>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <follow_path+0xb8>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02c      	beq.n	8003654 <follow_path+0x104>
						dp->fn[NSFLAG] = NS_NONAME;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
						res = FR_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8003606:	e029      	b.n	800365c <follow_path+0x10c>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d124      	bne.n	800365c <follow_path+0x10c>
 8003612:	2305      	movs	r3, #5
 8003614:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003616:	e021      	b.n	800365c <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11e      	bne.n	8003660 <follow_path+0x110>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	799b      	ldrb	r3, [r3, #6]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <follow_path+0xe4>
				res = FR_NO_PATH; break;
 800362e:	2305      	movs	r3, #5
 8003630:	75fb      	strb	r3, [r7, #23]
 8003632:	e016      	b.n	8003662 <follow_path+0x112>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	4413      	add	r3, r2
 8003644:	4619      	mov	r1, r3
 8003646:	6938      	ldr	r0, [r7, #16]
 8003648:	f7ff fdac 	bl	80031a4 <ld_clust>
 800364c:	4602      	mov	r2, r0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]
 8003652:	e7af      	b.n	80035b4 <follow_path+0x64>
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8003654:	bf00      	nop
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
			}
		}
 8003656:	e7ad      	b.n	80035b4 <follow_path+0x64>
		res = dir_sdi(dp, 0);

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
 8003658:	bf00      	nop
 800365a:	e002      	b.n	8003662 <follow_path+0x112>
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800365c:	bf00      	nop
 800365e:	e000      	b.n	8003662 <follow_path+0x112>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003660:	bf00      	nop
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
			}
		}
	}

	return res;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
 8003678:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <get_ldnumber+0x22>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	e02e      	b.n	80036ec <get_ldnumber+0x80>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	61fa      	str	r2, [r7, #28]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b20      	cmp	r3, #32
 800369c:	d902      	bls.n	80036a4 <get_ldnumber+0x38>
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b3a      	cmp	r3, #58	; 0x3a
 80036a2:	d1f4      	bne.n	800368e <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b3a      	cmp	r3, #58	; 0x3a
 80036a8:	d11c      	bne.n	80036e4 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80036aa:	2301      	movs	r3, #1
 80036ac:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b2f      	cmp	r3, #47	; 0x2f
 80036b4:	d90c      	bls.n	80036d0 <get_ldnumber+0x64>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b39      	cmp	r3, #57	; 0x39
 80036bc:	d808      	bhi.n	80036d0 <get_ldnumber+0x64>
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1c9a      	adds	r2, r3, #2
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d103      	bne.n	80036d0 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3b30      	subs	r3, #48	; 0x30
 80036ce:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	dc04      	bgt.n	80036e0 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	e003      	b.n	80036ec <get_ldnumber+0x80>
		}
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <get_ldnumber+0x8c>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 80036ea:	697b      	ldr	r3, [r7, #20]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3724      	adds	r7, #36	; 0x24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	2000002a 	.word	0x2000002a

080036fc <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invalidate window */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	70da      	strb	r2, [r3, #3]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f04f 32ff 	mov.w	r2, #4294967295
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff f820 	bl	800275c <move_window>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <check_fs+0x2a>
 8003722:	2304      	movs	r3, #4
 8003724:	e038      	b.n	8003798 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3334      	adds	r3, #52	; 0x34
 800372a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe feb0 	bl	8002494 <ld_word>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <check_fs+0x48>
 8003740:	2303      	movs	r3, #3
 8003742:	e029      	b.n	8003798 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800374a:	2be9      	cmp	r3, #233	; 0xe9
 800374c:	d009      	beq.n	8003762 <check_fs+0x66>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003754:	2beb      	cmp	r3, #235	; 0xeb
 8003756:	d004      	beq.n	8003762 <check_fs+0x66>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800375e:	2be8      	cmp	r3, #232	; 0xe8
 8003760:	d119      	bne.n	8003796 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3334      	adds	r3, #52	; 0x34
 8003766:	3336      	adds	r3, #54	; 0x36
 8003768:	2203      	movs	r2, #3
 800376a:	490d      	ldr	r1, [pc, #52]	; (80037a0 <check_fs+0xa4>)
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe ff51 	bl	8002614 <mem_cmp>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <check_fs+0x80>
 8003778:	2300      	movs	r3, #0
 800377a:	e00d      	b.n	8003798 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3334      	adds	r3, #52	; 0x34
 8003780:	3352      	adds	r3, #82	; 0x52
 8003782:	2205      	movs	r2, #5
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <check_fs+0xa8>)
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe ff44 	bl	8002614 <mem_cmp>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <check_fs+0x9a>
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8003796:	2302      	movs	r3, #2
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	0800577c 	.word	0x0800577c
 80037a4:	08005780 	.word	0x08005780

080037a8 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b096      	sub	sp, #88	; 0x58
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff ff55 	bl	800366c <get_ldnumber>
 80037c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80037c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	da01      	bge.n	80037ce <find_volume+0x26>
 80037ca:	230b      	movs	r3, #11
 80037cc:	e23b      	b.n	8003c46 <find_volume+0x49e>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80037ce:	4aa8      	ldr	r2, [pc, #672]	; (8003a70 <find_volume+0x2c8>)
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <find_volume+0x3a>
 80037de:	230c      	movs	r3, #12
 80037e0:	e231      	b.n	8003c46 <find_volume+0x49e>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80037f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01a      	beq.n	800382e <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 80037f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fa:	785b      	ldrb	r3, [r3, #1]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 f859 	bl	80048b4 <disk_status>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10c      	bne.n	800382e <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <find_volume+0x82>
 800381a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003826:	230a      	movs	r3, #10
 8003828:	e20d      	b.n	8003c46 <find_volume+0x49e>
			}
			return FR_OK;				/* The filesystem object is valid */
 800382a:	2300      	movs	r3, #0
 800382c:	e20b      	b.n	8003c46 <find_volume+0x49e>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003836:	b2da      	uxtb	r2, r3
 8003838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 800383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383e:	785b      	ldrb	r3, [r3, #1]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 ff5d 	bl	8004700 <disk_initialize>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800384c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003858:	2303      	movs	r3, #3
 800385a:	e1f4      	b.n	8003c46 <find_volume+0x49e>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <find_volume+0xca>
 8003862:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800386e:	230a      	movs	r3, #10
 8003870:	e1e9      	b.n	8003c46 <find_volume+0x49e>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003876:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003878:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800387a:	f7ff ff3f 	bl	80036fc <check_fs>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003888:	2b02      	cmp	r3, #2
 800388a:	d14b      	bne.n	8003924 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800388c:	2300      	movs	r3, #0
 800388e:	643b      	str	r3, [r7, #64]	; 0x40
 8003890:	e01f      	b.n	80038d2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80038a0:	4413      	add	r3, r2
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	3304      	adds	r3, #4
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <find_volume+0x114>
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	3308      	adds	r3, #8
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fe06 	bl	80024c4 <ld_dword>
 80038b8:	4602      	mov	r2, r0
 80038ba:	e000      	b.n	80038be <find_volume+0x116>
 80038bc:	2200      	movs	r2, #0
 80038be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80038c6:	440b      	add	r3, r1
 80038c8:	f843 2c44 	str.w	r2, [r3, #-68]

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80038cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ce:	3301      	adds	r3, #1
 80038d0:	643b      	str	r3, [r7, #64]	; 0x40
 80038d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d9dc      	bls.n	8003892 <find_volume+0xea>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80038d8:	2300      	movs	r3, #0
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 80038dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <find_volume+0x140>
 80038e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e4:	3b01      	subs	r3, #1
 80038e6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80038e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80038f0:	4413      	add	r3, r2
 80038f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80038f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80038f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <find_volume+0x162>
 80038fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003900:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003902:	f7ff fefb 	bl	80036fc <check_fs>
 8003906:	4603      	mov	r3, r0
 8003908:	e000      	b.n	800390c <find_volume+0x164>
 800390a:	2303      	movs	r3, #3
 800390c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003914:	2b01      	cmp	r3, #1
 8003916:	d905      	bls.n	8003924 <find_volume+0x17c>
 8003918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391a:	3301      	adds	r3, #1
 800391c:	643b      	str	r3, [r7, #64]	; 0x40
 800391e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003920:	2b03      	cmp	r3, #3
 8003922:	d9e1      	bls.n	80038e8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003924:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003928:	2b04      	cmp	r3, #4
 800392a:	d101      	bne.n	8003930 <find_volume+0x188>
 800392c:	2301      	movs	r3, #1
 800392e:	e18a      	b.n	8003c46 <find_volume+0x49e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003934:	2b01      	cmp	r3, #1
 8003936:	d901      	bls.n	800393c <find_volume+0x194>
 8003938:	230d      	movs	r3, #13
 800393a:	e184      	b.n	8003c46 <find_volume+0x49e>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	3334      	adds	r3, #52	; 0x34
 8003940:	330b      	adds	r3, #11
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe fda6 	bl	8002494 <ld_word>
 8003948:	4603      	mov	r3, r0
 800394a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394e:	d001      	beq.n	8003954 <find_volume+0x1ac>
 8003950:	230d      	movs	r3, #13
 8003952:	e178      	b.n	8003c46 <find_volume+0x49e>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	3334      	adds	r3, #52	; 0x34
 8003958:	3316      	adds	r3, #22
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fd9a 	bl	8002494 <ld_word>
 8003960:	4603      	mov	r3, r0
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <find_volume+0x1d0>
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	3334      	adds	r3, #52	; 0x34
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fda7 	bl	80024c4 <ld_dword>
 8003976:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800397c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003986:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	789b      	ldrb	r3, [r3, #2]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d005      	beq.n	800399c <find_volume+0x1f4>
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	789b      	ldrb	r3, [r3, #2]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d001      	beq.n	800399c <find_volume+0x1f4>
 8003998:	230d      	movs	r3, #13
 800399a:	e154      	b.n	8003c46 <find_volume+0x49e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	789b      	ldrb	r3, [r3, #2]
 80039a0:	461a      	mov	r2, r3
 80039a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a4:	fb02 f303 	mul.w	r3, r2, r3
 80039a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	895b      	ldrh	r3, [r3, #10]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <find_volume+0x228>
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	895b      	ldrh	r3, [r3, #10]
 80039c2:	461a      	mov	r2, r3
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	895b      	ldrh	r3, [r3, #10]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <find_volume+0x22c>
 80039d0:	230d      	movs	r3, #13
 80039d2:	e138      	b.n	8003c46 <find_volume+0x49e>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	3334      	adds	r3, #52	; 0x34
 80039d8:	3311      	adds	r3, #17
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fd5a 	bl	8002494 <ld_word>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	891b      	ldrh	r3, [r3, #8]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <find_volume+0x252>
 80039f6:	230d      	movs	r3, #13
 80039f8:	e125      	b.n	8003c46 <find_volume+0x49e>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	3334      	adds	r3, #52	; 0x34
 80039fe:	3313      	adds	r3, #19
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe fd47 	bl	8002494 <ld_word>
 8003a06:	4603      	mov	r3, r0
 8003a08:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <find_volume+0x276>
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	3334      	adds	r3, #52	; 0x34
 8003a14:	3320      	adds	r3, #32
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fd54 	bl	80024c4 <ld_dword>
 8003a1c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	3334      	adds	r3, #52	; 0x34
 8003a22:	330e      	adds	r3, #14
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fd35 	bl	8002494 <ld_word>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003a2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <find_volume+0x290>
 8003a34:	230d      	movs	r3, #13
 8003a36:	e106      	b.n	8003c46 <find_volume+0x49e>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003a38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3c:	4413      	add	r3, r2
 8003a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a40:	8912      	ldrh	r2, [r2, #8]
 8003a42:	0912      	lsrs	r2, r2, #4
 8003a44:	b292      	uxth	r2, r2
 8003a46:	4413      	add	r3, r2
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d201      	bcs.n	8003a56 <find_volume+0x2ae>
 8003a52:	230d      	movs	r3, #13
 8003a54:	e0f7      	b.n	8003c46 <find_volume+0x49e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a5e:	8952      	ldrh	r2, [r2, #10]
 8003a60:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <find_volume+0x2cc>
 8003a6c:	230d      	movs	r3, #13
 8003a6e:	e0ea      	b.n	8003c46 <find_volume+0x49e>
 8003a70:	20000024 	.word	0x20000024
		fmt = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	4a74      	ldr	r2, [pc, #464]	; (8003c50 <find_volume+0x4a8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d802      	bhi.n	8003a88 <find_volume+0x2e0>
 8003a82:	2303      	movs	r3, #3
 8003a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d802      	bhi.n	8003a98 <find_volume+0x2f0>
 8003a92:	2302      	movs	r3, #2
 8003a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d802      	bhi.n	8003aa8 <find_volume+0x300>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8003aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <find_volume+0x30c>
 8003ab0:	230d      	movs	r3, #13
 8003ab2:	e0c8      	b.n	8003c46 <find_volume+0x49e>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	1c9a      	adds	r2, r3, #2
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ac0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003ac2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac6:	441a      	add	r2, r3
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8003acc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	441a      	add	r2, r3
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8003ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d11e      	bne.n	8003b1c <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	3334      	adds	r3, #52	; 0x34
 8003ae2:	332a      	adds	r3, #42	; 0x2a
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fcd5 	bl	8002494 <ld_word>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <find_volume+0x34c>
 8003af0:	230d      	movs	r3, #13
 8003af2:	e0a8      	b.n	8003c46 <find_volume+0x49e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	891b      	ldrh	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <find_volume+0x358>
 8003afc:	230d      	movs	r3, #13
 8003afe:	e0a2      	b.n	8003c46 <find_volume+0x49e>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	3334      	adds	r3, #52	; 0x34
 8003b04:	332c      	adds	r3, #44	; 0x2c
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fcdc 	bl	80024c4 <ld_dword>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1a:	e01f      	b.n	8003b5c <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	891b      	ldrh	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <find_volume+0x380>
 8003b24:	230d      	movs	r3, #13
 8003b26:	e08e      	b.n	8003c46 <find_volume+0x49e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2e:	441a      	add	r2, r3
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d103      	bne.n	8003b44 <find_volume+0x39c>
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	e00a      	b.n	8003b5a <find_volume+0x3b2>
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	085a      	lsrs	r2, r3, #1
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	4413      	add	r3, r2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003b5a:	647b      	str	r3, [r7, #68]	; 0x44
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b62:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003b66:	0a5b      	lsrs	r3, r3, #9
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d201      	bcs.n	8003b70 <find_volume+0x3c8>
 8003b6c:	230d      	movs	r3, #13
 8003b6e:	e06a      	b.n	8003c46 <find_volume+0x49e>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b72:	f04f 32ff 	mov.w	r2, #4294967295
 8003b76:	611a      	str	r2, [r3, #16]
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8003b86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d149      	bne.n	8003c22 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	3334      	adds	r3, #52	; 0x34
 8003b92:	3330      	adds	r3, #48	; 0x30
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe fc7d 	bl	8002494 <ld_word>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d140      	bne.n	8003c22 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ba8:	f7fe fdd8 	bl	800275c <move_window>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d137      	bne.n	8003c22 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bba:	3334      	adds	r3, #52	; 0x34
 8003bbc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe fc67 	bl	8002494 <ld_word>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d127      	bne.n	8003c22 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd4:	3334      	adds	r3, #52	; 0x34
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe fc74 	bl	80024c4 <ld_dword>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <find_volume+0x4ac>)
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d11e      	bne.n	8003c22 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	3334      	adds	r3, #52	; 0x34
 8003be8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fc69 	bl	80024c4 <ld_dword>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <find_volume+0x4b0>)
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d113      	bne.n	8003c22 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	3334      	adds	r3, #52	; 0x34
 8003bfe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fc5e 	bl	80024c4 <ld_dword>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	3334      	adds	r3, #52	; 0x34
 8003c12:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fc54 	bl	80024c4 <ld_dword>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003c28:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <find_volume+0x4b4>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <find_volume+0x4b4>)
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <find_volume+0x4b4>)
 8003c38:	881a      	ldrh	r2, [r3, #0]
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3c:	80da      	strh	r2, [r3, #6]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	2200      	movs	r2, #0
 8003c42:	615a      	str	r2, [r3, #20]
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3758      	adds	r7, #88	; 0x58
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	0ffffff5 	.word	0x0ffffff5
 8003c54:	41615252 	.word	0x41615252
 8003c58:	61417272 	.word	0x61417272
 8003c5c:	20000028 	.word	0x20000028

08003c60 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003c6a:	2309      	movs	r3, #9
 8003c6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01c      	beq.n	8003cae <validate+0x4e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d018      	beq.n	8003cae <validate+0x4e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <validate+0x4e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	889a      	ldrh	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	88db      	ldrh	r3, [r3, #6]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d10c      	bne.n	8003cae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	785b      	ldrb	r3, [r3, #1]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fe0a 	bl	80048b4 <disk_status>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <validate+0x4e>
			res = FR_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <validate+0x5a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	e000      	b.n	8003cbc <validate+0x5c>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	6013      	str	r3, [r2, #0]
	return res;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop

08003ccc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003cde:	f107 0310 	add.w	r3, r7, #16
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fcc2 	bl	800366c <get_ldnumber>
 8003ce8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da01      	bge.n	8003cf4 <f_mount+0x28>
 8003cf0:	230b      	movs	r3, #11
 8003cf2:	e025      	b.n	8003d40 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <f_mount+0x7c>)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	490b      	ldr	r1, [pc, #44]	; (8003d48 <f_mount+0x7c>)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <f_mount+0x5e>
 8003d26:	2300      	movs	r3, #0
 8003d28:	e00a      	b.n	8003d40 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003d2a:	f107 010c 	add.w	r1, r7, #12
 8003d2e:	f107 0308 	add.w	r3, r7, #8
 8003d32:	2200      	movs	r2, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fd37 	bl	80037a8 <find_volume>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000024 	.word	0x20000024

08003d4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b098      	sub	sp, #96	; 0x60
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <f_open+0x18>
 8003d60:	2309      	movs	r3, #9
 8003d62:	e16e      	b.n	8004042 <f_open+0x2f6>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003d6c:	79fa      	ldrb	r2, [r7, #7]
 8003d6e:	f107 0114 	add.w	r1, r7, #20
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fd16 	bl	80037a8 <find_volume>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8003d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8152 	bne.w	8004030 <f_open+0x2e4>
		dj.obj.fs = fs;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	f107 0318 	add.w	r3, r7, #24
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fbd9 	bl	8003550 <follow_path>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8003da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003dac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003db0:	b25b      	sxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	da02      	bge.n	8003dbc <f_open+0x70>
				res = FR_INVALID_NAME;
 8003db6:	2306      	movs	r3, #6
 8003db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	f003 031c 	and.w	r3, r3, #28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d06f      	beq.n	8003ea6 <f_open+0x15a>
			if (res != FR_OK) {					/* No file, create new */
 8003dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d010      	beq.n	8003df0 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003dce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d107      	bne.n	8003de6 <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8003dd6:	f107 0318 	add.w	r3, r7, #24
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fa78 	bl	80032d0 <dir_register>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	f043 0308 	orr.w	r3, r3, #8
 8003dec:	71fb      	strb	r3, [r7, #7]
 8003dee:	e010      	b.n	8003e12 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003df0:	7fbb      	ldrb	r3, [r7, #30]
 8003df2:	f003 0311 	and.w	r3, r3, #17
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <f_open+0xb6>
					res = FR_DENIED;
 8003dfa:	2307      	movs	r3, #7
 8003dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003e00:	e007      	b.n	8003e12 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <f_open+0xc6>
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8003e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d15f      	bne.n	8003eda <f_open+0x18e>
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05a      	beq.n	8003eda <f_open+0x18e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f9ba 	bl	80031a4 <ld_clust>
 8003e30:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	330e      	adds	r3, #14
 8003e36:	4985      	ldr	r1, [pc, #532]	; (800404c <f_open+0x300>)
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fb83 	bl	8002544 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	330b      	adds	r3, #11
 8003e42:	2220      	movs	r2, #32
 8003e44:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff f9c9 	bl	80031e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	331c      	adds	r3, #28
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fb73 	bl	8002544 <st_dword>
					fs->wflag = 1;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2201      	movs	r2, #1
 8003e62:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8003e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d037      	beq.n	8003eda <f_open+0x18e>
						dw = fs->winsect;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8003e70:	f107 0318 	add.w	r3, r7, #24
 8003e74:	2200      	movs	r2, #0
 8003e76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe febb 	bl	8002bf4 <remove_chain>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8003e84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d126      	bne.n	8003eda <f_open+0x18e>
							res = move_window(fs, dw);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe fc63 	bl	800275c <move_window>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ea0:	3a01      	subs	r2, #1
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e019      	b.n	8003eda <f_open+0x18e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8003ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d115      	bne.n	8003eda <f_open+0x18e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8003eae:	7fbb      	ldrb	r3, [r7, #30]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <f_open+0x174>
					res = FR_NO_FILE;
 8003eb8:	2304      	movs	r3, #4
 8003eba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003ebe:	e00c      	b.n	8003eda <f_open+0x18e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <f_open+0x18e>
 8003eca:	7fbb      	ldrb	r3, [r7, #30]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <f_open+0x18e>
						res = FR_DENIED;
 8003ed4:	2307      	movs	r3, #7
 8003ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8003eda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10f      	bne.n	8003f02 <f_open+0x1b6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <f_open+0x1a8>
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8003efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8003f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 8092 	bne.w	8004030 <f_open+0x2e4>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f946 	bl	80031a4 <ld_clust>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f20:	331c      	adds	r3, #28
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe face 	bl	80024c4 <ld_dword>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	88da      	ldrh	r2, [r3, #6]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	79fa      	ldrb	r2, [r7, #7]
 8003f40:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3328      	adds	r3, #40	; 0x28
 8003f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe fb3e 	bl	80025e0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d060      	beq.n	8004030 <f_open+0x2e4>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d05c      	beq.n	8004030 <f_open+0x2e4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	895b      	ldrh	r3, [r3, #10]
 8003f82:	025b      	lsls	r3, r3, #9
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	657b      	str	r3, [r7, #84]	; 0x54
 8003f92:	e016      	b.n	8003fc2 <f_open+0x276>
					clst = get_fat(&fp->obj, clst);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe fc9b 	bl	80028d4 <get_fat>
 8003f9e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8003fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d802      	bhi.n	8003fac <f_open+0x260>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d102      	bne.n	8003fba <f_open+0x26e>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003fba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8003fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <f_open+0x286>
 8003fca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d8e0      	bhi.n	8003f94 <f_open+0x248>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fd6:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003fd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d127      	bne.n	8004030 <f_open+0x2e4>
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d022      	beq.n	8004030 <f_open+0x2e4>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fc50 	bl	8002894 <clst2sect>
 8003ff4:	6478      	str	r0, [r7, #68]	; 0x44
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d103      	bne.n	8004004 <f_open+0x2b8>
						res = FR_INT_ERR;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004002:	e015      	b.n	8004030 <f_open+0x2e4>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004006:	0a5a      	lsrs	r2, r3, #9
 8004008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400a:	441a      	add	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	7858      	ldrb	r0, [r3, #1]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	2301      	movs	r3, #1
 8004020:	f000 fc5e 	bl	80048e0 <disk_read>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <f_open+0x2e4>
 800402a:	2301      	movs	r3, #1
 800402c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <f_open+0x2f2>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800403e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004042:	4618      	mov	r0, r3
 8004044:	3760      	adds	r7, #96	; 0x60
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	4c210000 	.word	0x4c210000

08004050 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08c      	sub	sp, #48	; 0x30
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f107 0210 	add.w	r2, r7, #16
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fdf5 	bl	8003c60 <validate>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800407c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004080:	2b00      	cmp	r3, #0
 8004082:	d107      	bne.n	8004094 <f_write+0x44>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	7c5b      	ldrb	r3, [r3, #17]
 8004088:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800408c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <f_write+0x4a>
 8004094:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004098:	e13f      	b.n	800431a <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	7c1b      	ldrb	r3, [r3, #16]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <f_write+0x5a>
 80040a6:	2307      	movs	r3, #7
 80040a8:	e137      	b.n	800431a <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	441a      	add	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	f080 8121 	bcs.w	80042fe <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80040c4:	e11b      	b.n	80042fe <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 80d7 	bne.w	8004282 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	0a5b      	lsrs	r3, r3, #9
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	8952      	ldrh	r2, [r2, #10]
 80040de:	3a01      	subs	r2, #1
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d137      	bne.n	800415a <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10c      	bne.n	800410c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10e      	bne.n	800411c <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fddc 	bl	8002cc0 <create_chain>
 8004108:	62b8      	str	r0, [r7, #40]	; 0x28
 800410a:	e007      	b.n	800411c <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f7fe fdd3 	bl	8002cc0 <create_chain>
 800411a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80f2 	beq.w	8004308 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b01      	cmp	r3, #1
 8004128:	d104      	bne.n	8004134 <f_write+0xe4>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2202      	movs	r2, #2
 800412e:	745a      	strb	r2, [r3, #17]
 8004130:	2302      	movs	r3, #2
 8004132:	e0f2      	b.n	800431a <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d104      	bne.n	8004146 <f_write+0xf6>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	745a      	strb	r2, [r3, #17]
 8004142:	2301      	movs	r3, #1
 8004144:	e0e9      	b.n	800431a <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800414a:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <f_write+0x10a>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004158:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	7c1b      	ldrb	r3, [r3, #16]
 800415e:	b25b      	sxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	da18      	bge.n	8004196 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	7858      	ldrb	r0, [r3, #1]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	2301      	movs	r3, #1
 8004174:	f000 fc1a 	bl	80049ac <disk_write>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <f_write+0x138>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	745a      	strb	r2, [r3, #17]
 8004184:	2301      	movs	r3, #1
 8004186:	e0c8      	b.n	800431a <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	7c1b      	ldrb	r3, [r3, #16]
 800418c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f7fe fb78 	bl	8002894 <clst2sect>
 80041a4:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d104      	bne.n	80041b6 <f_write+0x166>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2202      	movs	r2, #2
 80041b0:	745a      	strb	r2, [r3, #17]
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0b1      	b.n	800431a <f_write+0x2ca>
			sect += csect;
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0a5b      	lsrs	r3, r3, #9
 80041c2:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d03c      	beq.n	8004244 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	4413      	add	r3, r2
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	8952      	ldrh	r2, [r2, #10]
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d905      	bls.n	80041e4 <f_write+0x194>
					cc = fs->csize - csect;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	895b      	ldrh	r3, [r3, #10]
 80041dc:	461a      	mov	r2, r3
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	7858      	ldrb	r0, [r3, #1]
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	69f9      	ldr	r1, [r7, #28]
 80041ee:	f000 fbdd 	bl	80049ac <disk_write>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <f_write+0x1b2>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	745a      	strb	r2, [r3, #17]
 80041fe:	2301      	movs	r3, #1
 8004200:	e08b      	b.n	800431a <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad2      	subs	r2, r2, r3
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	429a      	cmp	r2, r3
 800420e:	d215      	bcs.n	800423c <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	025b      	lsls	r3, r3, #9
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004228:	4619      	mov	r1, r3
 800422a:	f7fe f9b7 	bl	800259c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	7c1b      	ldrb	r3, [r3, #16]
 8004232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004236:	b2da      	uxtb	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	025b      	lsls	r3, r3, #9
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004242:	e03f      	b.n	80042c4 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	429a      	cmp	r2, r3
 800424c:	d016      	beq.n	800427c <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004256:	429a      	cmp	r2, r3
 8004258:	d210      	bcs.n	800427c <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	7858      	ldrb	r0, [r3, #1]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004264:	2301      	movs	r3, #1
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	f000 fb3a 	bl	80048e0 <disk_read>
 800426c:	4603      	mov	r3, r0
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	745a      	strb	r2, [r3, #17]
 8004278:	2301      	movs	r3, #1
 800427a:	e04e      	b.n	800431a <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d901      	bls.n	800429c <f_write+0x24c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	4413      	add	r3, r2
 80042ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ae:	69f9      	ldr	r1, [r7, #28]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe f973 	bl	800259c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	7c1b      	ldrb	r3, [r3, #16]
 80042ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	741a      	strb	r2, [r3, #16]
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	441a      	add	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	4413      	add	r3, r2
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	441a      	add	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	615a      	str	r2, [r3, #20]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	bf38      	it	cc
 80042f8:	461a      	movcc	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	60da      	str	r2, [r3, #12]
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f aee0 	bne.w	80040c6 <f_write+0x76>
 8004306:	e000      	b.n	800430a <f_write+0x2ba>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004308:	bf00      	nop
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	7c1b      	ldrb	r3, [r3, #16]
 800430e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004312:	b2da      	uxtb	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3730      	adds	r7, #48	; 0x30
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop

08004324 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f107 0208 	add.w	r2, r7, #8
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fc93 	bl	8003c60 <validate>
 800433a:	4603      	mov	r3, r0
 800433c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d167      	bne.n	8004414 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	7c1b      	ldrb	r3, [r3, #16]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d061      	beq.n	8004414 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7c1b      	ldrb	r3, [r3, #16]
 8004354:	b25b      	sxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	da15      	bge.n	8004386 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	7858      	ldrb	r0, [r3, #1]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	2301      	movs	r3, #1
 800436a:	f000 fb1f 	bl	80049ac <disk_write>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <f_sync+0x54>
 8004374:	2301      	movs	r3, #1
 8004376:	e04e      	b.n	8004416 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7c1b      	ldrb	r3, [r3, #16]
 800437c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004380:	b2da      	uxtb	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004386:	4b26      	ldr	r3, [pc, #152]	; (8004420 <f_sync+0xfc>)
 8004388:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f7fe f9e2 	bl	800275c <move_window>
 8004398:	4603      	mov	r3, r0
 800439a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d138      	bne.n	8004414 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	330b      	adds	r3, #11
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	320b      	adds	r2, #11
 80043b0:	7812      	ldrb	r2, [r2, #0]
 80043b2:	f042 0220 	orr.w	r2, r2, #32
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	461a      	mov	r2, r3
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	f7fe ff0d 	bl	80031e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f103 021c 	add.w	r2, r3, #28
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f7fe f8b4 	bl	8002544 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3316      	adds	r3, #22
 80043e0:	6939      	ldr	r1, [r7, #16]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe f8ae 	bl	8002544 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3312      	adds	r3, #18
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe f88c 	bl	800250c <st_word>
					fs->wflag = 1;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2201      	movs	r2, #1
 80043f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe f9db 	bl	80027b8 <sync_fs>
 8004402:	4603      	mov	r3, r0
 8004404:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7c1b      	ldrb	r3, [r3, #16]
 800440a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440e:	b2da      	uxtb	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004414:	7dfb      	ldrb	r3, [r7, #23]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	4c210000 	.word	0x4c210000

08004424 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff79 	bl	8004324 <f_sync>
 8004432:	4603      	mov	r3, r0
 8004434:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10e      	bne.n	800445a <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f107 0208 	add.w	r2, r7, #8
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fc0b 	bl	8003c60 <validate>
 800444a:	4603      	mov	r3, r0
 800444c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <init_spi>:
/*-----------------------------------------------------------------------*/
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Initialize MMC interface */
static void init_spi (void){
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
	SDCard_HWInit();
 8004468:	f000 fe4a 	bl	8005100 <SDCard_HWInit>
	SDCard_ChipDeselect();
 800446c:	f000 fe78 	bl	8005160 <SDCard_ChipDeselect>
	delay_ms(10);
 8004470:	200a      	movs	r0, #10
 8004472:	f000 fe19 	bl	80050a8 <delay_ms>
}
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop

0800447c <xchg_spi>:

/* Exchange a byte */
static BYTE xchg_spi (
	BYTE dat	/* Data to send */
){
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
	return MySPI3_SendByte(dat);
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fd87 	bl	8004f9c <MySPI3_SendByte>
 800448e:	4603      	mov	r3, r0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <rcvr_spi_multi>:

/* Receive multiple byte */		////NELO: A 0xFF must be sent when reading data (MOSI = HIGH)!!
static void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
){
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
	MySPI3_ReadBytes(buff, btr);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fd59 	bl	8004f60 <MySPI3_ReadBytes>
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop

080044b8 <xmit_spi_multi>:

/* Send multiple byte */
static void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
){
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
	MySPI3_SendBytes(buff, btx);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fd87 	bl	8004fdc <MySPI3_SendBytes>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop

080044d8 <wait_ready>:
/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
){
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	BYTE d;
	Timer2 = 10000;		////NELO: Random ~ value, no use of interrupt timer
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <wait_ready+0x44>)
 80044e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80044e6:	601a      	str	r2, [r3, #0]
	do {
		d = xchg_spi(0xFF);
 80044e8:	20ff      	movs	r0, #255	; 0xff
 80044ea:	f7ff ffc7 	bl	800447c <xchg_spi>
 80044ee:	4603      	mov	r3, r0
 80044f0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && Timer2--);	/* Wait for card goes ready or timeout */
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	2bff      	cmp	r3, #255	; 0xff
 80044f6:	d006      	beq.n	8004506 <wait_ready+0x2e>
 80044f8:	4b08      	ldr	r3, [pc, #32]	; (800451c <wait_ready+0x44>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1e5a      	subs	r2, r3, #1
 80044fe:	4907      	ldr	r1, [pc, #28]	; (800451c <wait_ready+0x44>)
 8004500:	600a      	str	r2, [r1, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <wait_ready+0x10>
	return (d == 0xFF) ? 1 : 0;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2bff      	cmp	r3, #255	; 0xff
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000030 	.word	0x20000030

08004520 <deselect>:

/*-----------------------------------------------------------------------*/
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/
static void deselect (void){
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
	SDCard_ChipDeselect();		/* Set CS# high */
 8004524:	f000 fe1c 	bl	8005160 <SDCard_ChipDeselect>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004528:	20ff      	movs	r0, #255	; 0xff
 800452a:	f7ff ffa7 	bl	800447c <xchg_spi>
}
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop

08004534 <select>:

/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/
static int select (void)	/* 1:OK, 0:Timeout */
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
	SDCard_ChipSelect();		/* Set CS# high */
 8004538:	f000 fe08 	bl	800514c <SDCard_ChipSelect>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800453c:	20ff      	movs	r0, #255	; 0xff
 800453e:	f7ff ff9d 	bl	800447c <xchg_spi>
	if (wait_ready(500)){
 8004542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004546:	f7ff ffc7 	bl	80044d8 <wait_ready>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <select+0x20>
		return 1;	/* Wait for card ready */
 8004550:	2301      	movs	r3, #1
 8004552:	e002      	b.n	800455a <select+0x26>
	}
	deselect();
 8004554:	f7ff ffe4 	bl	8004520 <deselect>
	return 0;	/* Timeout */
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop

08004560 <rcvr_datablock>:
/* Receive a data packet from the MMC                                    */
/*-----------------------------------------------------------------------*/
static int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
){
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
	BYTE token;
	Timer1 = 20000;		////NELO: Random ~ value, no use of interrupt timer
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <rcvr_datablock+0x58>)
 800456c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004570:	601a      	str	r2, [r3, #0]
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004572:	20ff      	movs	r0, #255	; 0xff
 8004574:	f7ff ff82 	bl	800447c <xchg_spi>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1--);
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2bff      	cmp	r3, #255	; 0xff
 8004580:	d106      	bne.n	8004590 <rcvr_datablock+0x30>
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <rcvr_datablock+0x58>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	1e5a      	subs	r2, r3, #1
 8004588:	490b      	ldr	r1, [pc, #44]	; (80045b8 <rcvr_datablock+0x58>)
 800458a:	600a      	str	r2, [r1, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <rcvr_datablock+0x12>
	if(token != 0xFE){
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2bfe      	cmp	r3, #254	; 0xfe
 8004594:	d001      	beq.n	800459a <rcvr_datablock+0x3a>
		return 0;		/* Function fails if invalid DataStart token or timeout */
 8004596:	2300      	movs	r3, #0
 8004598:	e00a      	b.n	80045b0 <rcvr_datablock+0x50>
	}
	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800459a:	6839      	ldr	r1, [r7, #0]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ff7b 	bl	8004498 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80045a2:	20ff      	movs	r0, #255	; 0xff
 80045a4:	f7ff ff6a 	bl	800447c <xchg_spi>
 80045a8:	20ff      	movs	r0, #255	; 0xff
 80045aa:	f7ff ff67 	bl	800447c <xchg_spi>
	return 1;						/* Function succeeded */
 80045ae:	2301      	movs	r3, #1
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	2000002c 	.word	0x2000002c

080045bc <xmit_datablock>:
/* Send a data packet to the MMC                                         */
/*-----------------------------------------------------------------------*/
static int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
){
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	70fb      	strb	r3, [r7, #3]
	BYTE resp;
	if (!wait_ready(500)){
 80045c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045cc:	f7ff ff84 	bl	80044d8 <wait_ready>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <xmit_datablock+0x1e>
		return 0;		/* Wait for card ready */
 80045d6:	2300      	movs	r3, #0
 80045d8:	e01e      	b.n	8004618 <xmit_datablock+0x5c>
	}
	xchg_spi(token);					/* Send token */
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff4d 	bl	800447c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	2bfd      	cmp	r3, #253	; 0xfd
 80045e6:	d016      	beq.n	8004616 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80045e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff ff63 	bl	80044b8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80045f2:	20ff      	movs	r0, #255	; 0xff
 80045f4:	f7ff ff42 	bl	800447c <xchg_spi>
 80045f8:	20ff      	movs	r0, #255	; 0xff
 80045fa:	f7ff ff3f 	bl	800447c <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 80045fe:	20ff      	movs	r0, #255	; 0xff
 8004600:	f7ff ff3c 	bl	800447c <xchg_spi>
 8004604:	4603      	mov	r3, r0
 8004606:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05){
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2b05      	cmp	r3, #5
 8004610:	d001      	beq.n	8004616 <xmit_datablock+0x5a>
			return 0;	/* Function fails if the data packet was not accepted */
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <xmit_datablock+0x5c>
		}
	}
	return 1;
 8004616:	2301      	movs	r3, #1
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <send_cmd>:
/* Send a command packet to the MMC                                      */
/*-----------------------------------------------------------------------*/
static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
){
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800462c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004630:	2b00      	cmp	r3, #0
 8004632:	da0e      	bge.n	8004652 <send_cmd+0x32>
		cmd &= 0x7F;
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800463a:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800463c:	2100      	movs	r1, #0
 800463e:	2037      	movs	r0, #55	; 0x37
 8004640:	f7ff ffee 	bl	8004620 <send_cmd>
 8004644:	4603      	mov	r3, r0
 8004646:	73bb      	strb	r3, [r7, #14]
		if (res > 1){
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d901      	bls.n	8004652 <send_cmd+0x32>
			return res;
 800464e:	7bbb      	ldrb	r3, [r7, #14]
 8004650:	e051      	b.n	80046f6 <send_cmd+0xd6>
		}
	}
	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	2b0c      	cmp	r3, #12
 8004656:	d008      	beq.n	800466a <send_cmd+0x4a>
		deselect();
 8004658:	f7ff ff62 	bl	8004520 <deselect>
		if (!select()) return 0xFF;
 800465c:	f7ff ff6a 	bl	8004534 <select>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <send_cmd+0x4a>
 8004666:	23ff      	movs	r3, #255	; 0xff
 8004668:	e045      	b.n	80046f6 <send_cmd+0xd6>
	}
	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff ff02 	bl	800447c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	0e1b      	lsrs	r3, r3, #24
 800467c:	b2db      	uxtb	r3, r3
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fefc 	bl	800447c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	0c1b      	lsrs	r3, r3, #16
 8004688:	b2db      	uxtb	r3, r3
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fef6 	bl	800447c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	b2db      	uxtb	r3, r3
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fef0 	bl	800447c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff feeb 	bl	800447c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <send_cmd+0x94>
 80046b0:	2395      	movs	r3, #149	; 0x95
 80046b2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d101      	bne.n	80046be <send_cmd+0x9e>
 80046ba:	2387      	movs	r3, #135	; 0x87
 80046bc:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fedb 	bl	800447c <xchg_spi>
	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d102      	bne.n	80046d2 <send_cmd+0xb2>
 80046cc:	20ff      	movs	r0, #255	; 0xff
 80046ce:	f7ff fed5 	bl	800447c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80046d2:	230a      	movs	r3, #10
 80046d4:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80046d6:	20ff      	movs	r0, #255	; 0xff
 80046d8:	f7ff fed0 	bl	800447c <xchg_spi>
 80046dc:	4603      	mov	r3, r0
 80046de:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80046e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	da05      	bge.n	80046f4 <send_cmd+0xd4>
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <send_cmd+0xb6>
	return res;							/* Return received response */
 80046f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop

08004700 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
){
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];
	if (drv){
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <disk_initialize+0x14>
		return STA_NOINIT;			/* Supports only drive 0 */
 8004710:	2301      	movs	r3, #1
 8004712:	e0c4      	b.n	800489e <disk_initialize+0x19e>
	}
	init_spi();							/* Initialize SPI */
 8004714:	f7ff fea6 	bl	8004464 <init_spi>
	if (Stat & STA_NODISK){
 8004718:	4b63      	ldr	r3, [pc, #396]	; (80048a8 <disk_initialize+0x1a8>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <disk_initialize+0x2e>
		return Stat;	/* Is card existing in the soket? */
 8004726:	4b60      	ldr	r3, [pc, #384]	; (80048a8 <disk_initialize+0x1a8>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e0b7      	b.n	800489e <disk_initialize+0x19e>
	}
	MySPI3_Init_Slow();
 800472e:	f000 fb29 	bl	8004d84 <MySPI3_Init_Slow>
	for (n = 10; n; n--){
 8004732:	230a      	movs	r3, #10
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e005      	b.n	8004744 <disk_initialize+0x44>
		xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004738:	20ff      	movs	r0, #255	; 0xff
 800473a:	f7ff fe9f 	bl	800447c <xchg_spi>
	init_spi();							/* Initialize SPI */
	if (Stat & STA_NODISK){
		return Stat;	/* Is card existing in the soket? */
	}
	MySPI3_Init_Slow();
	for (n = 10; n; n--){
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	3b01      	subs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f6      	bne.n	8004738 <disk_initialize+0x38>
		xchg_spi(0xFF);	/* Send 80 dummy clocks */
	}
	ty = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800474e:	2100      	movs	r1, #0
 8004750:	2000      	movs	r0, #0
 8004752:	f7ff ff65 	bl	8004620 <send_cmd>
 8004756:	4603      	mov	r3, r0
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 8087 	bne.w	800486c <disk_initialize+0x16c>
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
 800475e:	4b53      	ldr	r3, [pc, #332]	; (80048ac <disk_initialize+0x1ac>)
 8004760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004764:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004766:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800476a:	2008      	movs	r0, #8
 800476c:	f7ff ff58 	bl	8004620 <send_cmd>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d14f      	bne.n	8004816 <disk_initialize+0x116>
			for (n = 0; n < 4; n++){
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e00d      	b.n	8004798 <disk_initialize+0x98>
				ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800477c:	7bfc      	ldrb	r4, [r7, #15]
 800477e:	20ff      	movs	r0, #255	; 0xff
 8004780:	f7ff fe7c 	bl	800447c <xchg_spi>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	f107 0310 	add.w	r3, r7, #16
 800478c:	4423      	add	r3, r4
 800478e:	f803 2c08 	strb.w	r2, [r3, #-8]
	}
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++){
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	3301      	adds	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d9ee      	bls.n	800477c <disk_initialize+0x7c>
				ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
			}
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800479e:	7abb      	ldrb	r3, [r7, #10]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d163      	bne.n	800486c <disk_initialize+0x16c>
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	2baa      	cmp	r3, #170	; 0xaa
 80047a8:	d160      	bne.n	800486c <disk_initialize+0x16c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80047aa:	bf00      	nop
 80047ac:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <disk_initialize+0x1ac>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <disk_initialize+0xc4>
 80047b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80047b8:	20a9      	movs	r0, #169	; 0xa9
 80047ba:	f7ff ff31 	bl	8004620 <send_cmd>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f3      	bne.n	80047ac <disk_initialize+0xac>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80047c4:	4b39      	ldr	r3, [pc, #228]	; (80048ac <disk_initialize+0x1ac>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d04f      	beq.n	800486c <disk_initialize+0x16c>
 80047cc:	2100      	movs	r1, #0
 80047ce:	203a      	movs	r0, #58	; 0x3a
 80047d0:	f7ff ff26 	bl	8004620 <send_cmd>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d148      	bne.n	800486c <disk_initialize+0x16c>
					for (n = 0; n < 4; n++){
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e00d      	b.n	80047fc <disk_initialize+0xfc>
						ocr[n] = xchg_spi(0xFF);
 80047e0:	7bfc      	ldrb	r4, [r7, #15]
 80047e2:	20ff      	movs	r0, #255	; 0xff
 80047e4:	f7ff fe4a 	bl	800447c <xchg_spi>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	f107 0310 	add.w	r3, r7, #16
 80047f0:	4423      	add	r3, r4
 80047f2:	f803 2c08 	strb.w	r2, [r3, #-8]
				ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
			}
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++){
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	3301      	adds	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d9ee      	bls.n	80047e0 <disk_initialize+0xe0>
						ocr[n] = xchg_spi(0xFF);
					}
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004802:	7a3b      	ldrb	r3, [r7, #8]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <disk_initialize+0x110>
 800480c:	230c      	movs	r3, #12
 800480e:	e000      	b.n	8004812 <disk_initialize+0x112>
 8004810:	2304      	movs	r3, #4
 8004812:	737b      	strb	r3, [r7, #13]
 8004814:	e02a      	b.n	800486c <disk_initialize+0x16c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004816:	2100      	movs	r1, #0
 8004818:	20a9      	movs	r0, #169	; 0xa9
 800481a:	f7ff ff01 	bl	8004620 <send_cmd>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d804      	bhi.n	800482e <disk_initialize+0x12e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004824:	2302      	movs	r3, #2
 8004826:	737b      	strb	r3, [r7, #13]
 8004828:	23a9      	movs	r3, #169	; 0xa9
 800482a:	73bb      	strb	r3, [r7, #14]
 800482c:	e003      	b.n	8004836 <disk_initialize+0x136>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800482e:	2301      	movs	r3, #1
 8004830:	737b      	strb	r3, [r7, #13]
 8004832:	2301      	movs	r3, #1
 8004834:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004836:	bf00      	nop
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <disk_initialize+0x1ac>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <disk_initialize+0x150>
 8004840:	7bbb      	ldrb	r3, [r7, #14]
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff feeb 	bl	8004620 <send_cmd>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f3      	bne.n	8004838 <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004850:	4b16      	ldr	r3, [pc, #88]	; (80048ac <disk_initialize+0x1ac>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <disk_initialize+0x168>
 8004858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800485c:	2010      	movs	r0, #16
 800485e:	f7ff fedf 	bl	8004620 <send_cmd>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <disk_initialize+0x16c>
				ty = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800486c:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <disk_initialize+0x1b0>)
 800486e:	7b7b      	ldrb	r3, [r7, #13]
 8004870:	7013      	strb	r3, [r2, #0]
	deselect();
 8004872:	f7ff fe55 	bl	8004520 <deselect>
	if (ty) {			/* OK */
 8004876:	7b7b      	ldrb	r3, [r7, #13]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <disk_initialize+0x192>
		MySPI3_Init_Fast();			/* Set fast clock */
 800487c:	f000 faea 	bl	8004e54 <MySPI3_Init_Fast>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <disk_initialize+0x1a8>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <disk_initialize+0x1a8>)
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	e002      	b.n	8004898 <disk_initialize+0x198>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <disk_initialize+0x1a8>)
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]
	}
	return Stat;
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <disk_initialize+0x1a8>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	b2db      	uxtb	r3, r3
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd90      	pop	{r4, r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000000 	.word	0x20000000
 80048ac:	2000002c 	.word	0x2000002c
 80048b0:	20000034 	.word	0x20000034

080048b4 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
){
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	71fb      	strb	r3, [r7, #7]
	if (drv){
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <disk_status+0x14>
		return STA_NOINIT;		/* Supports only drive 0 */
 80048c4:	2301      	movs	r3, #1
 80048c6:	e002      	b.n	80048ce <disk_status+0x1a>
	}
	return Stat;	/* Return disk status */
 80048c8:	4b04      	ldr	r3, [pc, #16]	; (80048dc <disk_status+0x28>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b2db      	uxtb	r3, r3
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000000 	.word	0x20000000

080048e0 <disk_read>:
DRESULT disk_read (
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count){
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <disk_read+0x1c>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <disk_read+0x20>
		return RES_PARERR;		/* Check parameter */
 80048fc:	2304      	movs	r3, #4
 80048fe:	e04d      	b.n	800499c <disk_read+0xbc>
	}
	if (Stat & STA_NOINIT){
 8004900:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <disk_read+0xc4>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <disk_read+0x32>
		return RES_NOTRDY;	/* Check if drive is ready */
 800490e:	2303      	movs	r3, #3
 8004910:	e044      	b.n	800499c <disk_read+0xbc>
	}
	if (!(CardType & CT_BLOCK)){
 8004912:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <disk_read+0xc8>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <disk_read+0x44>
		sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	025b      	lsls	r3, r3, #9
 8004922:	607b      	str	r3, [r7, #4]
	}
	if (count == 1) {	/* Single sector read */
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d111      	bne.n	800494e <disk_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	2011      	movs	r0, #17
 800492e:	f7ff fe77 	bl	8004620 <send_cmd>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d129      	bne.n	800498c <disk_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800493c:	68b8      	ldr	r0, [r7, #8]
 800493e:	f7ff fe0f 	bl	8004560 <rcvr_datablock>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d021      	beq.n	800498c <disk_read+0xac>
			count = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	e01e      	b.n	800498c <disk_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	2012      	movs	r0, #18
 8004952:	f7ff fe65 	bl	8004620 <send_cmd>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d117      	bne.n	800498c <disk_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)){
 800495c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004960:	68b8      	ldr	r0, [r7, #8]
 8004962:	f7ff fdfd 	bl	8004560 <rcvr_datablock>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <disk_read+0xa2>
					break;
				}
				buff += 512;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004972:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	3b01      	subs	r3, #1
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ed      	bne.n	800495c <disk_read+0x7c>
 8004980:	e000      	b.n	8004984 <disk_read+0xa4>
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)){
					break;
 8004982:	bf00      	nop
				}
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004984:	2100      	movs	r1, #0
 8004986:	200c      	movs	r0, #12
 8004988:	f7ff fe4a 	bl	8004620 <send_cmd>
		}
	}
	deselect();
 800498c:	f7ff fdc8 	bl	8004520 <deselect>
	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf14      	ite	ne
 8004996:	2301      	movne	r3, #1
 8004998:	2300      	moveq	r3, #0
 800499a:	b2db      	uxtb	r3, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000000 	.word	0x20000000
 80049a8:	20000034 	.word	0x20000034

080049ac <disk_write>:
DRESULT disk_write (
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Pointer to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
){
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4603      	mov	r3, r0
 80049ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count){
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <disk_write+0x1c>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <disk_write+0x20>
		return RES_PARERR;		/* Check parameter */
 80049c8:	2304      	movs	r3, #4
 80049ca:	e063      	b.n	8004a94 <disk_write+0xe8>
	}
	if (Stat & STA_NOINIT){
 80049cc:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <disk_write+0xf0>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <disk_write+0x32>
		return RES_NOTRDY;	/* Check drive status */
 80049da:	2303      	movs	r3, #3
 80049dc:	e05a      	b.n	8004a94 <disk_write+0xe8>
	}
	if (Stat & STA_PROTECT){
 80049de:	4b2f      	ldr	r3, [pc, #188]	; (8004a9c <disk_write+0xf0>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <disk_write+0x44>
		return RES_WRPRT;	/* Check write protect */
 80049ec:	2302      	movs	r3, #2
 80049ee:	e051      	b.n	8004a94 <disk_write+0xe8>
	}
	if (!(CardType & CT_BLOCK)){
 80049f0:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <disk_write+0xf4>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d102      	bne.n	8004a02 <disk_write+0x56>
		sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	025b      	lsls	r3, r3, #9
 8004a00:	607b      	str	r3, [r7, #4]
	}
	if (count == 1) {	/* Single sector write */
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d110      	bne.n	8004a2a <disk_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	2018      	movs	r0, #24
 8004a0c:	f7ff fe08 	bl	8004620 <send_cmd>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d136      	bne.n	8004a84 <disk_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004a16:	21fe      	movs	r1, #254	; 0xfe
 8004a18:	68b8      	ldr	r0, [r7, #8]
 8004a1a:	f7ff fdcf 	bl	80045bc <xmit_datablock>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d02f      	beq.n	8004a84 <disk_write+0xd8>
			count = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	e02c      	b.n	8004a84 <disk_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC){
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <disk_write+0xf4>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	f003 0306 	and.w	r3, r3, #6
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <disk_write+0x92>
			send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	2097      	movs	r0, #151	; 0x97
 8004a3a:	f7ff fdf1 	bl	8004620 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	2019      	movs	r0, #25
 8004a42:	f7ff fded 	bl	8004620 <send_cmd>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d11b      	bne.n	8004a84 <disk_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)){
 8004a4c:	21fc      	movs	r1, #252	; 0xfc
 8004a4e:	68b8      	ldr	r0, [r7, #8]
 8004a50:	f7ff fdb4 	bl	80045bc <xmit_datablock>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <disk_write+0xc4>
					break;
				}
				buff += 512;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a60:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ee      	bne.n	8004a4c <disk_write+0xa0>
 8004a6e:	e000      	b.n	8004a72 <disk_write+0xc6>
			send_cmd(ACMD23, count);	/* Predefine number of sectors */
		}
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)){
					break;
 8004a70:	bf00      	nop
				}
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)){
 8004a72:	21fd      	movs	r1, #253	; 0xfd
 8004a74:	2000      	movs	r0, #0
 8004a76:	f7ff fda1 	bl	80045bc <xmit_datablock>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <disk_write+0xd8>
				count = 1;	/* STOP_TRAN token */
 8004a80:	2301      	movs	r3, #1
 8004a82:	603b      	str	r3, [r7, #0]
			}
		}
	}
	deselect();
 8004a84:	f7ff fd4c 	bl	8004520 <deselect>
	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bf14      	ite	ne
 8004a8e:	2301      	movne	r3, #1
 8004a90:	2300      	moveq	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000000 	.word	0x20000000
 8004aa0:	20000034 	.word	0x20000034

08004aa4 <disk_ioctl>:
#if _USE_IOCTL
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
){
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	; 0x30
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	603a      	str	r2, [r7, #0]
 8004aae:	71fb      	strb	r3, [r7, #7]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;
	if (drv){
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <disk_ioctl+0x1a>
		return RES_PARERR;					/* Check parameter */
 8004aba:	2304      	movs	r3, #4
 8004abc:	e159      	b.n	8004d72 <disk_ioctl+0x2ce>
	}
	if (Stat & STA_NOINIT){
 8004abe:	4baf      	ldr	r3, [pc, #700]	; (8004d7c <disk_ioctl+0x2d8>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <disk_ioctl+0x2c>
		return RES_NOTRDY;	/* Check if drive is ready */
 8004acc:	2303      	movs	r3, #3
 8004ace:	e150      	b.n	8004d72 <disk_ioctl+0x2ce>
	}
	res = RES_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	switch (cmd) {
 8004ad6:	79bb      	ldrb	r3, [r7, #6]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	f200 8135 	bhi.w	8004d48 <disk_ioctl+0x2a4>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <disk_ioctl+0x40>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004af9 	.word	0x08004af9
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004d49 	.word	0x08004d49
 8004af0:	08004bb9 	.word	0x08004bb9
 8004af4:	08004cad 	.word	0x08004cad
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (select()){
 8004af8:	f7ff fd1c 	bl	8004534 <select>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 8126 	beq.w	8004d50 <disk_ioctl+0x2ac>
			res = RES_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004b0a:	e121      	b.n	8004d50 <disk_ioctl+0x2ac>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	2009      	movs	r0, #9
 8004b10:	f7ff fd86 	bl	8004620 <send_cmd>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 811c 	bne.w	8004d54 <disk_ioctl+0x2b0>
 8004b1c:	f107 030c 	add.w	r3, r7, #12
 8004b20:	2110      	movs	r1, #16
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fd1c 	bl	8004560 <rcvr_datablock>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8112 	beq.w	8004d54 <disk_ioctl+0x2b0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004b30:	7b3b      	ldrb	r3, [r7, #12]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d111      	bne.n	8004b5e <disk_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004b3a:	7d7b      	ldrb	r3, [r7, #21]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	7d3b      	ldrb	r3, [r7, #20]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	4413      	add	r3, r2
 8004b44:	461a      	mov	r2, r3
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004b4e:	4413      	add	r3, r2
 8004b50:	3301      	adds	r3, #1
 8004b52:	623b      	str	r3, [r7, #32]
				*(DWORD*)buff = csize << 10;
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	029a      	lsls	r2, r3, #10
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e028      	b.n	8004bb0 <disk_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004b5e:	7c7b      	ldrb	r3, [r7, #17]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	7dbb      	ldrb	r3, [r7, #22]
 8004b68:	09db      	lsrs	r3, r3, #7
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	7d7b      	ldrb	r3, [r7, #21]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 0306 	and.w	r3, r3, #6
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	3302      	adds	r3, #2
 8004b82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004b86:	7d3b      	ldrb	r3, [r7, #20]
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	7cfb      	ldrb	r3, [r7, #19]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	441a      	add	r2, r3
 8004b94:	7cbb      	ldrb	r3, [r7, #18]
 8004b96:	029b      	lsls	r3, r3, #10
 8004b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	623b      	str	r3, [r7, #32]
				*(DWORD*)buff = csize << (n - 9);
 8004ba2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ba6:	3b09      	subs	r3, #9
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	409a      	lsls	r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004bb6:	e0cd      	b.n	8004d54 <disk_ioctl+0x2b0>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004bb8:	4b71      	ldr	r3, [pc, #452]	; (8004d80 <disk_ioctl+0x2dc>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d031      	beq.n	8004c28 <disk_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	208d      	movs	r0, #141	; 0x8d
 8004bc8:	f7ff fd2a 	bl	8004620 <send_cmd>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f040 80c2 	bne.w	8004d58 <disk_ioctl+0x2b4>
				xchg_spi(0xFF);
 8004bd4:	20ff      	movs	r0, #255	; 0xff
 8004bd6:	f7ff fc51 	bl	800447c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004bda:	f107 030c 	add.w	r3, r7, #12
 8004bde:	2110      	movs	r1, #16
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fcbd 	bl	8004560 <rcvr_datablock>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80b5 	beq.w	8004d58 <disk_ioctl+0x2b4>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004bee:	2330      	movs	r3, #48	; 0x30
 8004bf0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004bf4:	e007      	b.n	8004c06 <disk_ioctl+0x162>
 8004bf6:	20ff      	movs	r0, #255	; 0xff
 8004bf8:	f7ff fc40 	bl	800447c <xchg_spi>
 8004bfc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c00:	3b01      	subs	r3, #1
 8004c02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004c06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f3      	bne.n	8004bf6 <disk_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004c0e:	7dbb      	ldrb	r3, [r7, #22]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	2310      	movs	r3, #16
 8004c18:	fa03 f202 	lsl.w	r2, r3, r2
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004c26:	e097      	b.n	8004d58 <disk_ioctl+0x2b4>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
					res = RES_OK;
				}
			}
		} else {					/* SDC ver 1.XX or MMC */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004c28:	2100      	movs	r1, #0
 8004c2a:	2009      	movs	r0, #9
 8004c2c:	f7ff fcf8 	bl	8004620 <send_cmd>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f040 8090 	bne.w	8004d58 <disk_ioctl+0x2b4>
 8004c38:	f107 030c 	add.w	r3, r7, #12
 8004c3c:	2110      	movs	r1, #16
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fc8e 	bl	8004560 <rcvr_datablock>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 8086 	beq.w	8004d58 <disk_ioctl+0x2b4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004c4c:	4b4c      	ldr	r3, [pc, #304]	; (8004d80 <disk_ioctl+0x2dc>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d012      	beq.n	8004c7e <disk_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004c58:	7dbb      	ldrb	r3, [r7, #22]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004c60:	7dfa      	ldrb	r2, [r7, #23]
 8004c62:	09d2      	lsrs	r2, r2, #7
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	4413      	add	r3, r2
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	7e7b      	ldrb	r3, [r7, #25]
 8004c6c:	099b      	lsrs	r3, r3, #6
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e012      	b.n	8004ca4 <disk_ioctl+0x200>
				} else {					/* MMC */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004c7e:	7dbb      	ldrb	r3, [r7, #22]
 8004c80:	109b      	asrs	r3, r3, #2
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	3301      	adds	r3, #1
 8004c88:	7dfa      	ldrb	r2, [r7, #23]
 8004c8a:	00d2      	lsls	r2, r2, #3
 8004c8c:	f002 0218 	and.w	r2, r2, #24
 8004c90:	7df9      	ldrb	r1, [r7, #23]
 8004c92:	0949      	lsrs	r1, r1, #5
 8004c94:	b2c9      	uxtb	r1, r1
 8004c96:	440a      	add	r2, r1
 8004c98:	3201      	adds	r2, #1
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}
		}
		break;
 8004caa:	e055      	b.n	8004d58 <disk_ioctl+0x2b4>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004cac:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <disk_ioctl+0x2dc>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 0306 	and.w	r3, r3, #6
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d051      	beq.n	8004d5c <disk_ioctl+0x2b8>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004cb8:	f107 020c 	add.w	r2, r7, #12
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	2133      	movs	r1, #51	; 0x33
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff feef 	bl	8004aa4 <disk_ioctl>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d149      	bne.n	8004d60 <disk_ioctl+0x2bc>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004ccc:	7b3b      	ldrb	r3, [r7, #12]
 8004cce:	099b      	lsrs	r3, r3, #6
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <disk_ioctl+0x23c>
 8004cd6:	7dbb      	ldrb	r3, [r7, #22]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d041      	beq.n	8004d64 <disk_ioctl+0x2c0>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004cf0:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <disk_ioctl+0x2dc>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <disk_ioctl+0x264>
			st *= 512; ed *= 512;
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	025b      	lsls	r3, r3, #9
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	025b      	lsls	r3, r3, #9
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004d08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d0a:	2020      	movs	r0, #32
 8004d0c:	f7ff fc88 	bl	8004620 <send_cmd>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d128      	bne.n	8004d68 <disk_ioctl+0x2c4>
 8004d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d18:	2021      	movs	r0, #33	; 0x21
 8004d1a:	f7ff fc81 	bl	8004620 <send_cmd>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d121      	bne.n	8004d68 <disk_ioctl+0x2c4>
 8004d24:	2100      	movs	r1, #0
 8004d26:	2026      	movs	r0, #38	; 0x26
 8004d28:	f7ff fc7a 	bl	8004620 <send_cmd>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d11a      	bne.n	8004d68 <disk_ioctl+0x2c4>
 8004d32:	f247 5030 	movw	r0, #30000	; 0x7530
 8004d36:	f7ff fbcf 	bl	80044d8 <wait_ready>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <disk_ioctl+0x2c4>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004d46:	e00f      	b.n	8004d68 <disk_ioctl+0x2c4>

	default:
		res = RES_PARERR;
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004d4e:	e00c      	b.n	8004d6a <disk_ioctl+0x2c6>
	switch (cmd) {
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (select()){
			res = RES_OK;
		}
		break;
 8004d50:	bf00      	nop
 8004d52:	e00a      	b.n	8004d6a <disk_ioctl+0x2c6>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
		}
		break;
 8004d54:	bf00      	nop
 8004d56:	e008      	b.n	8004d6a <disk_ioctl+0x2c6>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004d58:	bf00      	nop
 8004d5a:	e006      	b.n	8004d6a <disk_ioctl+0x2c6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004d5c:	bf00      	nop
 8004d5e:	e004      	b.n	8004d6a <disk_ioctl+0x2c6>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004d60:	bf00      	nop
 8004d62:	e002      	b.n	8004d6a <disk_ioctl+0x2c6>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004d64:	bf00      	nop
 8004d66:	e000      	b.n	8004d6a <disk_ioctl+0x2c6>
			st *= 512; ed *= 512;
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
			res = RES_OK;	/* FatFs does not check result of this command */
		}
		break;
 8004d68:	bf00      	nop

	default:
		res = RES_PARERR;
	}

	deselect();
 8004d6a:	f7ff fbd9 	bl	8004520 <deselect>

	return res;
 8004d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3730      	adds	r7, #48	; 0x30
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000000 	.word	0x20000000
 8004d80:	20000034 	.word	0x20000034

08004d84 <MySPI3_Init_Slow>:

SPI_HandleTypeDef hspi3;

/* SPI3 init slow function */
void MySPI3_Init_Slow(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
	////Config and Enable Pins
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004d8a:	4a2e      	ldr	r2, [pc, #184]	; (8004e44 <MySPI3_Init_Slow+0xc0>)
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	; (8004e44 <MySPI3_Init_Slow+0xc0>)
 8004d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d90:	f043 0302 	orr.w	r3, r3, #2
 8004d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d96:	4b2b      	ldr	r3, [pc, #172]	; (8004e44 <MySPI3_Init_Slow+0xc0>)
 8004d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8004da2:	2338      	movs	r3, #56	; 0x38
 8004da4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da6:	2302      	movs	r3, #2
 8004da8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004daa:	2301      	movs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dae:	2302      	movs	r3, #2
 8004db0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004db2:	2306      	movs	r3, #6
 8004db4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004db6:	f107 030c 	add.w	r3, r7, #12
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4822      	ldr	r0, [pc, #136]	; (8004e48 <MySPI3_Init_Slow+0xc4>)
 8004dbe:	f7fb fb19 	bl	80003f4 <HAL_GPIO_Init>
	////Config and Enable SPI1 Peripheral
	__HAL_RCC_SPI3_CLK_ENABLE();
 8004dc2:	4a20      	ldr	r2, [pc, #128]	; (8004e44 <MySPI3_Init_Slow+0xc0>)
 8004dc4:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <MySPI3_Init_Slow+0xc0>)
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004dce:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <MySPI3_Init_Slow+0xc0>)
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
	hspi3.Instance = SPI3;
 8004dda:	4b1c      	ldr	r3, [pc, #112]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <MySPI3_Init_Slow+0xcc>)
 8004dde:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8004de0:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004de2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004de6:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004de8:	4b18      	ldr	r3, [pc, #96]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dee:	4b17      	ldr	r3, [pc, #92]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004df0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004df4:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004df6:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004dfc:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e08:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004e0a:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004e0c:	2238      	movs	r2, #56	; 0x38
 8004e0e:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e10:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004e24:	2207      	movs	r2, #7
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004e28:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_SPI_Init(&hspi3);
 8004e34:	4805      	ldr	r0, [pc, #20]	; (8004e4c <MySPI3_Init_Slow+0xc8>)
 8004e36:	f7fc fd7d 	bl	8001934 <HAL_SPI_Init>
}
 8004e3a:	bf00      	nop
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000
 8004e48:	48000400 	.word	0x48000400
 8004e4c:	2000003c 	.word	0x2000003c
 8004e50:	40003c00 	.word	0x40003c00

08004e54 <MySPI3_Init_Fast>:

/* SPI3 init fast function */
void MySPI3_Init_Fast(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
	////Config and Enable Pins
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5a:	4a2e      	ldr	r2, [pc, #184]	; (8004f14 <MySPI3_Init_Fast+0xc0>)
 8004e5c:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <MySPI3_Init_Fast+0xc0>)
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e66:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <MySPI3_Init_Fast+0xc0>)
 8004e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8004e72:	2338      	movs	r3, #56	; 0x38
 8004e74:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e76:	2302      	movs	r3, #2
 8004e78:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e82:	2306      	movs	r3, #6
 8004e84:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e86:	f107 030c 	add.w	r3, r7, #12
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4822      	ldr	r0, [pc, #136]	; (8004f18 <MySPI3_Init_Fast+0xc4>)
 8004e8e:	f7fb fab1 	bl	80003f4 <HAL_GPIO_Init>
	////Config and Enable SPI1 Peripheral
	__HAL_RCC_SPI3_CLK_ENABLE();
 8004e92:	4a20      	ldr	r2, [pc, #128]	; (8004f14 <MySPI3_Init_Fast+0xc0>)
 8004e94:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <MySPI3_Init_Fast+0xc0>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <MySPI3_Init_Fast+0xc0>)
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
	hspi3.Instance = SPI3;
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004eac:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <MySPI3_Init_Fast+0xcc>)
 8004eae:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004eb2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004eb6:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004eb8:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ebe:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004ec0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ec4:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed8:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004ef4:	2207      	movs	r2, #7
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ef8:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_SPI_Init(&hspi3);
 8004f04:	4805      	ldr	r0, [pc, #20]	; (8004f1c <MySPI3_Init_Fast+0xc8>)
 8004f06:	f7fc fd15 	bl	8001934 <HAL_SPI_Init>
}
 8004f0a:	bf00      	nop
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
 8004f18:	48000400 	.word	0x48000400
 8004f1c:	2000003c 	.word	0x2000003c
 8004f20:	40003c00 	.word	0x40003c00

08004f24 <MySPI3_ReadByte>:
void MySPI3_DeInit(void){
	HAL_SPI_DeInit(&hspi3);
}

/* SPI3 read one byte*/
uint8_t MySPI3_ReadByte(void){
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af02      	add	r7, sp, #8
	uint8_t ReceivedByte = 0, Dummy = 0xFF;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	71fb      	strb	r3, [r7, #7]
 8004f2e:	23ff      	movs	r3, #255	; 0xff
 8004f30:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8004f32:	bf00      	nop
 8004f34:	4809      	ldr	r0, [pc, #36]	; (8004f5c <MySPI3_ReadByte+0x38>)
 8004f36:	f7fd f8db 	bl	80020f0 <HAL_SPI_GetState>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d1f9      	bne.n	8004f34 <MySPI3_ReadByte+0x10>
	HAL_SPI_TransmitReceive(&hspi3, &Dummy, &ReceivedByte, 1, 5000);
 8004f40:	1dfa      	adds	r2, r7, #7
 8004f42:	1db9      	adds	r1, r7, #6
 8004f44:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4803      	ldr	r0, [pc, #12]	; (8004f5c <MySPI3_ReadByte+0x38>)
 8004f4e:	f7fc fecf 	bl	8001cf0 <HAL_SPI_TransmitReceive>
	return ReceivedByte;
 8004f52:	79fb      	ldrb	r3, [r7, #7]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	2000003c 	.word	0x2000003c

08004f60 <MySPI3_ReadBytes>:

/* SPI3 read x bytes*/
uint8_t MySPI3_ReadBytes(uint8_t *data, uint16_t numBytes) {
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
	uint16_t i = 0;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	81fb      	strh	r3, [r7, #14]
	for(i=0;i<numBytes;i++){
 8004f70:	2300      	movs	r3, #0
 8004f72:	81fb      	strh	r3, [r7, #14]
 8004f74:	e009      	b.n	8004f8a <MySPI3_ReadBytes+0x2a>
		*(data+i) = MySPI3_ReadByte();
 8004f76:	89fb      	ldrh	r3, [r7, #14]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	18d4      	adds	r4, r2, r3
 8004f7c:	f7ff ffd2 	bl	8004f24 <MySPI3_ReadByte>
 8004f80:	4603      	mov	r3, r0
 8004f82:	7023      	strb	r3, [r4, #0]
}

/* SPI3 read x bytes*/
uint8_t MySPI3_ReadBytes(uint8_t *data, uint16_t numBytes) {
	uint16_t i = 0;
	for(i=0;i<numBytes;i++){
 8004f84:	89fb      	ldrh	r3, [r7, #14]
 8004f86:	3301      	adds	r3, #1
 8004f88:	81fb      	strh	r3, [r7, #14]
 8004f8a:	89fa      	ldrh	r2, [r7, #14]
 8004f8c:	887b      	ldrh	r3, [r7, #2]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d3f1      	bcc.n	8004f76 <MySPI3_ReadBytes+0x16>
		*(data+i) = MySPI3_ReadByte();
	}
	return 0;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd90      	pop	{r4, r7, pc}

08004f9c <MySPI3_SendByte>:

/* SPI3 send one byte*/
uint8_t MySPI3_SendByte(uint8_t data) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t ReceivedByte = 0;;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8004faa:	bf00      	nop
 8004fac:	480a      	ldr	r0, [pc, #40]	; (8004fd8 <MySPI3_SendByte+0x3c>)
 8004fae:	f7fd f89f 	bl	80020f0 <HAL_SPI_GetState>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d1f9      	bne.n	8004fac <MySPI3_SendByte+0x10>
	HAL_SPI_TransmitReceive(&hspi3, &data, &ReceivedByte, 1, 5000);
 8004fb8:	f107 020f 	add.w	r2, r7, #15
 8004fbc:	1df9      	adds	r1, r7, #7
 8004fbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	4804      	ldr	r0, [pc, #16]	; (8004fd8 <MySPI3_SendByte+0x3c>)
 8004fc8:	f7fc fe92 	bl	8001cf0 <HAL_SPI_TransmitReceive>
	return ReceivedByte;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	2000003c 	.word	0x2000003c

08004fdc <MySPI3_SendBytes>:

/* SPI3 send x bytes*/
uint8_t MySPI3_SendBytes(uint8_t *data, uint16_t numBytes) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi3, data, numBytes, HAL_MAX_DELAY);
 8004fe8:	887a      	ldrh	r2, [r7, #2]
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4803      	ldr	r0, [pc, #12]	; (8005000 <MySPI3_SendBytes+0x24>)
 8004ff2:	f7fc fd27 	bl	8001a44 <HAL_SPI_Transmit>
	return 0;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	2000003c 	.word	0x2000003c

08005004 <InitandEnableDelayTimer15>:

TIM_HandleTypeDef htim15;

/* TIM15 Init function , delays*/
void InitandEnableDelayTimer15(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM15_CLK_ENABLE();			//// Enable Timer Clock
 800500a:	4a16      	ldr	r2, [pc, #88]	; (8005064 <InitandEnableDelayTimer15+0x60>)
 800500c:	4b15      	ldr	r3, [pc, #84]	; (8005064 <InitandEnableDelayTimer15+0x60>)
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	6613      	str	r3, [r2, #96]	; 0x60
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <InitandEnableDelayTimer15+0x60>)
 8005018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501e:	607b      	str	r3, [r7, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
	htim15.Instance = TIM15;
 8005022:	4b11      	ldr	r3, [pc, #68]	; (8005068 <InitandEnableDelayTimer15+0x64>)
 8005024:	4a11      	ldr	r2, [pc, #68]	; (800506c <InitandEnableDelayTimer15+0x68>)
 8005026:	601a      	str	r2, [r3, #0]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005028:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <InitandEnableDelayTimer15+0x64>)
 800502a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800502e:	611a      	str	r2, [r3, #16]
	htim15.Init.Prescaler = (HAL_RCC_GetHCLKFreq()/1000000);	// RCC_Clocks/1000 for 1ms /1000000 for 1us, !MAx value 0xFFFF = 65535 !;
 8005030:	f7fc f92e 	bl	8001290 <HAL_RCC_GetHCLKFreq>
 8005034:	4602      	mov	r2, r0
 8005036:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <InitandEnableDelayTimer15+0x6c>)
 8005038:	fba3 2302 	umull	r2, r3, r3, r2
 800503c:	0c9b      	lsrs	r3, r3, #18
 800503e:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <InitandEnableDelayTimer15+0x64>)
 8005040:	6053      	str	r3, [r2, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005042:	4b09      	ldr	r3, [pc, #36]	; (8005068 <InitandEnableDelayTimer15+0x64>)
 8005044:	2200      	movs	r2, #0
 8005046:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 8005048:	4b07      	ldr	r3, [pc, #28]	; (8005068 <InitandEnableDelayTimer15+0x64>)
 800504a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800504e:	60da      	str	r2, [r3, #12]
	htim15.Init.RepetitionCounter = 0;
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <InitandEnableDelayTimer15+0x64>)
 8005052:	2200      	movs	r2, #0
 8005054:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Init(&htim15);
 8005056:	4804      	ldr	r0, [pc, #16]	; (8005068 <InitandEnableDelayTimer15+0x64>)
 8005058:	f7fd f976 	bl	8002348 <HAL_TIM_Base_Init>
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40021000 	.word	0x40021000
 8005068:	200000a0 	.word	0x200000a0
 800506c:	40014000 	.word	0x40014000
 8005070:	431bde83 	.word	0x431bde83

08005074 <delay_us>:

////us delays
void delay_us(uint16_t delay_time){
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim15,0);
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <delay_us+0x30>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim15);
 8005086:	4807      	ldr	r0, [pc, #28]	; (80050a4 <delay_us+0x30>)
 8005088:	f7fd f98a 	bl	80023a0 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim15) != delay_time);				// wait
 800508c:	bf00      	nop
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <delay_us+0x30>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	429a      	cmp	r2, r3
 8005098:	d1f9      	bne.n	800508e <delay_us+0x1a>
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	200000a0 	.word	0x200000a0

080050a8 <delay_ms>:

////ms delays
void delay_ms(uint32_t delay_time){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	if(delay_time > 0 ){
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <delay_ms+0x22>
		do{
			delay_us(1000);
 80050b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050ba:	f7ff ffdb 	bl	8005074 <delay_us>
		}while(--delay_time);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	607b      	str	r3, [r7, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f5      	bne.n	80050b6 <delay_ms+0xe>
	}
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop

080050d4 <delay_s>:

////s delays
void delay_s(uint32_t delay_time){
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
	if(delay_time > 0 ){
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <delay_s+0x22>
		do{
			delay_ms(1000);
 80050e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050e6:	f7ff ffdf 	bl	80050a8 <delay_ms>
		}while(--delay_time);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f5      	bne.n	80050e2 <delay_s+0xe>
	}
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop

08005100 <SDCard_HWInit>:
#include "stm32l4xx_hal.h"
#include "MySPI_HAL.h"
#include "SDCard.h"

//SD Card Hardware Init
void SDCard_HWInit(void){
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOA_CLK_ENABLE();						////Enable RCC
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <SDCard_HWInit+0x48>)
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <SDCard_HWInit+0x48>)
 800510a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <SDCard_HWInit+0x48>)
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = SDCARD_CS_Pin;				////Configure the Pins
 800511e:	2304      	movs	r3, #4
 8005120:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005122:	2301      	movs	r3, #1
 8005124:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005126:	2301      	movs	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800512a:	2303      	movs	r3, #3
 800512c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SDCARD_CS_GPIOx, &GPIO_InitStruct);	////Load the Initialization Structure
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	4619      	mov	r1, r3
 8005132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005136:	f7fb f95d 	bl	80003f4 <HAL_GPIO_Init>
	MySPI3_Init_Slow();
 800513a:	f7ff fe23 	bl	8004d84 <MySPI3_Init_Slow>
}
 800513e:	bf00      	nop
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000

0800514c <SDCard_ChipSelect>:

////Selects the SD Card (Chip Select Pin)
void SDCard_ChipSelect(void){
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDCARD_CS_GPIOx, SDCARD_CS_Pin, GPIO_PIN_RESET);	//Chip Select (Low Active)
 8005150:	2200      	movs	r2, #0
 8005152:	2104      	movs	r1, #4
 8005154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005158:	f7fb faba 	bl	80006d0 <HAL_GPIO_WritePin>
}
 800515c:	bf00      	nop
 800515e:	bd80      	pop	{r7, pc}

08005160 <SDCard_ChipDeselect>:

////Deselects the SD Card (Chip Select Pin)
void SDCard_ChipDeselect(void){
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDCARD_CS_GPIOx, SDCARD_CS_Pin, GPIO_PIN_SET);	//Chip Select (Low Active)
 8005164:	2201      	movs	r2, #1
 8005166:	2104      	movs	r1, #4
 8005168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800516c:	f7fb fab0 	bl	80006d0 <HAL_GPIO_WritePin>
}
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}

08005174 <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b0ac      	sub	sp, #176	; 0xb0
 8005178:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800517a:	2310      	movs	r3, #16
 800517c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800517e:	2301      	movs	r3, #1
 8005180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800518a:	2360      	movs	r3, #96	; 0x60
 800518c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005190:	2302      	movs	r3, #2
 8005192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005196:	2301      	movs	r3, #1
 8005198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800519c:	2301      	movs	r3, #1
 800519e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80051a2:	2310      	movs	r3, #16
 80051a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80051a8:	2307      	movs	r3, #7
 80051aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80051ae:	2302      	movs	r3, #2
 80051b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80051b4:	2302      	movs	r3, #2
 80051b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80051ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fb fb00 	bl	80007c4 <HAL_RCC_OscConfig>

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051c4:	230f      	movs	r3, #15
 80051c6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051c8:	2303      	movs	r3, #3
 80051ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051cc:	2300      	movs	r3, #0
 80051ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80051d0:	2300      	movs	r3, #0
 80051d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051d4:	2300      	movs	r3, #0
 80051d6:	66bb      	str	r3, [r7, #104]	; 0x68

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 80051d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80051dc:	2101      	movs	r1, #1
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb fe8e 	bl	8000f00 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80051e4:	2301      	movs	r3, #1
 80051e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80051e8:	2300      	movs	r3, #0
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fc f8bc 	bl	800136c <HAL_RCCEx_PeriphCLKConfig>
    /**Configure the main internal regulator output voltage
    */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80051f8:	f7fb fa90 	bl	800071c <HAL_PWREx_ControlVoltageScaling>

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80051fc:	f7fc f848 	bl	8001290 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <SystemClock_Config+0xb8>)
 8005204:	fba3 2302 	umull	r2, r3, r3, r2
 8005208:	099b      	lsrs	r3, r3, #6
 800520a:	4618      	mov	r0, r3
 800520c:	f7fb f8bc 	bl	8000388 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005210:	2004      	movs	r0, #4
 8005212:	f7fb f8c5 	bl	80003a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005216:	2200      	movs	r2, #0
 8005218:	2100      	movs	r1, #0
 800521a:	f04f 30ff 	mov.w	r0, #4294967295
 800521e:	f7fb f897 	bl	8000350 <HAL_NVIC_SetPriority>
}
 8005222:	bf00      	nop
 8005224:	37b0      	adds	r7, #176	; 0xb0
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	10624dd3 	.word	0x10624dd3

08005230 <failed>:
#include "ff.h"
#include "ffconf.h"
#include "integer.h"
#include "SDCard.h"

void failed(void){
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
	////Do something here
	////Or set a breakpoint
	delay_s(10);
 8005234:	200a      	movs	r0, #10
 8005236:	f7ff ff4d 	bl	80050d4 <delay_s>
}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop

08005240 <main>:

int main(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	f6ad 0d78 	subw	sp, sp, #2168	; 0x878
 8005246:	af00      	add	r7, sp, #0
	BYTE TxBuff[512];					////Tx Data Buffer
	BYTE RxBuff[512];					////Rx Data Buffer
	uint32_t i = 0;						////Counter
 8005248:	2300      	movs	r3, #0
 800524a:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
	char res = 1;						////Variable storing response
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
	char newline[2] = {0x0D, 0x0A};		////New line codes (ASCII Table)
 8005254:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8005258:	4998      	ldr	r1, [pc, #608]	; (80054bc <main+0x27c>)
 800525a:	461a      	mov	r2, r3
 800525c:	460b      	mov	r3, r1
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	8013      	strh	r3, [r2, #0]
	char tab[2] = {0x09, 0x09};			////2 x TAB code (ASCII Table)
 8005262:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8005266:	4996      	ldr	r1, [pc, #600]	; (80054c0 <main+0x280>)
 8005268:	461a      	mov	r2, r3
 800526a:	460b      	mov	r3, r1
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	8013      	strh	r3, [r2, #0]
	char snum[5] = "";					////Array for write iteration
 8005270:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	2200      	movs	r2, #0
 800527a:	711a      	strb	r2, [r3, #4]
	FATFS fs;							////FATFS object
	FIL file;							////FILE object

	SystemClock_Config();				////System Configuration
 800527c:	f7ff ff7a 	bl	8005174 <SystemClock_Config>
	InitandEnableDelayTimer15();		////Init Timer for delays
 8005280:	f7ff fec0 	bl	8005004 <InitandEnableDelayTimer15>

	for(i=0;i<512;i++){					////Initialize Data Buffers
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800528a:	e012      	b.n	80052b2 <main+0x72>
		TxBuff[i] = 0x44;
 800528c:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8005290:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8005294:	4413      	add	r3, r2
 8005296:	2244      	movs	r2, #68	; 0x44
 8005298:	701a      	strb	r2, [r3, #0]
		RxBuff[i] = 0x00;
 800529a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800529e:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80052a2:	4413      	add	r3, r2
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
	FIL file;							////FILE object

	SystemClock_Config();				////System Configuration
	InitandEnableDelayTimer15();		////Init Timer for delays

	for(i=0;i<512;i++){					////Initialize Data Buffers
 80052a8:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80052ac:	3301      	adds	r3, #1
 80052ae:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 80052b2:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80052b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ba:	d3e7      	bcc.n	800528c <main+0x4c>
		TxBuff[i] = 0x44;
		RxBuff[i] = 0x00;
	}

	////1) Test if disk_initialize() functions works!
	res =  disk_initialize(0);
 80052bc:	2000      	movs	r0, #0
 80052be:	f7ff fa1f 	bl	8004700 <disk_initialize>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
	if(res != FR_OK){
 80052c8:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <main+0x98>
		failed();
 80052d0:	f7ff ffae 	bl	8005230 <failed>
		return 1;		////FAILED!
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0ec      	b.n	80054b2 <main+0x272>
	}
	delay_s(1);
 80052d8:	2001      	movs	r0, #1
 80052da:	f7ff fefb 	bl	80050d4 <delay_s>

	////2) Test if disk_write(..) functions works!
	////NOTE: Check also if data is correct (with HxD for example) and not only the res variable!
	res =  disk_write (
 80052de:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 80052e2:	2301      	movs	r3, #1
 80052e4:	f64a 529c 	movw	r2, #44444	; 0xad9c
 80052e8:	2000      	movs	r0, #0
 80052ea:	f7ff fb5f 	bl	80049ac <disk_write>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
			0,			/* Physical drive number (0) */
			TxBuff,		/* Pointer to the data to write */
			44444,		/* Start sector number (LBA) */
			1			/* Number of sectors to write (1..128) */
		);
	if(res != FR_OK){
 80052f4:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <main+0xc4>
		failed();
 80052fc:	f7ff ff98 	bl	8005230 <failed>
		return 1;		////FAILED!
 8005300:	2301      	movs	r3, #1
 8005302:	e0d6      	b.n	80054b2 <main+0x272>
	}
	delay_s(1);
 8005304:	2001      	movs	r0, #1
 8005306:	f7ff fee5 	bl	80050d4 <delay_s>

	////3) Test if disk_read(..) functions works!
	////NOTE: Check also if data is correct (with debugger) and not only the res variable!
	res =  disk_read (
 800530a:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 800530e:	2301      	movs	r3, #1
 8005310:	f64a 529c 	movw	r2, #44444	; 0xad9c
 8005314:	2000      	movs	r0, #0
 8005316:	f7ff fae3 	bl	80048e0 <disk_read>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
			0,			/* Physical drive number (0) */
			RxBuff,		/* Pointer to the data buffer to store read data */
			44444,		/* Start sector number (LBA) */
			1			/* Number of sectors to read (1..128) */
		);
	if(res != FR_OK){
 8005320:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <main+0xf0>
		failed();
 8005328:	f7ff ff82 	bl	8005230 <failed>
		return 1;		////FAILED!
 800532c:	2301      	movs	r3, #1
 800532e:	e0c0      	b.n	80054b2 <main+0x272>
	}
	delay_s(1);
 8005330:	2001      	movs	r0, #1
 8005332:	f7ff fecf 	bl	80050d4 <delay_s>

	////4) Test if f_mount(..) works!
	res =  f_mount(&fs, "0", 1);
 8005336:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800533a:	2201      	movs	r2, #1
 800533c:	4961      	ldr	r1, [pc, #388]	; (80054c4 <main+0x284>)
 800533e:	4618      	mov	r0, r3
 8005340:	f7fe fcc4 	bl	8003ccc <f_mount>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
	if(res != FR_OK){
 800534a:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <main+0x11a>
		failed();
 8005352:	f7ff ff6d 	bl	8005230 <failed>
		return 1;		////FAILED!
 8005356:	2301      	movs	r3, #1
 8005358:	e0ab      	b.n	80054b2 <main+0x272>
	}
	delay_s(1);
 800535a:	2001      	movs	r0, #1
 800535c:	f7ff feba 	bl	80050d4 <delay_s>

	////5) Test if f_open(..) works!!
	res =  f_open(&file, "TESTFILE.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	2233      	movs	r2, #51	; 0x33
 8005364:	4958      	ldr	r1, [pc, #352]	; (80054c8 <main+0x288>)
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fcf0 	bl	8003d4c <f_open>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
	if(res != FR_OK){
 8005372:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <main+0x142>
		failed();
 800537a:	f7ff ff59 	bl	8005230 <failed>
		return 1;		////FAILED!
 800537e:	2301      	movs	r3, #1
 8005380:	e097      	b.n	80054b2 <main+0x272>
	}
	delay_s(1);
 8005382:	2001      	movs	r0, #1
 8005384:	f7ff fea6 	bl	80050d4 <delay_s>

	if (res == FR_OK){
 8005388:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 800538c:	2b00      	cmp	r3, #0
 800538e:	f040 808b 	bne.w	80054a8 <main+0x268>
		////Write 100 Lines to Text File
		for(i=1;i<=100;i++){
 8005392:	2301      	movs	r3, #1
 8005394:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 8005398:	e080      	b.n	800549c <main+0x25c>
			res =  f_open(&file, "TESTFILE.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 800539a:	1d3b      	adds	r3, r7, #4
 800539c:	2233      	movs	r2, #51	; 0x33
 800539e:	494a      	ldr	r1, [pc, #296]	; (80054c8 <main+0x288>)
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe fcd3 	bl	8003d4c <f_open>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
			if (res == FR_OK){
 80053ac:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d166      	bne.n	8005482 <main+0x242>
				itoa(i,snum,10);
 80053b4:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80053b8:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 80053bc:	220a      	movs	r2, #10
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f989 	bl	80056d6 <itoa>
				res = f_write(&file, snum, 5, NULL);
 80053c4:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 80053c8:	1d38      	adds	r0, r7, #4
 80053ca:	2300      	movs	r3, #0
 80053cc:	2205      	movs	r2, #5
 80053ce:	f7fe fe3f 	bl	8004050 <f_write>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
				if(res != FR_OK){
 80053d8:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <main+0x1b0>
					f_close(&file);
 80053e0:	1d3b      	adds	r3, r7, #4
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff f81e 	bl	8004424 <f_close>
					failed();
 80053e8:	f7ff ff22 	bl	8005230 <failed>
					return 1;		////FAILED!
 80053ec:	2301      	movs	r3, #1
 80053ee:	e060      	b.n	80054b2 <main+0x272>
				}
				res = f_write(&file, tab, 2, NULL);
 80053f0:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80053f4:	1d38      	adds	r0, r7, #4
 80053f6:	2300      	movs	r3, #0
 80053f8:	2202      	movs	r2, #2
 80053fa:	f7fe fe29 	bl	8004050 <f_write>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
				if(res != FR_OK){
 8005404:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <main+0x1dc>
					f_close(&file);
 800540c:	1d3b      	adds	r3, r7, #4
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff f808 	bl	8004424 <f_close>
					failed();
 8005414:	f7ff ff0c 	bl	8005230 <failed>
					return 1;		////FAILED!
 8005418:	2301      	movs	r3, #1
 800541a:	e04a      	b.n	80054b2 <main+0x272>
				}
				res = f_write(&file, "Saving some text: XX.YYY.ZZZ ; 1.22.333.4444.55555 !!", 53, NULL);
 800541c:	1d38      	adds	r0, r7, #4
 800541e:	2300      	movs	r3, #0
 8005420:	2235      	movs	r2, #53	; 0x35
 8005422:	492a      	ldr	r1, [pc, #168]	; (80054cc <main+0x28c>)
 8005424:	f7fe fe14 	bl	8004050 <f_write>
 8005428:	4603      	mov	r3, r0
 800542a:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
				if(res != FR_OK){
 800542e:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <main+0x206>
					f_close(&file);
 8005436:	1d3b      	adds	r3, r7, #4
 8005438:	4618      	mov	r0, r3
 800543a:	f7fe fff3 	bl	8004424 <f_close>
					failed();
 800543e:	f7ff fef7 	bl	8005230 <failed>
					return 1;		////FAILED!
 8005442:	2301      	movs	r3, #1
 8005444:	e035      	b.n	80054b2 <main+0x272>
				}
				res = f_write(&file, newline, 2, NULL);
 8005446:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 800544a:	1d38      	adds	r0, r7, #4
 800544c:	2300      	movs	r3, #0
 800544e:	2202      	movs	r2, #2
 8005450:	f7fe fdfe 	bl	8004050 <f_write>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 3873 	strb.w	r3, [r7, #2163]	; 0x873
				if(res != FR_OK){
 800545a:	f897 3873 	ldrb.w	r3, [r7, #2163]	; 0x873
 800545e:	2b00      	cmp	r3, #0
 8005460:	d007      	beq.n	8005472 <main+0x232>
					f_close(&file);
 8005462:	1d3b      	adds	r3, r7, #4
 8005464:	4618      	mov	r0, r3
 8005466:	f7fe ffdd 	bl	8004424 <f_close>
					failed();
 800546a:	f7ff fee1 	bl	8005230 <failed>
					return 1;		////FAILED!
 800546e:	2301      	movs	r3, #1
 8005470:	e01f      	b.n	80054b2 <main+0x272>
				}
				f_close(&file);
 8005472:	1d3b      	adds	r3, r7, #4
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe ffd5 	bl	8004424 <f_close>
				delay_ms(100);
 800547a:	2064      	movs	r0, #100	; 0x64
 800547c:	f7ff fe14 	bl	80050a8 <delay_ms>
 8005480:	e007      	b.n	8005492 <main+0x252>
			}else{
				f_close(&file);
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f7fe ffcd 	bl	8004424 <f_close>
				failed();
 800548a:	f7ff fed1 	bl	8005230 <failed>
				return 1;
 800548e:	2301      	movs	r3, #1
 8005490:	e00f      	b.n	80054b2 <main+0x272>
	}
	delay_s(1);

	if (res == FR_OK){
		////Write 100 Lines to Text File
		for(i=1;i<=100;i++){
 8005492:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8005496:	3301      	adds	r3, #1
 8005498:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800549c:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 80054a0:	2b64      	cmp	r3, #100	; 0x64
 80054a2:	f67f af7a 	bls.w	800539a <main+0x15a>
 80054a6:	e003      	b.n	80054b0 <main+0x270>
				failed();
				return 1;
			}
		}
	}else{
		failed();
 80054a8:	f7ff fec2 	bl	8005230 <failed>
		return 1;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <main+0x272>
	}

	return 0;		////SUCCEEDED!
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	f607 0778 	addw	r7, r7, #2168	; 0x878
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	08005808 	.word	0x08005808
 80054c0:	0800580c 	.word	0x0800580c
 80054c4:	080057bc 	.word	0x080057bc
 80054c8:	080057c0 	.word	0x080057c0
 80054cc:	080057d0 	.word	0x080057d0

080054d0 <HAL_SPI_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a11      	ldr	r2, [pc, #68]	; (8005524 <HAL_SPI_MspInit+0x54>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d11c      	bne.n	800551c <HAL_SPI_MspInit+0x4c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054e2:	4a11      	ldr	r2, [pc, #68]	; (8005528 <HAL_SPI_MspInit+0x58>)
 80054e4:	4b10      	ldr	r3, [pc, #64]	; (8005528 <HAL_SPI_MspInit+0x58>)
 80054e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054ec:	6613      	str	r3, [r2, #96]	; 0x60
 80054ee:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <HAL_SPI_MspInit+0x58>)
 80054f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80054fa:	23c2      	movs	r3, #194	; 0xc2
 80054fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fe:	2302      	movs	r3, #2
 8005500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005506:	2303      	movs	r3, #3
 8005508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800550a:	2305      	movs	r3, #5
 800550c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800550e:	f107 030c 	add.w	r3, r7, #12
 8005512:	4619      	mov	r1, r3
 8005514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005518:	f7fa ff6c 	bl	80003f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800551c:	bf00      	nop
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40013000 	.word	0x40013000
 8005528:	40021000 	.word	0x40021000

0800552c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a0a      	ldr	r2, [pc, #40]	; (8005564 <HAL_TIM_Base_MspInit+0x38>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d10b      	bne.n	8005556 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800553e:	4a0a      	ldr	r2, [pc, #40]	; (8005568 <HAL_TIM_Base_MspInit+0x3c>)
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <HAL_TIM_Base_MspInit+0x3c>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	f043 0310 	orr.w	r3, r3, #16
 8005548:	6593      	str	r3, [r2, #88]	; 0x58
 800554a:	4b07      	ldr	r3, [pc, #28]	; (8005568 <HAL_TIM_Base_MspInit+0x3c>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40001000 	.word	0x40001000
 8005568:	40021000 	.word	0x40021000

0800556c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop

0800557c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop

0800558c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005590:	f7fa fe38 	bl	8000204 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005594:	f7fa ff20 	bl	80003d8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005598:	bf00      	nop
 800559a:	bd80      	pop	{r7, pc}

0800559c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055a0:	4a17      	ldr	r2, [pc, #92]	; (8005600 <SystemInit+0x64>)
 80055a2:	4b17      	ldr	r3, [pc, #92]	; (8005600 <SystemInit+0x64>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80055b0:	4a14      	ldr	r2, [pc, #80]	; (8005604 <SystemInit+0x68>)
 80055b2:	4b14      	ldr	r3, [pc, #80]	; (8005604 <SystemInit+0x68>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80055bc:	4b11      	ldr	r3, [pc, #68]	; (8005604 <SystemInit+0x68>)
 80055be:	2200      	movs	r2, #0
 80055c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80055c2:	4a10      	ldr	r2, [pc, #64]	; (8005604 <SystemInit+0x68>)
 80055c4:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <SystemInit+0x68>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80055cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80055d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <SystemInit+0x68>)
 80055d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80055d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <SystemInit+0x68>)
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <SystemInit+0x68>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <SystemInit+0x68>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <SystemInit+0x64>)
 80055ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055f2:	609a      	str	r2, [r3, #8]
#endif
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	e000ed00 	.word	0xe000ed00
 8005604:	40021000 	.word	0x40021000

08005608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005640 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800560c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800560e:	e003      	b.n	8005618 <LoopCopyDataInit>

08005610 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005612:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005614:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005616:	3104      	adds	r1, #4

08005618 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005618:	480b      	ldr	r0, [pc, #44]	; (8005648 <LoopForever+0xa>)
	ldr	r3, =_edata
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <LoopForever+0xe>)
	adds	r2, r0, r1
 800561c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800561e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005620:	d3f6      	bcc.n	8005610 <CopyDataInit>
	ldr	r2, =_sbss
 8005622:	4a0b      	ldr	r2, [pc, #44]	; (8005650 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005624:	e002      	b.n	800562c <LoopFillZerobss>

08005626 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005626:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005628:	f842 3b04 	str.w	r3, [r2], #4

0800562c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <LoopForever+0x16>)
	cmp	r2, r3
 800562e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005630:	d3f9      	bcc.n	8005626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005632:	f7ff ffb3 	bl	800559c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005636:	f000 f811 	bl	800565c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800563a:	f7ff fe01 	bl	8005240 <main>

0800563e <LoopForever>:

LoopForever:
    b LoopForever
 800563e:	e7fe      	b.n	800563e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005640:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8005644:	08005900 	.word	0x08005900
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005648:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800564c:	20000008 	.word	0x20000008
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8005650:	20000008 	.word	0x20000008
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8005654:	200000dc 	.word	0x200000dc

08005658 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005658:	e7fe      	b.n	8005658 <ADC1_IRQHandler>
	...

0800565c <__libc_init_array>:
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <__libc_init_array+0x3c>)
 8005660:	4c0e      	ldr	r4, [pc, #56]	; (800569c <__libc_init_array+0x40>)
 8005662:	1ae4      	subs	r4, r4, r3
 8005664:	10a4      	asrs	r4, r4, #2
 8005666:	2500      	movs	r5, #0
 8005668:	461e      	mov	r6, r3
 800566a:	42a5      	cmp	r5, r4
 800566c:	d004      	beq.n	8005678 <__libc_init_array+0x1c>
 800566e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005672:	4798      	blx	r3
 8005674:	3501      	adds	r5, #1
 8005676:	e7f8      	b.n	800566a <__libc_init_array+0xe>
 8005678:	f000 f86c 	bl	8005754 <_init>
 800567c:	4c08      	ldr	r4, [pc, #32]	; (80056a0 <__libc_init_array+0x44>)
 800567e:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <__libc_init_array+0x48>)
 8005680:	1ae4      	subs	r4, r4, r3
 8005682:	10a4      	asrs	r4, r4, #2
 8005684:	2500      	movs	r5, #0
 8005686:	461e      	mov	r6, r3
 8005688:	42a5      	cmp	r5, r4
 800568a:	d004      	beq.n	8005696 <__libc_init_array+0x3a>
 800568c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005690:	4798      	blx	r3
 8005692:	3501      	adds	r5, #1
 8005694:	e7f8      	b.n	8005688 <__libc_init_array+0x2c>
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	080058f8 	.word	0x080058f8
 800569c:	080058f8 	.word	0x080058f8
 80056a0:	080058fc 	.word	0x080058fc
 80056a4:	080058f8 	.word	0x080058f8

080056a8 <__itoa>:
 80056a8:	1e93      	subs	r3, r2, #2
 80056aa:	2b22      	cmp	r3, #34	; 0x22
 80056ac:	b510      	push	{r4, lr}
 80056ae:	460c      	mov	r4, r1
 80056b0:	d902      	bls.n	80056b8 <__itoa+0x10>
 80056b2:	2000      	movs	r0, #0
 80056b4:	7008      	strb	r0, [r1, #0]
 80056b6:	bd10      	pop	{r4, pc}
 80056b8:	2a0a      	cmp	r2, #10
 80056ba:	d106      	bne.n	80056ca <__itoa+0x22>
 80056bc:	2800      	cmp	r0, #0
 80056be:	da04      	bge.n	80056ca <__itoa+0x22>
 80056c0:	232d      	movs	r3, #45	; 0x2d
 80056c2:	700b      	strb	r3, [r1, #0]
 80056c4:	4240      	negs	r0, r0
 80056c6:	2101      	movs	r1, #1
 80056c8:	e000      	b.n	80056cc <__itoa+0x24>
 80056ca:	2100      	movs	r1, #0
 80056cc:	4421      	add	r1, r4
 80056ce:	f000 f805 	bl	80056dc <__utoa>
 80056d2:	4620      	mov	r0, r4
 80056d4:	bd10      	pop	{r4, pc}

080056d6 <itoa>:
 80056d6:	f7ff bfe7 	b.w	80056a8 <__itoa>
	...

080056dc <__utoa>:
 80056dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056de:	4c1c      	ldr	r4, [pc, #112]	; (8005750 <__utoa+0x74>)
 80056e0:	b08b      	sub	sp, #44	; 0x2c
 80056e2:	4603      	mov	r3, r0
 80056e4:	460f      	mov	r7, r1
 80056e6:	466d      	mov	r5, sp
 80056e8:	f104 0e20 	add.w	lr, r4, #32
 80056ec:	6820      	ldr	r0, [r4, #0]
 80056ee:	6861      	ldr	r1, [r4, #4]
 80056f0:	462e      	mov	r6, r5
 80056f2:	c603      	stmia	r6!, {r0, r1}
 80056f4:	3408      	adds	r4, #8
 80056f6:	4574      	cmp	r4, lr
 80056f8:	4635      	mov	r5, r6
 80056fa:	d1f7      	bne.n	80056ec <__utoa+0x10>
 80056fc:	7921      	ldrb	r1, [r4, #4]
 80056fe:	7131      	strb	r1, [r6, #4]
 8005700:	1e91      	subs	r1, r2, #2
 8005702:	6820      	ldr	r0, [r4, #0]
 8005704:	6030      	str	r0, [r6, #0]
 8005706:	2922      	cmp	r1, #34	; 0x22
 8005708:	f04f 0000 	mov.w	r0, #0
 800570c:	d901      	bls.n	8005712 <__utoa+0x36>
 800570e:	7038      	strb	r0, [r7, #0]
 8005710:	e01c      	b.n	800574c <__utoa+0x70>
 8005712:	1e7d      	subs	r5, r7, #1
 8005714:	fbb3 f4f2 	udiv	r4, r3, r2
 8005718:	ae0a      	add	r6, sp, #40	; 0x28
 800571a:	fb02 3314 	mls	r3, r2, r4, r3
 800571e:	4433      	add	r3, r6
 8005720:	1c41      	adds	r1, r0, #1
 8005722:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005726:	f805 3f01 	strb.w	r3, [r5, #1]!
 800572a:	4623      	mov	r3, r4
 800572c:	b10c      	cbz	r4, 8005732 <__utoa+0x56>
 800572e:	4608      	mov	r0, r1
 8005730:	e7f0      	b.n	8005714 <__utoa+0x38>
 8005732:	547c      	strb	r4, [r7, r1]
 8005734:	183a      	adds	r2, r7, r0
 8005736:	1ac1      	subs	r1, r0, r3
 8005738:	428b      	cmp	r3, r1
 800573a:	da06      	bge.n	800574a <__utoa+0x6e>
 800573c:	5cf9      	ldrb	r1, [r7, r3]
 800573e:	7814      	ldrb	r4, [r2, #0]
 8005740:	54fc      	strb	r4, [r7, r3]
 8005742:	f802 1901 	strb.w	r1, [r2], #-1
 8005746:	3301      	adds	r3, #1
 8005748:	e7f5      	b.n	8005736 <__utoa+0x5a>
 800574a:	4638      	mov	r0, r7
 800574c:	b00b      	add	sp, #44	; 0x2c
 800574e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005750:	080058d0 	.word	0x080058d0

08005754 <_init>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr

08005760 <_fini>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr

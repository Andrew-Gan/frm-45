
SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080072a0  080072a0  000172a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d8  080074d8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080074d8  080074d8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074d8  080074d8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080074e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e34  20000080  08007560  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eb4  08007560  00020eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139f8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029ca  00000000  00000000  00033aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  00036470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  00036f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010dd1  00000000  00000000  00037958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c6e8  00000000  00000000  00048729  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005238a  00000000  00000000  00054e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a719b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002acc  00000000  00000000  000a7218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007288 	.word	0x08007288

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08007288 	.word	0x08007288

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_d2uiz>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	2200      	movs	r2, #0
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <__aeabi_d2uiz+0x38>)
 8000236:	0004      	movs	r4, r0
 8000238:	000d      	movs	r5, r1
 800023a:	f000 fe6d 	bl	8000f18 <__aeabi_dcmpge>
 800023e:	2800      	cmp	r0, #0
 8000240:	d104      	bne.n	800024c <__aeabi_d2uiz+0x1c>
 8000242:	0020      	movs	r0, r4
 8000244:	0029      	movs	r1, r5
 8000246:	f000 fdcb 	bl	8000de0 <__aeabi_d2iz>
 800024a:	bd70      	pop	{r4, r5, r6, pc}
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <__aeabi_d2uiz+0x38>)
 800024e:	2200      	movs	r2, #0
 8000250:	0020      	movs	r0, r4
 8000252:	0029      	movs	r1, r5
 8000254:	f000 fa7c 	bl	8000750 <__aeabi_dsub>
 8000258:	f000 fdc2 	bl	8000de0 <__aeabi_d2iz>
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	061b      	lsls	r3, r3, #24
 8000260:	469c      	mov	ip, r3
 8000262:	4460      	add	r0, ip
 8000264:	e7f1      	b.n	800024a <__aeabi_d2uiz+0x1a>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	41e00000 	.word	0x41e00000

0800026c <__aeabi_dmul>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	4657      	mov	r7, sl
 8000270:	46de      	mov	lr, fp
 8000272:	464e      	mov	r6, r9
 8000274:	4645      	mov	r5, r8
 8000276:	b5e0      	push	{r5, r6, r7, lr}
 8000278:	4683      	mov	fp, r0
 800027a:	0006      	movs	r6, r0
 800027c:	030f      	lsls	r7, r1, #12
 800027e:	0048      	lsls	r0, r1, #1
 8000280:	b087      	sub	sp, #28
 8000282:	4692      	mov	sl, r2
 8000284:	001d      	movs	r5, r3
 8000286:	0b3f      	lsrs	r7, r7, #12
 8000288:	0d40      	lsrs	r0, r0, #21
 800028a:	0fcc      	lsrs	r4, r1, #31
 800028c:	2800      	cmp	r0, #0
 800028e:	d100      	bne.n	8000292 <__aeabi_dmul+0x26>
 8000290:	e06f      	b.n	8000372 <__aeabi_dmul+0x106>
 8000292:	4bde      	ldr	r3, [pc, #888]	; (800060c <__aeabi_dmul+0x3a0>)
 8000294:	4298      	cmp	r0, r3
 8000296:	d038      	beq.n	800030a <__aeabi_dmul+0x9e>
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	00ff      	lsls	r7, r7, #3
 800029c:	041b      	lsls	r3, r3, #16
 800029e:	431f      	orrs	r7, r3
 80002a0:	0f73      	lsrs	r3, r6, #29
 80002a2:	433b      	orrs	r3, r7
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	4bda      	ldr	r3, [pc, #872]	; (8000610 <__aeabi_dmul+0x3a4>)
 80002a8:	2700      	movs	r7, #0
 80002aa:	4699      	mov	r9, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	469b      	mov	fp, r3
 80002b0:	00f6      	lsls	r6, r6, #3
 80002b2:	4481      	add	r9, r0
 80002b4:	032b      	lsls	r3, r5, #12
 80002b6:	0069      	lsls	r1, r5, #1
 80002b8:	0b1b      	lsrs	r3, r3, #12
 80002ba:	4652      	mov	r2, sl
 80002bc:	4698      	mov	r8, r3
 80002be:	0d49      	lsrs	r1, r1, #21
 80002c0:	0fed      	lsrs	r5, r5, #31
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d100      	bne.n	80002c8 <__aeabi_dmul+0x5c>
 80002c6:	e085      	b.n	80003d4 <__aeabi_dmul+0x168>
 80002c8:	4bd0      	ldr	r3, [pc, #832]	; (800060c <__aeabi_dmul+0x3a0>)
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d100      	bne.n	80002d0 <__aeabi_dmul+0x64>
 80002ce:	e073      	b.n	80003b8 <__aeabi_dmul+0x14c>
 80002d0:	4643      	mov	r3, r8
 80002d2:	00da      	lsls	r2, r3, #3
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	041b      	lsls	r3, r3, #16
 80002d8:	4313      	orrs	r3, r2
 80002da:	4652      	mov	r2, sl
 80002dc:	48cc      	ldr	r0, [pc, #816]	; (8000610 <__aeabi_dmul+0x3a4>)
 80002de:	0f52      	lsrs	r2, r2, #29
 80002e0:	4684      	mov	ip, r0
 80002e2:	4313      	orrs	r3, r2
 80002e4:	4652      	mov	r2, sl
 80002e6:	2000      	movs	r0, #0
 80002e8:	4461      	add	r1, ip
 80002ea:	00d2      	lsls	r2, r2, #3
 80002ec:	4489      	add	r9, r1
 80002ee:	0021      	movs	r1, r4
 80002f0:	4069      	eors	r1, r5
 80002f2:	9100      	str	r1, [sp, #0]
 80002f4:	468c      	mov	ip, r1
 80002f6:	2101      	movs	r1, #1
 80002f8:	4449      	add	r1, r9
 80002fa:	468a      	mov	sl, r1
 80002fc:	2f0f      	cmp	r7, #15
 80002fe:	d900      	bls.n	8000302 <__aeabi_dmul+0x96>
 8000300:	e090      	b.n	8000424 <__aeabi_dmul+0x1b8>
 8000302:	49c4      	ldr	r1, [pc, #784]	; (8000614 <__aeabi_dmul+0x3a8>)
 8000304:	00bf      	lsls	r7, r7, #2
 8000306:	59cf      	ldr	r7, [r1, r7]
 8000308:	46bf      	mov	pc, r7
 800030a:	465b      	mov	r3, fp
 800030c:	433b      	orrs	r3, r7
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	d000      	beq.n	8000314 <__aeabi_dmul+0xa8>
 8000312:	e16a      	b.n	80005ea <__aeabi_dmul+0x37e>
 8000314:	2302      	movs	r3, #2
 8000316:	2708      	movs	r7, #8
 8000318:	2600      	movs	r6, #0
 800031a:	4681      	mov	r9, r0
 800031c:	469b      	mov	fp, r3
 800031e:	e7c9      	b.n	80002b4 <__aeabi_dmul+0x48>
 8000320:	0032      	movs	r2, r6
 8000322:	4658      	mov	r0, fp
 8000324:	9b01      	ldr	r3, [sp, #4]
 8000326:	4661      	mov	r1, ip
 8000328:	9100      	str	r1, [sp, #0]
 800032a:	2802      	cmp	r0, #2
 800032c:	d100      	bne.n	8000330 <__aeabi_dmul+0xc4>
 800032e:	e075      	b.n	800041c <__aeabi_dmul+0x1b0>
 8000330:	2803      	cmp	r0, #3
 8000332:	d100      	bne.n	8000336 <__aeabi_dmul+0xca>
 8000334:	e1fe      	b.n	8000734 <__aeabi_dmul+0x4c8>
 8000336:	2801      	cmp	r0, #1
 8000338:	d000      	beq.n	800033c <__aeabi_dmul+0xd0>
 800033a:	e12c      	b.n	8000596 <__aeabi_dmul+0x32a>
 800033c:	2300      	movs	r3, #0
 800033e:	2700      	movs	r7, #0
 8000340:	2600      	movs	r6, #0
 8000342:	2500      	movs	r5, #0
 8000344:	033f      	lsls	r7, r7, #12
 8000346:	0d2a      	lsrs	r2, r5, #20
 8000348:	0b3f      	lsrs	r7, r7, #12
 800034a:	48b3      	ldr	r0, [pc, #716]	; (8000618 <__aeabi_dmul+0x3ac>)
 800034c:	0512      	lsls	r2, r2, #20
 800034e:	433a      	orrs	r2, r7
 8000350:	4002      	ands	r2, r0
 8000352:	051b      	lsls	r3, r3, #20
 8000354:	4313      	orrs	r3, r2
 8000356:	9a00      	ldr	r2, [sp, #0]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	07d1      	lsls	r1, r2, #31
 800035c:	085b      	lsrs	r3, r3, #1
 800035e:	430b      	orrs	r3, r1
 8000360:	0030      	movs	r0, r6
 8000362:	0019      	movs	r1, r3
 8000364:	b007      	add	sp, #28
 8000366:	bc3c      	pop	{r2, r3, r4, r5}
 8000368:	4690      	mov	r8, r2
 800036a:	4699      	mov	r9, r3
 800036c:	46a2      	mov	sl, r4
 800036e:	46ab      	mov	fp, r5
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000372:	465b      	mov	r3, fp
 8000374:	433b      	orrs	r3, r7
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	d100      	bne.n	800037c <__aeabi_dmul+0x110>
 800037a:	e12f      	b.n	80005dc <__aeabi_dmul+0x370>
 800037c:	2f00      	cmp	r7, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_dmul+0x116>
 8000380:	e1a5      	b.n	80006ce <__aeabi_dmul+0x462>
 8000382:	0038      	movs	r0, r7
 8000384:	f000 fdd2 	bl	8000f2c <__clzsi2>
 8000388:	0003      	movs	r3, r0
 800038a:	3b0b      	subs	r3, #11
 800038c:	2b1c      	cmp	r3, #28
 800038e:	dd00      	ble.n	8000392 <__aeabi_dmul+0x126>
 8000390:	e196      	b.n	80006c0 <__aeabi_dmul+0x454>
 8000392:	221d      	movs	r2, #29
 8000394:	1ad3      	subs	r3, r2, r3
 8000396:	465a      	mov	r2, fp
 8000398:	0001      	movs	r1, r0
 800039a:	40da      	lsrs	r2, r3
 800039c:	465e      	mov	r6, fp
 800039e:	3908      	subs	r1, #8
 80003a0:	408f      	lsls	r7, r1
 80003a2:	0013      	movs	r3, r2
 80003a4:	408e      	lsls	r6, r1
 80003a6:	433b      	orrs	r3, r7
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4b9c      	ldr	r3, [pc, #624]	; (800061c <__aeabi_dmul+0x3b0>)
 80003ac:	2700      	movs	r7, #0
 80003ae:	1a1b      	subs	r3, r3, r0
 80003b0:	4699      	mov	r9, r3
 80003b2:	2300      	movs	r3, #0
 80003b4:	469b      	mov	fp, r3
 80003b6:	e77d      	b.n	80002b4 <__aeabi_dmul+0x48>
 80003b8:	4641      	mov	r1, r8
 80003ba:	4653      	mov	r3, sl
 80003bc:	430b      	orrs	r3, r1
 80003be:	4993      	ldr	r1, [pc, #588]	; (800060c <__aeabi_dmul+0x3a0>)
 80003c0:	468c      	mov	ip, r1
 80003c2:	44e1      	add	r9, ip
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d000      	beq.n	80003ca <__aeabi_dmul+0x15e>
 80003c8:	e11a      	b.n	8000600 <__aeabi_dmul+0x394>
 80003ca:	2202      	movs	r2, #2
 80003cc:	2002      	movs	r0, #2
 80003ce:	4317      	orrs	r7, r2
 80003d0:	2200      	movs	r2, #0
 80003d2:	e78c      	b.n	80002ee <__aeabi_dmul+0x82>
 80003d4:	4313      	orrs	r3, r2
 80003d6:	d100      	bne.n	80003da <__aeabi_dmul+0x16e>
 80003d8:	e10d      	b.n	80005f6 <__aeabi_dmul+0x38a>
 80003da:	4643      	mov	r3, r8
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d100      	bne.n	80003e2 <__aeabi_dmul+0x176>
 80003e0:	e181      	b.n	80006e6 <__aeabi_dmul+0x47a>
 80003e2:	4640      	mov	r0, r8
 80003e4:	f000 fda2 	bl	8000f2c <__clzsi2>
 80003e8:	0002      	movs	r2, r0
 80003ea:	3a0b      	subs	r2, #11
 80003ec:	2a1c      	cmp	r2, #28
 80003ee:	dd00      	ble.n	80003f2 <__aeabi_dmul+0x186>
 80003f0:	e172      	b.n	80006d8 <__aeabi_dmul+0x46c>
 80003f2:	0001      	movs	r1, r0
 80003f4:	4643      	mov	r3, r8
 80003f6:	3908      	subs	r1, #8
 80003f8:	408b      	lsls	r3, r1
 80003fa:	4698      	mov	r8, r3
 80003fc:	231d      	movs	r3, #29
 80003fe:	1a9a      	subs	r2, r3, r2
 8000400:	4653      	mov	r3, sl
 8000402:	40d3      	lsrs	r3, r2
 8000404:	001a      	movs	r2, r3
 8000406:	4643      	mov	r3, r8
 8000408:	4313      	orrs	r3, r2
 800040a:	4652      	mov	r2, sl
 800040c:	408a      	lsls	r2, r1
 800040e:	4649      	mov	r1, r9
 8000410:	1a08      	subs	r0, r1, r0
 8000412:	4982      	ldr	r1, [pc, #520]	; (800061c <__aeabi_dmul+0x3b0>)
 8000414:	4689      	mov	r9, r1
 8000416:	4481      	add	r9, r0
 8000418:	2000      	movs	r0, #0
 800041a:	e768      	b.n	80002ee <__aeabi_dmul+0x82>
 800041c:	4b7b      	ldr	r3, [pc, #492]	; (800060c <__aeabi_dmul+0x3a0>)
 800041e:	2700      	movs	r7, #0
 8000420:	2600      	movs	r6, #0
 8000422:	e78e      	b.n	8000342 <__aeabi_dmul+0xd6>
 8000424:	0c14      	lsrs	r4, r2, #16
 8000426:	0412      	lsls	r2, r2, #16
 8000428:	0c12      	lsrs	r2, r2, #16
 800042a:	0011      	movs	r1, r2
 800042c:	0c37      	lsrs	r7, r6, #16
 800042e:	0436      	lsls	r6, r6, #16
 8000430:	0c35      	lsrs	r5, r6, #16
 8000432:	4379      	muls	r1, r7
 8000434:	0028      	movs	r0, r5
 8000436:	468c      	mov	ip, r1
 8000438:	002e      	movs	r6, r5
 800043a:	4360      	muls	r0, r4
 800043c:	4460      	add	r0, ip
 800043e:	4683      	mov	fp, r0
 8000440:	4356      	muls	r6, r2
 8000442:	0021      	movs	r1, r4
 8000444:	0c30      	lsrs	r0, r6, #16
 8000446:	4680      	mov	r8, r0
 8000448:	4658      	mov	r0, fp
 800044a:	4379      	muls	r1, r7
 800044c:	4440      	add	r0, r8
 800044e:	9102      	str	r1, [sp, #8]
 8000450:	4584      	cmp	ip, r0
 8000452:	d906      	bls.n	8000462 <__aeabi_dmul+0x1f6>
 8000454:	4688      	mov	r8, r1
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	0249      	lsls	r1, r1, #9
 800045a:	468c      	mov	ip, r1
 800045c:	44e0      	add	r8, ip
 800045e:	4641      	mov	r1, r8
 8000460:	9102      	str	r1, [sp, #8]
 8000462:	0436      	lsls	r6, r6, #16
 8000464:	0c01      	lsrs	r1, r0, #16
 8000466:	0c36      	lsrs	r6, r6, #16
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	468b      	mov	fp, r1
 800046c:	1981      	adds	r1, r0, r6
 800046e:	0c1e      	lsrs	r6, r3, #16
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	0c1b      	lsrs	r3, r3, #16
 8000474:	9103      	str	r1, [sp, #12]
 8000476:	0019      	movs	r1, r3
 8000478:	4379      	muls	r1, r7
 800047a:	468c      	mov	ip, r1
 800047c:	0028      	movs	r0, r5
 800047e:	4375      	muls	r5, r6
 8000480:	4465      	add	r5, ip
 8000482:	46a8      	mov	r8, r5
 8000484:	4358      	muls	r0, r3
 8000486:	0c05      	lsrs	r5, r0, #16
 8000488:	4445      	add	r5, r8
 800048a:	4377      	muls	r7, r6
 800048c:	42a9      	cmp	r1, r5
 800048e:	d903      	bls.n	8000498 <__aeabi_dmul+0x22c>
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0249      	lsls	r1, r1, #9
 8000494:	468c      	mov	ip, r1
 8000496:	4467      	add	r7, ip
 8000498:	0c29      	lsrs	r1, r5, #16
 800049a:	468c      	mov	ip, r1
 800049c:	0039      	movs	r1, r7
 800049e:	0400      	lsls	r0, r0, #16
 80004a0:	0c00      	lsrs	r0, r0, #16
 80004a2:	042d      	lsls	r5, r5, #16
 80004a4:	182d      	adds	r5, r5, r0
 80004a6:	4461      	add	r1, ip
 80004a8:	44ab      	add	fp, r5
 80004aa:	9105      	str	r1, [sp, #20]
 80004ac:	4659      	mov	r1, fp
 80004ae:	9104      	str	r1, [sp, #16]
 80004b0:	9901      	ldr	r1, [sp, #4]
 80004b2:	040f      	lsls	r7, r1, #16
 80004b4:	0c3f      	lsrs	r7, r7, #16
 80004b6:	0c08      	lsrs	r0, r1, #16
 80004b8:	0039      	movs	r1, r7
 80004ba:	4351      	muls	r1, r2
 80004bc:	4342      	muls	r2, r0
 80004be:	4690      	mov	r8, r2
 80004c0:	0002      	movs	r2, r0
 80004c2:	468c      	mov	ip, r1
 80004c4:	0c09      	lsrs	r1, r1, #16
 80004c6:	468b      	mov	fp, r1
 80004c8:	4362      	muls	r2, r4
 80004ca:	437c      	muls	r4, r7
 80004cc:	4444      	add	r4, r8
 80004ce:	445c      	add	r4, fp
 80004d0:	45a0      	cmp	r8, r4
 80004d2:	d903      	bls.n	80004dc <__aeabi_dmul+0x270>
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0249      	lsls	r1, r1, #9
 80004d8:	4688      	mov	r8, r1
 80004da:	4442      	add	r2, r8
 80004dc:	0c21      	lsrs	r1, r4, #16
 80004de:	4688      	mov	r8, r1
 80004e0:	4661      	mov	r1, ip
 80004e2:	0409      	lsls	r1, r1, #16
 80004e4:	0c09      	lsrs	r1, r1, #16
 80004e6:	468c      	mov	ip, r1
 80004e8:	0039      	movs	r1, r7
 80004ea:	4359      	muls	r1, r3
 80004ec:	4343      	muls	r3, r0
 80004ee:	4370      	muls	r0, r6
 80004f0:	437e      	muls	r6, r7
 80004f2:	0c0f      	lsrs	r7, r1, #16
 80004f4:	18f6      	adds	r6, r6, r3
 80004f6:	0424      	lsls	r4, r4, #16
 80004f8:	19be      	adds	r6, r7, r6
 80004fa:	4464      	add	r4, ip
 80004fc:	4442      	add	r2, r8
 80004fe:	468c      	mov	ip, r1
 8000500:	42b3      	cmp	r3, r6
 8000502:	d903      	bls.n	800050c <__aeabi_dmul+0x2a0>
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	025b      	lsls	r3, r3, #9
 8000508:	4698      	mov	r8, r3
 800050a:	4440      	add	r0, r8
 800050c:	9b02      	ldr	r3, [sp, #8]
 800050e:	4661      	mov	r1, ip
 8000510:	4698      	mov	r8, r3
 8000512:	9b04      	ldr	r3, [sp, #16]
 8000514:	0437      	lsls	r7, r6, #16
 8000516:	4443      	add	r3, r8
 8000518:	469b      	mov	fp, r3
 800051a:	45ab      	cmp	fp, r5
 800051c:	41ad      	sbcs	r5, r5
 800051e:	426b      	negs	r3, r5
 8000520:	040d      	lsls	r5, r1, #16
 8000522:	9905      	ldr	r1, [sp, #20]
 8000524:	0c2d      	lsrs	r5, r5, #16
 8000526:	468c      	mov	ip, r1
 8000528:	197f      	adds	r7, r7, r5
 800052a:	4467      	add	r7, ip
 800052c:	18fd      	adds	r5, r7, r3
 800052e:	46a8      	mov	r8, r5
 8000530:	465d      	mov	r5, fp
 8000532:	192d      	adds	r5, r5, r4
 8000534:	42a5      	cmp	r5, r4
 8000536:	41a4      	sbcs	r4, r4
 8000538:	4693      	mov	fp, r2
 800053a:	4264      	negs	r4, r4
 800053c:	46a4      	mov	ip, r4
 800053e:	44c3      	add	fp, r8
 8000540:	44dc      	add	ip, fp
 8000542:	428f      	cmp	r7, r1
 8000544:	41bf      	sbcs	r7, r7
 8000546:	4598      	cmp	r8, r3
 8000548:	419b      	sbcs	r3, r3
 800054a:	4593      	cmp	fp, r2
 800054c:	4192      	sbcs	r2, r2
 800054e:	45a4      	cmp	ip, r4
 8000550:	41a4      	sbcs	r4, r4
 8000552:	425b      	negs	r3, r3
 8000554:	427f      	negs	r7, r7
 8000556:	431f      	orrs	r7, r3
 8000558:	0c36      	lsrs	r6, r6, #16
 800055a:	4252      	negs	r2, r2
 800055c:	4264      	negs	r4, r4
 800055e:	19bf      	adds	r7, r7, r6
 8000560:	4322      	orrs	r2, r4
 8000562:	18bf      	adds	r7, r7, r2
 8000564:	4662      	mov	r2, ip
 8000566:	1838      	adds	r0, r7, r0
 8000568:	0243      	lsls	r3, r0, #9
 800056a:	0dd2      	lsrs	r2, r2, #23
 800056c:	9903      	ldr	r1, [sp, #12]
 800056e:	4313      	orrs	r3, r2
 8000570:	026a      	lsls	r2, r5, #9
 8000572:	430a      	orrs	r2, r1
 8000574:	1e50      	subs	r0, r2, #1
 8000576:	4182      	sbcs	r2, r0
 8000578:	4661      	mov	r1, ip
 800057a:	0ded      	lsrs	r5, r5, #23
 800057c:	432a      	orrs	r2, r5
 800057e:	024e      	lsls	r6, r1, #9
 8000580:	4332      	orrs	r2, r6
 8000582:	01d9      	lsls	r1, r3, #7
 8000584:	d400      	bmi.n	8000588 <__aeabi_dmul+0x31c>
 8000586:	e0b3      	b.n	80006f0 <__aeabi_dmul+0x484>
 8000588:	2601      	movs	r6, #1
 800058a:	0850      	lsrs	r0, r2, #1
 800058c:	4032      	ands	r2, r6
 800058e:	4302      	orrs	r2, r0
 8000590:	07de      	lsls	r6, r3, #31
 8000592:	4332      	orrs	r2, r6
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	4c22      	ldr	r4, [pc, #136]	; (8000620 <__aeabi_dmul+0x3b4>)
 8000598:	4454      	add	r4, sl
 800059a:	2c00      	cmp	r4, #0
 800059c:	dd62      	ble.n	8000664 <__aeabi_dmul+0x3f8>
 800059e:	0751      	lsls	r1, r2, #29
 80005a0:	d009      	beq.n	80005b6 <__aeabi_dmul+0x34a>
 80005a2:	200f      	movs	r0, #15
 80005a4:	4010      	ands	r0, r2
 80005a6:	2804      	cmp	r0, #4
 80005a8:	d005      	beq.n	80005b6 <__aeabi_dmul+0x34a>
 80005aa:	1d10      	adds	r0, r2, #4
 80005ac:	4290      	cmp	r0, r2
 80005ae:	4192      	sbcs	r2, r2
 80005b0:	4252      	negs	r2, r2
 80005b2:	189b      	adds	r3, r3, r2
 80005b4:	0002      	movs	r2, r0
 80005b6:	01d9      	lsls	r1, r3, #7
 80005b8:	d504      	bpl.n	80005c4 <__aeabi_dmul+0x358>
 80005ba:	2480      	movs	r4, #128	; 0x80
 80005bc:	4819      	ldr	r0, [pc, #100]	; (8000624 <__aeabi_dmul+0x3b8>)
 80005be:	00e4      	lsls	r4, r4, #3
 80005c0:	4003      	ands	r3, r0
 80005c2:	4454      	add	r4, sl
 80005c4:	4818      	ldr	r0, [pc, #96]	; (8000628 <__aeabi_dmul+0x3bc>)
 80005c6:	4284      	cmp	r4, r0
 80005c8:	dd00      	ble.n	80005cc <__aeabi_dmul+0x360>
 80005ca:	e727      	b.n	800041c <__aeabi_dmul+0x1b0>
 80005cc:	075e      	lsls	r6, r3, #29
 80005ce:	025b      	lsls	r3, r3, #9
 80005d0:	08d2      	lsrs	r2, r2, #3
 80005d2:	0b1f      	lsrs	r7, r3, #12
 80005d4:	0563      	lsls	r3, r4, #21
 80005d6:	4316      	orrs	r6, r2
 80005d8:	0d5b      	lsrs	r3, r3, #21
 80005da:	e6b2      	b.n	8000342 <__aeabi_dmul+0xd6>
 80005dc:	2300      	movs	r3, #0
 80005de:	4699      	mov	r9, r3
 80005e0:	3301      	adds	r3, #1
 80005e2:	2704      	movs	r7, #4
 80005e4:	2600      	movs	r6, #0
 80005e6:	469b      	mov	fp, r3
 80005e8:	e664      	b.n	80002b4 <__aeabi_dmul+0x48>
 80005ea:	2303      	movs	r3, #3
 80005ec:	9701      	str	r7, [sp, #4]
 80005ee:	4681      	mov	r9, r0
 80005f0:	270c      	movs	r7, #12
 80005f2:	469b      	mov	fp, r3
 80005f4:	e65e      	b.n	80002b4 <__aeabi_dmul+0x48>
 80005f6:	2201      	movs	r2, #1
 80005f8:	2001      	movs	r0, #1
 80005fa:	4317      	orrs	r7, r2
 80005fc:	2200      	movs	r2, #0
 80005fe:	e676      	b.n	80002ee <__aeabi_dmul+0x82>
 8000600:	2303      	movs	r3, #3
 8000602:	2003      	movs	r0, #3
 8000604:	431f      	orrs	r7, r3
 8000606:	4643      	mov	r3, r8
 8000608:	e671      	b.n	80002ee <__aeabi_dmul+0x82>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	000007ff 	.word	0x000007ff
 8000610:	fffffc01 	.word	0xfffffc01
 8000614:	08007394 	.word	0x08007394
 8000618:	800fffff 	.word	0x800fffff
 800061c:	fffffc0d 	.word	0xfffffc0d
 8000620:	000003ff 	.word	0x000003ff
 8000624:	feffffff 	.word	0xfeffffff
 8000628:	000007fe 	.word	0x000007fe
 800062c:	2300      	movs	r3, #0
 800062e:	2780      	movs	r7, #128	; 0x80
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	033f      	lsls	r7, r7, #12
 8000634:	2600      	movs	r6, #0
 8000636:	4b43      	ldr	r3, [pc, #268]	; (8000744 <__aeabi_dmul+0x4d8>)
 8000638:	e683      	b.n	8000342 <__aeabi_dmul+0xd6>
 800063a:	9b01      	ldr	r3, [sp, #4]
 800063c:	0032      	movs	r2, r6
 800063e:	46a4      	mov	ip, r4
 8000640:	4658      	mov	r0, fp
 8000642:	e670      	b.n	8000326 <__aeabi_dmul+0xba>
 8000644:	46ac      	mov	ip, r5
 8000646:	e66e      	b.n	8000326 <__aeabi_dmul+0xba>
 8000648:	2780      	movs	r7, #128	; 0x80
 800064a:	9901      	ldr	r1, [sp, #4]
 800064c:	033f      	lsls	r7, r7, #12
 800064e:	4239      	tst	r1, r7
 8000650:	d02d      	beq.n	80006ae <__aeabi_dmul+0x442>
 8000652:	423b      	tst	r3, r7
 8000654:	d12b      	bne.n	80006ae <__aeabi_dmul+0x442>
 8000656:	431f      	orrs	r7, r3
 8000658:	033f      	lsls	r7, r7, #12
 800065a:	0b3f      	lsrs	r7, r7, #12
 800065c:	9500      	str	r5, [sp, #0]
 800065e:	0016      	movs	r6, r2
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <__aeabi_dmul+0x4d8>)
 8000662:	e66e      	b.n	8000342 <__aeabi_dmul+0xd6>
 8000664:	2501      	movs	r5, #1
 8000666:	1b2d      	subs	r5, r5, r4
 8000668:	2d38      	cmp	r5, #56	; 0x38
 800066a:	dd00      	ble.n	800066e <__aeabi_dmul+0x402>
 800066c:	e666      	b.n	800033c <__aeabi_dmul+0xd0>
 800066e:	2d1f      	cmp	r5, #31
 8000670:	dc40      	bgt.n	80006f4 <__aeabi_dmul+0x488>
 8000672:	4835      	ldr	r0, [pc, #212]	; (8000748 <__aeabi_dmul+0x4dc>)
 8000674:	001c      	movs	r4, r3
 8000676:	4450      	add	r0, sl
 8000678:	0016      	movs	r6, r2
 800067a:	4082      	lsls	r2, r0
 800067c:	4084      	lsls	r4, r0
 800067e:	40ee      	lsrs	r6, r5
 8000680:	1e50      	subs	r0, r2, #1
 8000682:	4182      	sbcs	r2, r0
 8000684:	4334      	orrs	r4, r6
 8000686:	4314      	orrs	r4, r2
 8000688:	40eb      	lsrs	r3, r5
 800068a:	0762      	lsls	r2, r4, #29
 800068c:	d009      	beq.n	80006a2 <__aeabi_dmul+0x436>
 800068e:	220f      	movs	r2, #15
 8000690:	4022      	ands	r2, r4
 8000692:	2a04      	cmp	r2, #4
 8000694:	d005      	beq.n	80006a2 <__aeabi_dmul+0x436>
 8000696:	0022      	movs	r2, r4
 8000698:	1d14      	adds	r4, r2, #4
 800069a:	4294      	cmp	r4, r2
 800069c:	4180      	sbcs	r0, r0
 800069e:	4240      	negs	r0, r0
 80006a0:	181b      	adds	r3, r3, r0
 80006a2:	021a      	lsls	r2, r3, #8
 80006a4:	d53e      	bpl.n	8000724 <__aeabi_dmul+0x4b8>
 80006a6:	2301      	movs	r3, #1
 80006a8:	2700      	movs	r7, #0
 80006aa:	2600      	movs	r6, #0
 80006ac:	e649      	b.n	8000342 <__aeabi_dmul+0xd6>
 80006ae:	2780      	movs	r7, #128	; 0x80
 80006b0:	9b01      	ldr	r3, [sp, #4]
 80006b2:	033f      	lsls	r7, r7, #12
 80006b4:	431f      	orrs	r7, r3
 80006b6:	033f      	lsls	r7, r7, #12
 80006b8:	0b3f      	lsrs	r7, r7, #12
 80006ba:	9400      	str	r4, [sp, #0]
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <__aeabi_dmul+0x4d8>)
 80006be:	e640      	b.n	8000342 <__aeabi_dmul+0xd6>
 80006c0:	0003      	movs	r3, r0
 80006c2:	465a      	mov	r2, fp
 80006c4:	3b28      	subs	r3, #40	; 0x28
 80006c6:	409a      	lsls	r2, r3
 80006c8:	2600      	movs	r6, #0
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	e66d      	b.n	80003aa <__aeabi_dmul+0x13e>
 80006ce:	4658      	mov	r0, fp
 80006d0:	f000 fc2c 	bl	8000f2c <__clzsi2>
 80006d4:	3020      	adds	r0, #32
 80006d6:	e657      	b.n	8000388 <__aeabi_dmul+0x11c>
 80006d8:	0003      	movs	r3, r0
 80006da:	4652      	mov	r2, sl
 80006dc:	3b28      	subs	r3, #40	; 0x28
 80006de:	409a      	lsls	r2, r3
 80006e0:	0013      	movs	r3, r2
 80006e2:	2200      	movs	r2, #0
 80006e4:	e693      	b.n	800040e <__aeabi_dmul+0x1a2>
 80006e6:	4650      	mov	r0, sl
 80006e8:	f000 fc20 	bl	8000f2c <__clzsi2>
 80006ec:	3020      	adds	r0, #32
 80006ee:	e67b      	b.n	80003e8 <__aeabi_dmul+0x17c>
 80006f0:	46ca      	mov	sl, r9
 80006f2:	e750      	b.n	8000596 <__aeabi_dmul+0x32a>
 80006f4:	201f      	movs	r0, #31
 80006f6:	001e      	movs	r6, r3
 80006f8:	4240      	negs	r0, r0
 80006fa:	1b04      	subs	r4, r0, r4
 80006fc:	40e6      	lsrs	r6, r4
 80006fe:	2d20      	cmp	r5, #32
 8000700:	d003      	beq.n	800070a <__aeabi_dmul+0x49e>
 8000702:	4c12      	ldr	r4, [pc, #72]	; (800074c <__aeabi_dmul+0x4e0>)
 8000704:	4454      	add	r4, sl
 8000706:	40a3      	lsls	r3, r4
 8000708:	431a      	orrs	r2, r3
 800070a:	1e50      	subs	r0, r2, #1
 800070c:	4182      	sbcs	r2, r0
 800070e:	4332      	orrs	r2, r6
 8000710:	2607      	movs	r6, #7
 8000712:	2700      	movs	r7, #0
 8000714:	4016      	ands	r6, r2
 8000716:	d009      	beq.n	800072c <__aeabi_dmul+0x4c0>
 8000718:	200f      	movs	r0, #15
 800071a:	2300      	movs	r3, #0
 800071c:	4010      	ands	r0, r2
 800071e:	0014      	movs	r4, r2
 8000720:	2804      	cmp	r0, #4
 8000722:	d1b9      	bne.n	8000698 <__aeabi_dmul+0x42c>
 8000724:	0022      	movs	r2, r4
 8000726:	075e      	lsls	r6, r3, #29
 8000728:	025b      	lsls	r3, r3, #9
 800072a:	0b1f      	lsrs	r7, r3, #12
 800072c:	08d2      	lsrs	r2, r2, #3
 800072e:	4316      	orrs	r6, r2
 8000730:	2300      	movs	r3, #0
 8000732:	e606      	b.n	8000342 <__aeabi_dmul+0xd6>
 8000734:	2780      	movs	r7, #128	; 0x80
 8000736:	033f      	lsls	r7, r7, #12
 8000738:	431f      	orrs	r7, r3
 800073a:	033f      	lsls	r7, r7, #12
 800073c:	0b3f      	lsrs	r7, r7, #12
 800073e:	0016      	movs	r6, r2
 8000740:	4b00      	ldr	r3, [pc, #0]	; (8000744 <__aeabi_dmul+0x4d8>)
 8000742:	e5fe      	b.n	8000342 <__aeabi_dmul+0xd6>
 8000744:	000007ff 	.word	0x000007ff
 8000748:	0000041e 	.word	0x0000041e
 800074c:	0000043e 	.word	0x0000043e

08000750 <__aeabi_dsub>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	4657      	mov	r7, sl
 8000754:	464e      	mov	r6, r9
 8000756:	4645      	mov	r5, r8
 8000758:	46de      	mov	lr, fp
 800075a:	000c      	movs	r4, r1
 800075c:	0309      	lsls	r1, r1, #12
 800075e:	b5e0      	push	{r5, r6, r7, lr}
 8000760:	0a49      	lsrs	r1, r1, #9
 8000762:	0f46      	lsrs	r6, r0, #29
 8000764:	005f      	lsls	r7, r3, #1
 8000766:	4331      	orrs	r1, r6
 8000768:	031e      	lsls	r6, r3, #12
 800076a:	0fdb      	lsrs	r3, r3, #31
 800076c:	0a76      	lsrs	r6, r6, #9
 800076e:	469b      	mov	fp, r3
 8000770:	0f53      	lsrs	r3, r2, #29
 8000772:	4333      	orrs	r3, r6
 8000774:	4ec8      	ldr	r6, [pc, #800]	; (8000a98 <__aeabi_dsub+0x348>)
 8000776:	0065      	lsls	r5, r4, #1
 8000778:	00c0      	lsls	r0, r0, #3
 800077a:	0fe4      	lsrs	r4, r4, #31
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	0d6d      	lsrs	r5, r5, #21
 8000780:	46a2      	mov	sl, r4
 8000782:	4681      	mov	r9, r0
 8000784:	0d7f      	lsrs	r7, r7, #21
 8000786:	469c      	mov	ip, r3
 8000788:	4690      	mov	r8, r2
 800078a:	42b7      	cmp	r7, r6
 800078c:	d100      	bne.n	8000790 <__aeabi_dsub+0x40>
 800078e:	e0b9      	b.n	8000904 <__aeabi_dsub+0x1b4>
 8000790:	465b      	mov	r3, fp
 8000792:	2601      	movs	r6, #1
 8000794:	4073      	eors	r3, r6
 8000796:	469b      	mov	fp, r3
 8000798:	1bee      	subs	r6, r5, r7
 800079a:	45a3      	cmp	fp, r4
 800079c:	d100      	bne.n	80007a0 <__aeabi_dsub+0x50>
 800079e:	e083      	b.n	80008a8 <__aeabi_dsub+0x158>
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	dd63      	ble.n	800086c <__aeabi_dsub+0x11c>
 80007a4:	2f00      	cmp	r7, #0
 80007a6:	d000      	beq.n	80007aa <__aeabi_dsub+0x5a>
 80007a8:	e0b1      	b.n	800090e <__aeabi_dsub+0x1be>
 80007aa:	4663      	mov	r3, ip
 80007ac:	4313      	orrs	r3, r2
 80007ae:	d100      	bne.n	80007b2 <__aeabi_dsub+0x62>
 80007b0:	e123      	b.n	80009fa <__aeabi_dsub+0x2aa>
 80007b2:	1e73      	subs	r3, r6, #1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d000      	beq.n	80007ba <__aeabi_dsub+0x6a>
 80007b8:	e1ba      	b.n	8000b30 <__aeabi_dsub+0x3e0>
 80007ba:	1a86      	subs	r6, r0, r2
 80007bc:	4663      	mov	r3, ip
 80007be:	42b0      	cmp	r0, r6
 80007c0:	4180      	sbcs	r0, r0
 80007c2:	2501      	movs	r5, #1
 80007c4:	1ac9      	subs	r1, r1, r3
 80007c6:	4240      	negs	r0, r0
 80007c8:	1a09      	subs	r1, r1, r0
 80007ca:	020b      	lsls	r3, r1, #8
 80007cc:	d400      	bmi.n	80007d0 <__aeabi_dsub+0x80>
 80007ce:	e147      	b.n	8000a60 <__aeabi_dsub+0x310>
 80007d0:	0249      	lsls	r1, r1, #9
 80007d2:	0a4b      	lsrs	r3, r1, #9
 80007d4:	4698      	mov	r8, r3
 80007d6:	4643      	mov	r3, r8
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d100      	bne.n	80007de <__aeabi_dsub+0x8e>
 80007dc:	e189      	b.n	8000af2 <__aeabi_dsub+0x3a2>
 80007de:	4640      	mov	r0, r8
 80007e0:	f000 fba4 	bl	8000f2c <__clzsi2>
 80007e4:	0003      	movs	r3, r0
 80007e6:	3b08      	subs	r3, #8
 80007e8:	2b1f      	cmp	r3, #31
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dsub+0x9e>
 80007ec:	e17c      	b.n	8000ae8 <__aeabi_dsub+0x398>
 80007ee:	2220      	movs	r2, #32
 80007f0:	0030      	movs	r0, r6
 80007f2:	1ad2      	subs	r2, r2, r3
 80007f4:	4641      	mov	r1, r8
 80007f6:	40d0      	lsrs	r0, r2
 80007f8:	4099      	lsls	r1, r3
 80007fa:	0002      	movs	r2, r0
 80007fc:	409e      	lsls	r6, r3
 80007fe:	430a      	orrs	r2, r1
 8000800:	429d      	cmp	r5, r3
 8000802:	dd00      	ble.n	8000806 <__aeabi_dsub+0xb6>
 8000804:	e16a      	b.n	8000adc <__aeabi_dsub+0x38c>
 8000806:	1b5d      	subs	r5, r3, r5
 8000808:	1c6b      	adds	r3, r5, #1
 800080a:	2b1f      	cmp	r3, #31
 800080c:	dd00      	ble.n	8000810 <__aeabi_dsub+0xc0>
 800080e:	e194      	b.n	8000b3a <__aeabi_dsub+0x3ea>
 8000810:	2120      	movs	r1, #32
 8000812:	0010      	movs	r0, r2
 8000814:	0035      	movs	r5, r6
 8000816:	1ac9      	subs	r1, r1, r3
 8000818:	408e      	lsls	r6, r1
 800081a:	40da      	lsrs	r2, r3
 800081c:	4088      	lsls	r0, r1
 800081e:	40dd      	lsrs	r5, r3
 8000820:	1e71      	subs	r1, r6, #1
 8000822:	418e      	sbcs	r6, r1
 8000824:	0011      	movs	r1, r2
 8000826:	2207      	movs	r2, #7
 8000828:	4328      	orrs	r0, r5
 800082a:	2500      	movs	r5, #0
 800082c:	4306      	orrs	r6, r0
 800082e:	4032      	ands	r2, r6
 8000830:	2a00      	cmp	r2, #0
 8000832:	d009      	beq.n	8000848 <__aeabi_dsub+0xf8>
 8000834:	230f      	movs	r3, #15
 8000836:	4033      	ands	r3, r6
 8000838:	2b04      	cmp	r3, #4
 800083a:	d005      	beq.n	8000848 <__aeabi_dsub+0xf8>
 800083c:	1d33      	adds	r3, r6, #4
 800083e:	42b3      	cmp	r3, r6
 8000840:	41b6      	sbcs	r6, r6
 8000842:	4276      	negs	r6, r6
 8000844:	1989      	adds	r1, r1, r6
 8000846:	001e      	movs	r6, r3
 8000848:	020b      	lsls	r3, r1, #8
 800084a:	d400      	bmi.n	800084e <__aeabi_dsub+0xfe>
 800084c:	e23d      	b.n	8000cca <__aeabi_dsub+0x57a>
 800084e:	1c6a      	adds	r2, r5, #1
 8000850:	4b91      	ldr	r3, [pc, #580]	; (8000a98 <__aeabi_dsub+0x348>)
 8000852:	0555      	lsls	r5, r2, #21
 8000854:	0d6d      	lsrs	r5, r5, #21
 8000856:	429a      	cmp	r2, r3
 8000858:	d100      	bne.n	800085c <__aeabi_dsub+0x10c>
 800085a:	e119      	b.n	8000a90 <__aeabi_dsub+0x340>
 800085c:	4a8f      	ldr	r2, [pc, #572]	; (8000a9c <__aeabi_dsub+0x34c>)
 800085e:	08f6      	lsrs	r6, r6, #3
 8000860:	400a      	ands	r2, r1
 8000862:	0757      	lsls	r7, r2, #29
 8000864:	0252      	lsls	r2, r2, #9
 8000866:	4337      	orrs	r7, r6
 8000868:	0b12      	lsrs	r2, r2, #12
 800086a:	e09b      	b.n	80009a4 <__aeabi_dsub+0x254>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_dsub+0x122>
 8000870:	e0c5      	b.n	80009fe <__aeabi_dsub+0x2ae>
 8000872:	1c6e      	adds	r6, r5, #1
 8000874:	0576      	lsls	r6, r6, #21
 8000876:	0d76      	lsrs	r6, r6, #21
 8000878:	2e01      	cmp	r6, #1
 800087a:	dc00      	bgt.n	800087e <__aeabi_dsub+0x12e>
 800087c:	e148      	b.n	8000b10 <__aeabi_dsub+0x3c0>
 800087e:	4667      	mov	r7, ip
 8000880:	1a86      	subs	r6, r0, r2
 8000882:	1bcb      	subs	r3, r1, r7
 8000884:	42b0      	cmp	r0, r6
 8000886:	41bf      	sbcs	r7, r7
 8000888:	427f      	negs	r7, r7
 800088a:	46b8      	mov	r8, r7
 800088c:	001f      	movs	r7, r3
 800088e:	4643      	mov	r3, r8
 8000890:	1aff      	subs	r7, r7, r3
 8000892:	003b      	movs	r3, r7
 8000894:	46b8      	mov	r8, r7
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	d500      	bpl.n	800089c <__aeabi_dsub+0x14c>
 800089a:	e15f      	b.n	8000b5c <__aeabi_dsub+0x40c>
 800089c:	4337      	orrs	r7, r6
 800089e:	d19a      	bne.n	80007d6 <__aeabi_dsub+0x86>
 80008a0:	2200      	movs	r2, #0
 80008a2:	2400      	movs	r4, #0
 80008a4:	2500      	movs	r5, #0
 80008a6:	e079      	b.n	800099c <__aeabi_dsub+0x24c>
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	dc00      	bgt.n	80008ae <__aeabi_dsub+0x15e>
 80008ac:	e0fa      	b.n	8000aa4 <__aeabi_dsub+0x354>
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dsub+0x164>
 80008b2:	e08d      	b.n	80009d0 <__aeabi_dsub+0x280>
 80008b4:	4b78      	ldr	r3, [pc, #480]	; (8000a98 <__aeabi_dsub+0x348>)
 80008b6:	429d      	cmp	r5, r3
 80008b8:	d067      	beq.n	800098a <__aeabi_dsub+0x23a>
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	4667      	mov	r7, ip
 80008be:	041b      	lsls	r3, r3, #16
 80008c0:	431f      	orrs	r7, r3
 80008c2:	46bc      	mov	ip, r7
 80008c4:	2e38      	cmp	r6, #56	; 0x38
 80008c6:	dc00      	bgt.n	80008ca <__aeabi_dsub+0x17a>
 80008c8:	e152      	b.n	8000b70 <__aeabi_dsub+0x420>
 80008ca:	4663      	mov	r3, ip
 80008cc:	4313      	orrs	r3, r2
 80008ce:	1e5a      	subs	r2, r3, #1
 80008d0:	4193      	sbcs	r3, r2
 80008d2:	181e      	adds	r6, r3, r0
 80008d4:	4286      	cmp	r6, r0
 80008d6:	4180      	sbcs	r0, r0
 80008d8:	4240      	negs	r0, r0
 80008da:	1809      	adds	r1, r1, r0
 80008dc:	020b      	lsls	r3, r1, #8
 80008de:	d400      	bmi.n	80008e2 <__aeabi_dsub+0x192>
 80008e0:	e0be      	b.n	8000a60 <__aeabi_dsub+0x310>
 80008e2:	4b6d      	ldr	r3, [pc, #436]	; (8000a98 <__aeabi_dsub+0x348>)
 80008e4:	3501      	adds	r5, #1
 80008e6:	429d      	cmp	r5, r3
 80008e8:	d100      	bne.n	80008ec <__aeabi_dsub+0x19c>
 80008ea:	e0d2      	b.n	8000a92 <__aeabi_dsub+0x342>
 80008ec:	4a6b      	ldr	r2, [pc, #428]	; (8000a9c <__aeabi_dsub+0x34c>)
 80008ee:	0873      	lsrs	r3, r6, #1
 80008f0:	400a      	ands	r2, r1
 80008f2:	2101      	movs	r1, #1
 80008f4:	400e      	ands	r6, r1
 80008f6:	431e      	orrs	r6, r3
 80008f8:	0851      	lsrs	r1, r2, #1
 80008fa:	07d3      	lsls	r3, r2, #31
 80008fc:	2207      	movs	r2, #7
 80008fe:	431e      	orrs	r6, r3
 8000900:	4032      	ands	r2, r6
 8000902:	e795      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000904:	001e      	movs	r6, r3
 8000906:	4316      	orrs	r6, r2
 8000908:	d000      	beq.n	800090c <__aeabi_dsub+0x1bc>
 800090a:	e745      	b.n	8000798 <__aeabi_dsub+0x48>
 800090c:	e740      	b.n	8000790 <__aeabi_dsub+0x40>
 800090e:	4b62      	ldr	r3, [pc, #392]	; (8000a98 <__aeabi_dsub+0x348>)
 8000910:	429d      	cmp	r5, r3
 8000912:	d03a      	beq.n	800098a <__aeabi_dsub+0x23a>
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	4667      	mov	r7, ip
 8000918:	041b      	lsls	r3, r3, #16
 800091a:	431f      	orrs	r7, r3
 800091c:	46bc      	mov	ip, r7
 800091e:	2e38      	cmp	r6, #56	; 0x38
 8000920:	dd00      	ble.n	8000924 <__aeabi_dsub+0x1d4>
 8000922:	e0eb      	b.n	8000afc <__aeabi_dsub+0x3ac>
 8000924:	2e1f      	cmp	r6, #31
 8000926:	dc00      	bgt.n	800092a <__aeabi_dsub+0x1da>
 8000928:	e13a      	b.n	8000ba0 <__aeabi_dsub+0x450>
 800092a:	0033      	movs	r3, r6
 800092c:	4667      	mov	r7, ip
 800092e:	3b20      	subs	r3, #32
 8000930:	40df      	lsrs	r7, r3
 8000932:	003b      	movs	r3, r7
 8000934:	2e20      	cmp	r6, #32
 8000936:	d005      	beq.n	8000944 <__aeabi_dsub+0x1f4>
 8000938:	2740      	movs	r7, #64	; 0x40
 800093a:	1bbf      	subs	r7, r7, r6
 800093c:	4666      	mov	r6, ip
 800093e:	40be      	lsls	r6, r7
 8000940:	4332      	orrs	r2, r6
 8000942:	4690      	mov	r8, r2
 8000944:	4646      	mov	r6, r8
 8000946:	1e72      	subs	r2, r6, #1
 8000948:	4196      	sbcs	r6, r2
 800094a:	4333      	orrs	r3, r6
 800094c:	e0da      	b.n	8000b04 <__aeabi_dsub+0x3b4>
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_dsub+0x204>
 8000952:	e214      	b.n	8000d7e <__aeabi_dsub+0x62e>
 8000954:	4663      	mov	r3, ip
 8000956:	4313      	orrs	r3, r2
 8000958:	d100      	bne.n	800095c <__aeabi_dsub+0x20c>
 800095a:	e168      	b.n	8000c2e <__aeabi_dsub+0x4de>
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	074e      	lsls	r6, r1, #29
 8000960:	08c0      	lsrs	r0, r0, #3
 8000962:	08c9      	lsrs	r1, r1, #3
 8000964:	031b      	lsls	r3, r3, #12
 8000966:	4306      	orrs	r6, r0
 8000968:	4219      	tst	r1, r3
 800096a:	d008      	beq.n	800097e <__aeabi_dsub+0x22e>
 800096c:	4660      	mov	r0, ip
 800096e:	08c0      	lsrs	r0, r0, #3
 8000970:	4218      	tst	r0, r3
 8000972:	d104      	bne.n	800097e <__aeabi_dsub+0x22e>
 8000974:	4663      	mov	r3, ip
 8000976:	0001      	movs	r1, r0
 8000978:	08d2      	lsrs	r2, r2, #3
 800097a:	075e      	lsls	r6, r3, #29
 800097c:	4316      	orrs	r6, r2
 800097e:	00f3      	lsls	r3, r6, #3
 8000980:	4699      	mov	r9, r3
 8000982:	00c9      	lsls	r1, r1, #3
 8000984:	0f72      	lsrs	r2, r6, #29
 8000986:	4d44      	ldr	r5, [pc, #272]	; (8000a98 <__aeabi_dsub+0x348>)
 8000988:	4311      	orrs	r1, r2
 800098a:	464b      	mov	r3, r9
 800098c:	08de      	lsrs	r6, r3, #3
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <__aeabi_dsub+0x348>)
 8000990:	074f      	lsls	r7, r1, #29
 8000992:	4337      	orrs	r7, r6
 8000994:	08ca      	lsrs	r2, r1, #3
 8000996:	429d      	cmp	r5, r3
 8000998:	d100      	bne.n	800099c <__aeabi_dsub+0x24c>
 800099a:	e06e      	b.n	8000a7a <__aeabi_dsub+0x32a>
 800099c:	0312      	lsls	r2, r2, #12
 800099e:	056d      	lsls	r5, r5, #21
 80009a0:	0b12      	lsrs	r2, r2, #12
 80009a2:	0d6d      	lsrs	r5, r5, #21
 80009a4:	2100      	movs	r1, #0
 80009a6:	0312      	lsls	r2, r2, #12
 80009a8:	0b13      	lsrs	r3, r2, #12
 80009aa:	0d0a      	lsrs	r2, r1, #20
 80009ac:	0512      	lsls	r2, r2, #20
 80009ae:	431a      	orrs	r2, r3
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <__aeabi_dsub+0x350>)
 80009b2:	052d      	lsls	r5, r5, #20
 80009b4:	4013      	ands	r3, r2
 80009b6:	432b      	orrs	r3, r5
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	07e4      	lsls	r4, r4, #31
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	4323      	orrs	r3, r4
 80009c0:	0038      	movs	r0, r7
 80009c2:	0019      	movs	r1, r3
 80009c4:	bc3c      	pop	{r2, r3, r4, r5}
 80009c6:	4690      	mov	r8, r2
 80009c8:	4699      	mov	r9, r3
 80009ca:	46a2      	mov	sl, r4
 80009cc:	46ab      	mov	fp, r5
 80009ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009d0:	4663      	mov	r3, ip
 80009d2:	4313      	orrs	r3, r2
 80009d4:	d011      	beq.n	80009fa <__aeabi_dsub+0x2aa>
 80009d6:	1e73      	subs	r3, r6, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d000      	beq.n	80009de <__aeabi_dsub+0x28e>
 80009dc:	e107      	b.n	8000bee <__aeabi_dsub+0x49e>
 80009de:	1886      	adds	r6, r0, r2
 80009e0:	4286      	cmp	r6, r0
 80009e2:	4180      	sbcs	r0, r0
 80009e4:	4461      	add	r1, ip
 80009e6:	4240      	negs	r0, r0
 80009e8:	1809      	adds	r1, r1, r0
 80009ea:	2501      	movs	r5, #1
 80009ec:	020b      	lsls	r3, r1, #8
 80009ee:	d537      	bpl.n	8000a60 <__aeabi_dsub+0x310>
 80009f0:	2502      	movs	r5, #2
 80009f2:	e77b      	b.n	80008ec <__aeabi_dsub+0x19c>
 80009f4:	003e      	movs	r6, r7
 80009f6:	4661      	mov	r1, ip
 80009f8:	4691      	mov	r9, r2
 80009fa:	0035      	movs	r5, r6
 80009fc:	e7c5      	b.n	800098a <__aeabi_dsub+0x23a>
 80009fe:	465c      	mov	r4, fp
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d000      	beq.n	8000a06 <__aeabi_dsub+0x2b6>
 8000a04:	e0e1      	b.n	8000bca <__aeabi_dsub+0x47a>
 8000a06:	000b      	movs	r3, r1
 8000a08:	4303      	orrs	r3, r0
 8000a0a:	d0f3      	beq.n	80009f4 <__aeabi_dsub+0x2a4>
 8000a0c:	1c73      	adds	r3, r6, #1
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dsub+0x2c2>
 8000a10:	e1ac      	b.n	8000d6c <__aeabi_dsub+0x61c>
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <__aeabi_dsub+0x348>)
 8000a14:	429f      	cmp	r7, r3
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dsub+0x2ca>
 8000a18:	e13a      	b.n	8000c90 <__aeabi_dsub+0x540>
 8000a1a:	43f3      	mvns	r3, r6
 8000a1c:	2b38      	cmp	r3, #56	; 0x38
 8000a1e:	dd00      	ble.n	8000a22 <__aeabi_dsub+0x2d2>
 8000a20:	e16f      	b.n	8000d02 <__aeabi_dsub+0x5b2>
 8000a22:	2b1f      	cmp	r3, #31
 8000a24:	dd00      	ble.n	8000a28 <__aeabi_dsub+0x2d8>
 8000a26:	e18c      	b.n	8000d42 <__aeabi_dsub+0x5f2>
 8000a28:	2520      	movs	r5, #32
 8000a2a:	000e      	movs	r6, r1
 8000a2c:	1aed      	subs	r5, r5, r3
 8000a2e:	40ae      	lsls	r6, r5
 8000a30:	46b0      	mov	r8, r6
 8000a32:	0006      	movs	r6, r0
 8000a34:	46aa      	mov	sl, r5
 8000a36:	40de      	lsrs	r6, r3
 8000a38:	4645      	mov	r5, r8
 8000a3a:	4335      	orrs	r5, r6
 8000a3c:	002e      	movs	r6, r5
 8000a3e:	4655      	mov	r5, sl
 8000a40:	40d9      	lsrs	r1, r3
 8000a42:	40a8      	lsls	r0, r5
 8000a44:	4663      	mov	r3, ip
 8000a46:	1e45      	subs	r5, r0, #1
 8000a48:	41a8      	sbcs	r0, r5
 8000a4a:	1a5b      	subs	r3, r3, r1
 8000a4c:	469c      	mov	ip, r3
 8000a4e:	4330      	orrs	r0, r6
 8000a50:	1a16      	subs	r6, r2, r0
 8000a52:	42b2      	cmp	r2, r6
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4663      	mov	r3, ip
 8000a58:	4252      	negs	r2, r2
 8000a5a:	1a99      	subs	r1, r3, r2
 8000a5c:	003d      	movs	r5, r7
 8000a5e:	e6b4      	b.n	80007ca <__aeabi_dsub+0x7a>
 8000a60:	2207      	movs	r2, #7
 8000a62:	4032      	ands	r2, r6
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dsub+0x31a>
 8000a68:	e6e4      	b.n	8000834 <__aeabi_dsub+0xe4>
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <__aeabi_dsub+0x348>)
 8000a6c:	08f6      	lsrs	r6, r6, #3
 8000a6e:	074f      	lsls	r7, r1, #29
 8000a70:	4337      	orrs	r7, r6
 8000a72:	08ca      	lsrs	r2, r1, #3
 8000a74:	429d      	cmp	r5, r3
 8000a76:	d000      	beq.n	8000a7a <__aeabi_dsub+0x32a>
 8000a78:	e790      	b.n	800099c <__aeabi_dsub+0x24c>
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dsub+0x332>
 8000a80:	e1a6      	b.n	8000dd0 <__aeabi_dsub+0x680>
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	031b      	lsls	r3, r3, #12
 8000a86:	431a      	orrs	r2, r3
 8000a88:	0312      	lsls	r2, r2, #12
 8000a8a:	0b12      	lsrs	r2, r2, #12
 8000a8c:	4d02      	ldr	r5, [pc, #8]	; (8000a98 <__aeabi_dsub+0x348>)
 8000a8e:	e789      	b.n	80009a4 <__aeabi_dsub+0x254>
 8000a90:	0015      	movs	r5, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	2700      	movs	r7, #0
 8000a96:	e785      	b.n	80009a4 <__aeabi_dsub+0x254>
 8000a98:	000007ff 	.word	0x000007ff
 8000a9c:	ff7fffff 	.word	0xff7fffff
 8000aa0:	800fffff 	.word	0x800fffff
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dsub+0x35a>
 8000aa8:	e0c7      	b.n	8000c3a <__aeabi_dsub+0x4ea>
 8000aaa:	1c6b      	adds	r3, r5, #1
 8000aac:	055e      	lsls	r6, r3, #21
 8000aae:	0d76      	lsrs	r6, r6, #21
 8000ab0:	2e01      	cmp	r6, #1
 8000ab2:	dc00      	bgt.n	8000ab6 <__aeabi_dsub+0x366>
 8000ab4:	e0f0      	b.n	8000c98 <__aeabi_dsub+0x548>
 8000ab6:	4dc8      	ldr	r5, [pc, #800]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d100      	bne.n	8000abe <__aeabi_dsub+0x36e>
 8000abc:	e0b9      	b.n	8000c32 <__aeabi_dsub+0x4e2>
 8000abe:	1885      	adds	r5, r0, r2
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	4285      	cmp	r5, r0
 8000ac4:	4189      	sbcs	r1, r1
 8000ac6:	4462      	add	r2, ip
 8000ac8:	4249      	negs	r1, r1
 8000aca:	1851      	adds	r1, r2, r1
 8000acc:	2207      	movs	r2, #7
 8000ace:	07ce      	lsls	r6, r1, #31
 8000ad0:	086d      	lsrs	r5, r5, #1
 8000ad2:	432e      	orrs	r6, r5
 8000ad4:	0849      	lsrs	r1, r1, #1
 8000ad6:	4032      	ands	r2, r6
 8000ad8:	001d      	movs	r5, r3
 8000ada:	e6a9      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000adc:	49bf      	ldr	r1, [pc, #764]	; (8000ddc <__aeabi_dsub+0x68c>)
 8000ade:	1aed      	subs	r5, r5, r3
 8000ae0:	4011      	ands	r1, r2
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	4032      	ands	r2, r6
 8000ae6:	e6a3      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000ae8:	0032      	movs	r2, r6
 8000aea:	3828      	subs	r0, #40	; 0x28
 8000aec:	4082      	lsls	r2, r0
 8000aee:	2600      	movs	r6, #0
 8000af0:	e686      	b.n	8000800 <__aeabi_dsub+0xb0>
 8000af2:	0030      	movs	r0, r6
 8000af4:	f000 fa1a 	bl	8000f2c <__clzsi2>
 8000af8:	3020      	adds	r0, #32
 8000afa:	e673      	b.n	80007e4 <__aeabi_dsub+0x94>
 8000afc:	4663      	mov	r3, ip
 8000afe:	4313      	orrs	r3, r2
 8000b00:	1e5a      	subs	r2, r3, #1
 8000b02:	4193      	sbcs	r3, r2
 8000b04:	1ac6      	subs	r6, r0, r3
 8000b06:	42b0      	cmp	r0, r6
 8000b08:	4180      	sbcs	r0, r0
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	1a09      	subs	r1, r1, r0
 8000b0e:	e65c      	b.n	80007ca <__aeabi_dsub+0x7a>
 8000b10:	000e      	movs	r6, r1
 8000b12:	4667      	mov	r7, ip
 8000b14:	4306      	orrs	r6, r0
 8000b16:	4317      	orrs	r7, r2
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d15e      	bne.n	8000bda <__aeabi_dsub+0x48a>
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_dsub+0x3d2>
 8000b20:	e0f3      	b.n	8000d0a <__aeabi_dsub+0x5ba>
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dsub+0x3d8>
 8000b26:	e11e      	b.n	8000d66 <__aeabi_dsub+0x616>
 8000b28:	465c      	mov	r4, fp
 8000b2a:	4661      	mov	r1, ip
 8000b2c:	4691      	mov	r9, r2
 8000b2e:	e72c      	b.n	800098a <__aeabi_dsub+0x23a>
 8000b30:	4fa9      	ldr	r7, [pc, #676]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000b32:	42be      	cmp	r6, r7
 8000b34:	d07b      	beq.n	8000c2e <__aeabi_dsub+0x4de>
 8000b36:	001e      	movs	r6, r3
 8000b38:	e6f1      	b.n	800091e <__aeabi_dsub+0x1ce>
 8000b3a:	0010      	movs	r0, r2
 8000b3c:	3d1f      	subs	r5, #31
 8000b3e:	40e8      	lsrs	r0, r5
 8000b40:	2b20      	cmp	r3, #32
 8000b42:	d003      	beq.n	8000b4c <__aeabi_dsub+0x3fc>
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	1acb      	subs	r3, r1, r3
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	4316      	orrs	r6, r2
 8000b4c:	1e73      	subs	r3, r6, #1
 8000b4e:	419e      	sbcs	r6, r3
 8000b50:	2207      	movs	r2, #7
 8000b52:	4306      	orrs	r6, r0
 8000b54:	4032      	ands	r2, r6
 8000b56:	2100      	movs	r1, #0
 8000b58:	2500      	movs	r5, #0
 8000b5a:	e783      	b.n	8000a64 <__aeabi_dsub+0x314>
 8000b5c:	1a16      	subs	r6, r2, r0
 8000b5e:	4663      	mov	r3, ip
 8000b60:	42b2      	cmp	r2, r6
 8000b62:	4180      	sbcs	r0, r0
 8000b64:	1a59      	subs	r1, r3, r1
 8000b66:	4240      	negs	r0, r0
 8000b68:	1a0b      	subs	r3, r1, r0
 8000b6a:	4698      	mov	r8, r3
 8000b6c:	465c      	mov	r4, fp
 8000b6e:	e632      	b.n	80007d6 <__aeabi_dsub+0x86>
 8000b70:	2e1f      	cmp	r6, #31
 8000b72:	dd00      	ble.n	8000b76 <__aeabi_dsub+0x426>
 8000b74:	e0ab      	b.n	8000cce <__aeabi_dsub+0x57e>
 8000b76:	2720      	movs	r7, #32
 8000b78:	1bbb      	subs	r3, r7, r6
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	4663      	mov	r3, ip
 8000b7e:	4657      	mov	r7, sl
 8000b80:	40bb      	lsls	r3, r7
 8000b82:	4699      	mov	r9, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	464f      	mov	r7, r9
 8000b88:	40f3      	lsrs	r3, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	4657      	mov	r7, sl
 8000b90:	40ba      	lsls	r2, r7
 8000b92:	1e57      	subs	r7, r2, #1
 8000b94:	41ba      	sbcs	r2, r7
 8000b96:	4313      	orrs	r3, r2
 8000b98:	4662      	mov	r2, ip
 8000b9a:	40f2      	lsrs	r2, r6
 8000b9c:	1889      	adds	r1, r1, r2
 8000b9e:	e698      	b.n	80008d2 <__aeabi_dsub+0x182>
 8000ba0:	2720      	movs	r7, #32
 8000ba2:	1bbb      	subs	r3, r7, r6
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	4657      	mov	r7, sl
 8000baa:	40bb      	lsls	r3, r7
 8000bac:	4699      	mov	r9, r3
 8000bae:	0013      	movs	r3, r2
 8000bb0:	464f      	mov	r7, r9
 8000bb2:	40f3      	lsrs	r3, r6
 8000bb4:	431f      	orrs	r7, r3
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	4657      	mov	r7, sl
 8000bba:	40ba      	lsls	r2, r7
 8000bbc:	1e57      	subs	r7, r2, #1
 8000bbe:	41ba      	sbcs	r2, r7
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	40f2      	lsrs	r2, r6
 8000bc6:	1a89      	subs	r1, r1, r2
 8000bc8:	e79c      	b.n	8000b04 <__aeabi_dsub+0x3b4>
 8000bca:	4b83      	ldr	r3, [pc, #524]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	d05f      	beq.n	8000c90 <__aeabi_dsub+0x540>
 8000bd0:	2580      	movs	r5, #128	; 0x80
 8000bd2:	042d      	lsls	r5, r5, #16
 8000bd4:	4273      	negs	r3, r6
 8000bd6:	4329      	orrs	r1, r5
 8000bd8:	e720      	b.n	8000a1c <__aeabi_dsub+0x2cc>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d10c      	bne.n	8000bf8 <__aeabi_dsub+0x4a8>
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dsub+0x494>
 8000be2:	e0d0      	b.n	8000d86 <__aeabi_dsub+0x636>
 8000be4:	465c      	mov	r4, fp
 8000be6:	4661      	mov	r1, ip
 8000be8:	4691      	mov	r9, r2
 8000bea:	4d7b      	ldr	r5, [pc, #492]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000bec:	e6cd      	b.n	800098a <__aeabi_dsub+0x23a>
 8000bee:	4f7a      	ldr	r7, [pc, #488]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000bf0:	42be      	cmp	r6, r7
 8000bf2:	d01c      	beq.n	8000c2e <__aeabi_dsub+0x4de>
 8000bf4:	001e      	movs	r6, r3
 8000bf6:	e665      	b.n	80008c4 <__aeabi_dsub+0x174>
 8000bf8:	2f00      	cmp	r7, #0
 8000bfa:	d018      	beq.n	8000c2e <__aeabi_dsub+0x4de>
 8000bfc:	08c0      	lsrs	r0, r0, #3
 8000bfe:	074e      	lsls	r6, r1, #29
 8000c00:	4306      	orrs	r6, r0
 8000c02:	2080      	movs	r0, #128	; 0x80
 8000c04:	08c9      	lsrs	r1, r1, #3
 8000c06:	0300      	lsls	r0, r0, #12
 8000c08:	4201      	tst	r1, r0
 8000c0a:	d008      	beq.n	8000c1e <__aeabi_dsub+0x4ce>
 8000c0c:	4663      	mov	r3, ip
 8000c0e:	08dc      	lsrs	r4, r3, #3
 8000c10:	4204      	tst	r4, r0
 8000c12:	d104      	bne.n	8000c1e <__aeabi_dsub+0x4ce>
 8000c14:	0021      	movs	r1, r4
 8000c16:	46da      	mov	sl, fp
 8000c18:	08d2      	lsrs	r2, r2, #3
 8000c1a:	075e      	lsls	r6, r3, #29
 8000c1c:	4316      	orrs	r6, r2
 8000c1e:	00f3      	lsls	r3, r6, #3
 8000c20:	4699      	mov	r9, r3
 8000c22:	2401      	movs	r4, #1
 8000c24:	4653      	mov	r3, sl
 8000c26:	00c9      	lsls	r1, r1, #3
 8000c28:	0f72      	lsrs	r2, r6, #29
 8000c2a:	4311      	orrs	r1, r2
 8000c2c:	401c      	ands	r4, r3
 8000c2e:	4d6a      	ldr	r5, [pc, #424]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000c30:	e6ab      	b.n	800098a <__aeabi_dsub+0x23a>
 8000c32:	001d      	movs	r5, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	2700      	movs	r7, #0
 8000c38:	e6b4      	b.n	80009a4 <__aeabi_dsub+0x254>
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d159      	bne.n	8000cf2 <__aeabi_dsub+0x5a2>
 8000c3e:	000b      	movs	r3, r1
 8000c40:	4303      	orrs	r3, r0
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dsub+0x4f6>
 8000c44:	e6d6      	b.n	80009f4 <__aeabi_dsub+0x2a4>
 8000c46:	1c73      	adds	r3, r6, #1
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dsub+0x4fc>
 8000c4a:	e0b2      	b.n	8000db2 <__aeabi_dsub+0x662>
 8000c4c:	4b62      	ldr	r3, [pc, #392]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d01e      	beq.n	8000c90 <__aeabi_dsub+0x540>
 8000c52:	43f3      	mvns	r3, r6
 8000c54:	2b38      	cmp	r3, #56	; 0x38
 8000c56:	dc6f      	bgt.n	8000d38 <__aeabi_dsub+0x5e8>
 8000c58:	2b1f      	cmp	r3, #31
 8000c5a:	dd00      	ble.n	8000c5e <__aeabi_dsub+0x50e>
 8000c5c:	e097      	b.n	8000d8e <__aeabi_dsub+0x63e>
 8000c5e:	2520      	movs	r5, #32
 8000c60:	000e      	movs	r6, r1
 8000c62:	1aed      	subs	r5, r5, r3
 8000c64:	40ae      	lsls	r6, r5
 8000c66:	46b0      	mov	r8, r6
 8000c68:	0006      	movs	r6, r0
 8000c6a:	46aa      	mov	sl, r5
 8000c6c:	40de      	lsrs	r6, r3
 8000c6e:	4645      	mov	r5, r8
 8000c70:	4335      	orrs	r5, r6
 8000c72:	002e      	movs	r6, r5
 8000c74:	4655      	mov	r5, sl
 8000c76:	40a8      	lsls	r0, r5
 8000c78:	40d9      	lsrs	r1, r3
 8000c7a:	1e45      	subs	r5, r0, #1
 8000c7c:	41a8      	sbcs	r0, r5
 8000c7e:	448c      	add	ip, r1
 8000c80:	4306      	orrs	r6, r0
 8000c82:	18b6      	adds	r6, r6, r2
 8000c84:	4296      	cmp	r6, r2
 8000c86:	4192      	sbcs	r2, r2
 8000c88:	4251      	negs	r1, r2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	003d      	movs	r5, r7
 8000c8e:	e625      	b.n	80008dc <__aeabi_dsub+0x18c>
 8000c90:	003d      	movs	r5, r7
 8000c92:	4661      	mov	r1, ip
 8000c94:	4691      	mov	r9, r2
 8000c96:	e678      	b.n	800098a <__aeabi_dsub+0x23a>
 8000c98:	000b      	movs	r3, r1
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d000      	beq.n	8000ca2 <__aeabi_dsub+0x552>
 8000ca0:	e655      	b.n	800094e <__aeabi_dsub+0x1fe>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f5      	beq.n	8000c92 <__aeabi_dsub+0x542>
 8000ca6:	4663      	mov	r3, ip
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	d100      	bne.n	8000cae <__aeabi_dsub+0x55e>
 8000cac:	e66d      	b.n	800098a <__aeabi_dsub+0x23a>
 8000cae:	1886      	adds	r6, r0, r2
 8000cb0:	4286      	cmp	r6, r0
 8000cb2:	4180      	sbcs	r0, r0
 8000cb4:	4461      	add	r1, ip
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	1809      	adds	r1, r1, r0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	020b      	lsls	r3, r1, #8
 8000cbe:	d400      	bmi.n	8000cc2 <__aeabi_dsub+0x572>
 8000cc0:	e6d0      	b.n	8000a64 <__aeabi_dsub+0x314>
 8000cc2:	4b46      	ldr	r3, [pc, #280]	; (8000ddc <__aeabi_dsub+0x68c>)
 8000cc4:	3501      	adds	r5, #1
 8000cc6:	4019      	ands	r1, r3
 8000cc8:	e5b2      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000cca:	46b1      	mov	r9, r6
 8000ccc:	e65d      	b.n	800098a <__aeabi_dsub+0x23a>
 8000cce:	0033      	movs	r3, r6
 8000cd0:	4667      	mov	r7, ip
 8000cd2:	3b20      	subs	r3, #32
 8000cd4:	40df      	lsrs	r7, r3
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2e20      	cmp	r6, #32
 8000cda:	d005      	beq.n	8000ce8 <__aeabi_dsub+0x598>
 8000cdc:	2740      	movs	r7, #64	; 0x40
 8000cde:	1bbf      	subs	r7, r7, r6
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	40be      	lsls	r6, r7
 8000ce4:	4332      	orrs	r2, r6
 8000ce6:	4690      	mov	r8, r2
 8000ce8:	4646      	mov	r6, r8
 8000cea:	1e72      	subs	r2, r6, #1
 8000cec:	4196      	sbcs	r6, r2
 8000cee:	4333      	orrs	r3, r6
 8000cf0:	e5ef      	b.n	80008d2 <__aeabi_dsub+0x182>
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000cf4:	429f      	cmp	r7, r3
 8000cf6:	d0cb      	beq.n	8000c90 <__aeabi_dsub+0x540>
 8000cf8:	2580      	movs	r5, #128	; 0x80
 8000cfa:	042d      	lsls	r5, r5, #16
 8000cfc:	4273      	negs	r3, r6
 8000cfe:	4329      	orrs	r1, r5
 8000d00:	e7a8      	b.n	8000c54 <__aeabi_dsub+0x504>
 8000d02:	4308      	orrs	r0, r1
 8000d04:	1e41      	subs	r1, r0, #1
 8000d06:	4188      	sbcs	r0, r1
 8000d08:	e6a2      	b.n	8000a50 <__aeabi_dsub+0x300>
 8000d0a:	2f00      	cmp	r7, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_dsub+0x5c0>
 8000d0e:	e63c      	b.n	800098a <__aeabi_dsub+0x23a>
 8000d10:	4663      	mov	r3, ip
 8000d12:	1a86      	subs	r6, r0, r2
 8000d14:	1acf      	subs	r7, r1, r3
 8000d16:	42b0      	cmp	r0, r6
 8000d18:	419b      	sbcs	r3, r3
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	1afb      	subs	r3, r7, r3
 8000d1e:	4698      	mov	r8, r3
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	d54e      	bpl.n	8000dc2 <__aeabi_dsub+0x672>
 8000d24:	1a16      	subs	r6, r2, r0
 8000d26:	4663      	mov	r3, ip
 8000d28:	42b2      	cmp	r2, r6
 8000d2a:	4192      	sbcs	r2, r2
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	4252      	negs	r2, r2
 8000d30:	1a89      	subs	r1, r1, r2
 8000d32:	465c      	mov	r4, fp
 8000d34:	2200      	movs	r2, #0
 8000d36:	e57b      	b.n	8000830 <__aeabi_dsub+0xe0>
 8000d38:	4301      	orrs	r1, r0
 8000d3a:	000e      	movs	r6, r1
 8000d3c:	1e71      	subs	r1, r6, #1
 8000d3e:	418e      	sbcs	r6, r1
 8000d40:	e79f      	b.n	8000c82 <__aeabi_dsub+0x532>
 8000d42:	001d      	movs	r5, r3
 8000d44:	000e      	movs	r6, r1
 8000d46:	3d20      	subs	r5, #32
 8000d48:	40ee      	lsrs	r6, r5
 8000d4a:	46b0      	mov	r8, r6
 8000d4c:	2b20      	cmp	r3, #32
 8000d4e:	d004      	beq.n	8000d5a <__aeabi_dsub+0x60a>
 8000d50:	2540      	movs	r5, #64	; 0x40
 8000d52:	1aeb      	subs	r3, r5, r3
 8000d54:	4099      	lsls	r1, r3
 8000d56:	4308      	orrs	r0, r1
 8000d58:	4681      	mov	r9, r0
 8000d5a:	4648      	mov	r0, r9
 8000d5c:	4643      	mov	r3, r8
 8000d5e:	1e41      	subs	r1, r0, #1
 8000d60:	4188      	sbcs	r0, r1
 8000d62:	4318      	orrs	r0, r3
 8000d64:	e674      	b.n	8000a50 <__aeabi_dsub+0x300>
 8000d66:	2200      	movs	r2, #0
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e617      	b.n	800099c <__aeabi_dsub+0x24c>
 8000d6c:	1a16      	subs	r6, r2, r0
 8000d6e:	4663      	mov	r3, ip
 8000d70:	42b2      	cmp	r2, r6
 8000d72:	4192      	sbcs	r2, r2
 8000d74:	1a59      	subs	r1, r3, r1
 8000d76:	4252      	negs	r2, r2
 8000d78:	1a89      	subs	r1, r1, r2
 8000d7a:	003d      	movs	r5, r7
 8000d7c:	e525      	b.n	80007ca <__aeabi_dsub+0x7a>
 8000d7e:	4661      	mov	r1, ip
 8000d80:	4691      	mov	r9, r2
 8000d82:	4d15      	ldr	r5, [pc, #84]	; (8000dd8 <__aeabi_dsub+0x688>)
 8000d84:	e601      	b.n	800098a <__aeabi_dsub+0x23a>
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	2400      	movs	r4, #0
 8000d8a:	0312      	lsls	r2, r2, #12
 8000d8c:	e679      	b.n	8000a82 <__aeabi_dsub+0x332>
 8000d8e:	001d      	movs	r5, r3
 8000d90:	000e      	movs	r6, r1
 8000d92:	3d20      	subs	r5, #32
 8000d94:	40ee      	lsrs	r6, r5
 8000d96:	46b0      	mov	r8, r6
 8000d98:	2b20      	cmp	r3, #32
 8000d9a:	d004      	beq.n	8000da6 <__aeabi_dsub+0x656>
 8000d9c:	2540      	movs	r5, #64	; 0x40
 8000d9e:	1aeb      	subs	r3, r5, r3
 8000da0:	4099      	lsls	r1, r3
 8000da2:	4308      	orrs	r0, r1
 8000da4:	4681      	mov	r9, r0
 8000da6:	464e      	mov	r6, r9
 8000da8:	4643      	mov	r3, r8
 8000daa:	1e71      	subs	r1, r6, #1
 8000dac:	418e      	sbcs	r6, r1
 8000dae:	431e      	orrs	r6, r3
 8000db0:	e767      	b.n	8000c82 <__aeabi_dsub+0x532>
 8000db2:	1886      	adds	r6, r0, r2
 8000db4:	4296      	cmp	r6, r2
 8000db6:	419b      	sbcs	r3, r3
 8000db8:	4461      	add	r1, ip
 8000dba:	425b      	negs	r3, r3
 8000dbc:	18c9      	adds	r1, r1, r3
 8000dbe:	003d      	movs	r5, r7
 8000dc0:	e58c      	b.n	80008dc <__aeabi_dsub+0x18c>
 8000dc2:	4647      	mov	r7, r8
 8000dc4:	4337      	orrs	r7, r6
 8000dc6:	d0ce      	beq.n	8000d66 <__aeabi_dsub+0x616>
 8000dc8:	2207      	movs	r2, #7
 8000dca:	4641      	mov	r1, r8
 8000dcc:	4032      	ands	r2, r6
 8000dce:	e649      	b.n	8000a64 <__aeabi_dsub+0x314>
 8000dd0:	2700      	movs	r7, #0
 8000dd2:	003a      	movs	r2, r7
 8000dd4:	e5e6      	b.n	80009a4 <__aeabi_dsub+0x254>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	000007ff 	.word	0x000007ff
 8000ddc:	ff7fffff 	.word	0xff7fffff

08000de0 <__aeabi_d2iz>:
 8000de0:	b530      	push	{r4, r5, lr}
 8000de2:	4d14      	ldr	r5, [pc, #80]	; (8000e34 <__aeabi_d2iz+0x54>)
 8000de4:	030a      	lsls	r2, r1, #12
 8000de6:	004b      	lsls	r3, r1, #1
 8000de8:	0b12      	lsrs	r2, r2, #12
 8000dea:	0d5b      	lsrs	r3, r3, #21
 8000dec:	0fc9      	lsrs	r1, r1, #31
 8000dee:	2400      	movs	r4, #0
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	dd11      	ble.n	8000e18 <__aeabi_d2iz+0x38>
 8000df4:	4c10      	ldr	r4, [pc, #64]	; (8000e38 <__aeabi_d2iz+0x58>)
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	dc10      	bgt.n	8000e1c <__aeabi_d2iz+0x3c>
 8000dfa:	2480      	movs	r4, #128	; 0x80
 8000dfc:	0364      	lsls	r4, r4, #13
 8000dfe:	4322      	orrs	r2, r4
 8000e00:	4c0e      	ldr	r4, [pc, #56]	; (8000e3c <__aeabi_d2iz+0x5c>)
 8000e02:	1ae4      	subs	r4, r4, r3
 8000e04:	2c1f      	cmp	r4, #31
 8000e06:	dd0c      	ble.n	8000e22 <__aeabi_d2iz+0x42>
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <__aeabi_d2iz+0x60>)
 8000e0a:	1ac3      	subs	r3, r0, r3
 8000e0c:	40da      	lsrs	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	425c      	negs	r4, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d100      	bne.n	8000e18 <__aeabi_d2iz+0x38>
 8000e16:	001c      	movs	r4, r3
 8000e18:	0020      	movs	r0, r4
 8000e1a:	bd30      	pop	{r4, r5, pc}
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <__aeabi_d2iz+0x64>)
 8000e1e:	18cc      	adds	r4, r1, r3
 8000e20:	e7fa      	b.n	8000e18 <__aeabi_d2iz+0x38>
 8000e22:	4d09      	ldr	r5, [pc, #36]	; (8000e48 <__aeabi_d2iz+0x68>)
 8000e24:	40e0      	lsrs	r0, r4
 8000e26:	46ac      	mov	ip, r5
 8000e28:	4463      	add	r3, ip
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	4303      	orrs	r3, r0
 8000e30:	e7ee      	b.n	8000e10 <__aeabi_d2iz+0x30>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	000003fe 	.word	0x000003fe
 8000e38:	0000041d 	.word	0x0000041d
 8000e3c:	00000433 	.word	0x00000433
 8000e40:	00000413 	.word	0x00000413
 8000e44:	7fffffff 	.word	0x7fffffff
 8000e48:	fffffbed 	.word	0xfffffbed

08000e4c <__aeabi_ui2d>:
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	1e04      	subs	r4, r0, #0
 8000e50:	d025      	beq.n	8000e9e <__aeabi_ui2d+0x52>
 8000e52:	f000 f86b 	bl	8000f2c <__clzsi2>
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <__aeabi_ui2d+0x5c>)
 8000e58:	1a1b      	subs	r3, r3, r0
 8000e5a:	055b      	lsls	r3, r3, #21
 8000e5c:	0d5b      	lsrs	r3, r3, #21
 8000e5e:	280a      	cmp	r0, #10
 8000e60:	dd12      	ble.n	8000e88 <__aeabi_ui2d+0x3c>
 8000e62:	380b      	subs	r0, #11
 8000e64:	4084      	lsls	r4, r0
 8000e66:	2200      	movs	r2, #0
 8000e68:	0324      	lsls	r4, r4, #12
 8000e6a:	0b24      	lsrs	r4, r4, #12
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	0010      	movs	r0, r2
 8000e70:	0324      	lsls	r4, r4, #12
 8000e72:	0d0a      	lsrs	r2, r1, #20
 8000e74:	0b24      	lsrs	r4, r4, #12
 8000e76:	0512      	lsls	r2, r2, #20
 8000e78:	4322      	orrs	r2, r4
 8000e7a:	4c0c      	ldr	r4, [pc, #48]	; (8000eac <__aeabi_ui2d+0x60>)
 8000e7c:	051b      	lsls	r3, r3, #20
 8000e7e:	4022      	ands	r2, r4
 8000e80:	4313      	orrs	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	0859      	lsrs	r1, r3, #1
 8000e86:	bd10      	pop	{r4, pc}
 8000e88:	0002      	movs	r2, r0
 8000e8a:	0021      	movs	r1, r4
 8000e8c:	3215      	adds	r2, #21
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	000a      	movs	r2, r1
 8000e92:	210b      	movs	r1, #11
 8000e94:	1a08      	subs	r0, r1, r0
 8000e96:	40c4      	lsrs	r4, r0
 8000e98:	0324      	lsls	r4, r4, #12
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	e7e6      	b.n	8000e6c <__aeabi_ui2d+0x20>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	e7e2      	b.n	8000e6c <__aeabi_ui2d+0x20>
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	0000041e 	.word	0x0000041e
 8000eac:	800fffff 	.word	0x800fffff

08000eb0 <__aeabi_cdrcmple>:
 8000eb0:	4684      	mov	ip, r0
 8000eb2:	1c10      	adds	r0, r2, #0
 8000eb4:	4662      	mov	r2, ip
 8000eb6:	468c      	mov	ip, r1
 8000eb8:	1c19      	adds	r1, r3, #0
 8000eba:	4663      	mov	r3, ip
 8000ebc:	e000      	b.n	8000ec0 <__aeabi_cdcmpeq>
 8000ebe:	46c0      	nop			; (mov r8, r8)

08000ec0 <__aeabi_cdcmpeq>:
 8000ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ec2:	f000 f8f1 	bl	80010a8 <__ledf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d401      	bmi.n	8000ece <__aeabi_cdcmpeq+0xe>
 8000eca:	2100      	movs	r1, #0
 8000ecc:	42c8      	cmn	r0, r1
 8000ece:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000ed0 <__aeabi_dcmpeq>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	f000 f849 	bl	8000f68 <__eqdf2>
 8000ed6:	4240      	negs	r0, r0
 8000ed8:	3001      	adds	r0, #1
 8000eda:	bd10      	pop	{r4, pc}

08000edc <__aeabi_dcmplt>:
 8000edc:	b510      	push	{r4, lr}
 8000ede:	f000 f8e3 	bl	80010a8 <__ledf2>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	db01      	blt.n	8000eea <__aeabi_dcmplt+0xe>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	2001      	movs	r0, #1
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)

08000ef0 <__aeabi_dcmple>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	f000 f8d9 	bl	80010a8 <__ledf2>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	dd01      	ble.n	8000efe <__aeabi_dcmple+0xe>
 8000efa:	2000      	movs	r0, #0
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	2001      	movs	r0, #1
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)

08000f04 <__aeabi_dcmpgt>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	f000 f86b 	bl	8000fe0 <__gedf2>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	dc01      	bgt.n	8000f12 <__aeabi_dcmpgt+0xe>
 8000f0e:	2000      	movs	r0, #0
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	2001      	movs	r0, #1
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)

08000f18 <__aeabi_dcmpge>:
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	f000 f861 	bl	8000fe0 <__gedf2>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	da01      	bge.n	8000f26 <__aeabi_dcmpge+0xe>
 8000f22:	2000      	movs	r0, #0
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	2001      	movs	r0, #1
 8000f28:	bd10      	pop	{r4, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)

08000f2c <__clzsi2>:
 8000f2c:	211c      	movs	r1, #28
 8000f2e:	2301      	movs	r3, #1
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d301      	bcc.n	8000f3a <__clzsi2+0xe>
 8000f36:	0c00      	lsrs	r0, r0, #16
 8000f38:	3910      	subs	r1, #16
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	4298      	cmp	r0, r3
 8000f3e:	d301      	bcc.n	8000f44 <__clzsi2+0x18>
 8000f40:	0a00      	lsrs	r0, r0, #8
 8000f42:	3908      	subs	r1, #8
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	4298      	cmp	r0, r3
 8000f48:	d301      	bcc.n	8000f4e <__clzsi2+0x22>
 8000f4a:	0900      	lsrs	r0, r0, #4
 8000f4c:	3904      	subs	r1, #4
 8000f4e:	a202      	add	r2, pc, #8	; (adr r2, 8000f58 <__clzsi2+0x2c>)
 8000f50:	5c10      	ldrb	r0, [r2, r0]
 8000f52:	1840      	adds	r0, r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	02020304 	.word	0x02020304
 8000f5c:	01010101 	.word	0x01010101
	...

08000f68 <__eqdf2>:
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	464f      	mov	r7, r9
 8000f6c:	4646      	mov	r6, r8
 8000f6e:	46d6      	mov	lr, sl
 8000f70:	4684      	mov	ip, r0
 8000f72:	b5c0      	push	{r6, r7, lr}
 8000f74:	4680      	mov	r8, r0
 8000f76:	4e19      	ldr	r6, [pc, #100]	; (8000fdc <__eqdf2+0x74>)
 8000f78:	0318      	lsls	r0, r3, #12
 8000f7a:	030f      	lsls	r7, r1, #12
 8000f7c:	004d      	lsls	r5, r1, #1
 8000f7e:	0b00      	lsrs	r0, r0, #12
 8000f80:	005c      	lsls	r4, r3, #1
 8000f82:	4682      	mov	sl, r0
 8000f84:	0b3f      	lsrs	r7, r7, #12
 8000f86:	0d6d      	lsrs	r5, r5, #21
 8000f88:	0fc9      	lsrs	r1, r1, #31
 8000f8a:	4691      	mov	r9, r2
 8000f8c:	0d64      	lsrs	r4, r4, #21
 8000f8e:	0fdb      	lsrs	r3, r3, #31
 8000f90:	2001      	movs	r0, #1
 8000f92:	42b5      	cmp	r5, r6
 8000f94:	d00a      	beq.n	8000fac <__eqdf2+0x44>
 8000f96:	42b4      	cmp	r4, r6
 8000f98:	d003      	beq.n	8000fa2 <__eqdf2+0x3a>
 8000f9a:	42a5      	cmp	r5, r4
 8000f9c:	d101      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000f9e:	4557      	cmp	r7, sl
 8000fa0:	d00c      	beq.n	8000fbc <__eqdf2+0x54>
 8000fa2:	bc1c      	pop	{r2, r3, r4}
 8000fa4:	4690      	mov	r8, r2
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	46a2      	mov	sl, r4
 8000faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fac:	4666      	mov	r6, ip
 8000fae:	433e      	orrs	r6, r7
 8000fb0:	d1f7      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fb2:	42ac      	cmp	r4, r5
 8000fb4:	d1f5      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fb6:	4654      	mov	r4, sl
 8000fb8:	4314      	orrs	r4, r2
 8000fba:	d1f2      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d1ef      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fc2:	4299      	cmp	r1, r3
 8000fc4:	d007      	beq.n	8000fd6 <__eqdf2+0x6e>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d1eb      	bne.n	8000fa2 <__eqdf2+0x3a>
 8000fca:	4663      	mov	r3, ip
 8000fcc:	431f      	orrs	r7, r3
 8000fce:	0038      	movs	r0, r7
 8000fd0:	1e47      	subs	r7, r0, #1
 8000fd2:	41b8      	sbcs	r0, r7
 8000fd4:	e7e5      	b.n	8000fa2 <__eqdf2+0x3a>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e7e3      	b.n	8000fa2 <__eqdf2+0x3a>
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	000007ff 	.word	0x000007ff

08000fe0 <__gedf2>:
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	464f      	mov	r7, r9
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	004d      	lsls	r5, r1, #1
 8000fea:	b5c0      	push	{r6, r7, lr}
 8000fec:	030e      	lsls	r6, r1, #12
 8000fee:	0fc9      	lsrs	r1, r1, #31
 8000ff0:	468a      	mov	sl, r1
 8000ff2:	492c      	ldr	r1, [pc, #176]	; (80010a4 <__gedf2+0xc4>)
 8000ff4:	031f      	lsls	r7, r3, #12
 8000ff6:	005c      	lsls	r4, r3, #1
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	0b36      	lsrs	r6, r6, #12
 8000ffc:	0d6d      	lsrs	r5, r5, #21
 8000ffe:	4691      	mov	r9, r2
 8001000:	0b3f      	lsrs	r7, r7, #12
 8001002:	0d64      	lsrs	r4, r4, #21
 8001004:	0fdb      	lsrs	r3, r3, #31
 8001006:	428d      	cmp	r5, r1
 8001008:	d01e      	beq.n	8001048 <__gedf2+0x68>
 800100a:	428c      	cmp	r4, r1
 800100c:	d016      	beq.n	800103c <__gedf2+0x5c>
 800100e:	2d00      	cmp	r5, #0
 8001010:	d11e      	bne.n	8001050 <__gedf2+0x70>
 8001012:	4330      	orrs	r0, r6
 8001014:	4684      	mov	ip, r0
 8001016:	2c00      	cmp	r4, #0
 8001018:	d101      	bne.n	800101e <__gedf2+0x3e>
 800101a:	433a      	orrs	r2, r7
 800101c:	d023      	beq.n	8001066 <__gedf2+0x86>
 800101e:	4662      	mov	r2, ip
 8001020:	2a00      	cmp	r2, #0
 8001022:	d01a      	beq.n	800105a <__gedf2+0x7a>
 8001024:	459a      	cmp	sl, r3
 8001026:	d029      	beq.n	800107c <__gedf2+0x9c>
 8001028:	4651      	mov	r1, sl
 800102a:	2002      	movs	r0, #2
 800102c:	3901      	subs	r1, #1
 800102e:	4008      	ands	r0, r1
 8001030:	3801      	subs	r0, #1
 8001032:	bc1c      	pop	{r2, r3, r4}
 8001034:	4690      	mov	r8, r2
 8001036:	4699      	mov	r9, r3
 8001038:	46a2      	mov	sl, r4
 800103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103c:	0039      	movs	r1, r7
 800103e:	4311      	orrs	r1, r2
 8001040:	d0e5      	beq.n	800100e <__gedf2+0x2e>
 8001042:	2002      	movs	r0, #2
 8001044:	4240      	negs	r0, r0
 8001046:	e7f4      	b.n	8001032 <__gedf2+0x52>
 8001048:	4330      	orrs	r0, r6
 800104a:	d1fa      	bne.n	8001042 <__gedf2+0x62>
 800104c:	42ac      	cmp	r4, r5
 800104e:	d00f      	beq.n	8001070 <__gedf2+0x90>
 8001050:	2c00      	cmp	r4, #0
 8001052:	d10f      	bne.n	8001074 <__gedf2+0x94>
 8001054:	433a      	orrs	r2, r7
 8001056:	d0e7      	beq.n	8001028 <__gedf2+0x48>
 8001058:	e00c      	b.n	8001074 <__gedf2+0x94>
 800105a:	2201      	movs	r2, #1
 800105c:	3b01      	subs	r3, #1
 800105e:	4393      	bics	r3, r2
 8001060:	0018      	movs	r0, r3
 8001062:	3001      	adds	r0, #1
 8001064:	e7e5      	b.n	8001032 <__gedf2+0x52>
 8001066:	4663      	mov	r3, ip
 8001068:	2000      	movs	r0, #0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0e1      	beq.n	8001032 <__gedf2+0x52>
 800106e:	e7db      	b.n	8001028 <__gedf2+0x48>
 8001070:	433a      	orrs	r2, r7
 8001072:	d1e6      	bne.n	8001042 <__gedf2+0x62>
 8001074:	459a      	cmp	sl, r3
 8001076:	d1d7      	bne.n	8001028 <__gedf2+0x48>
 8001078:	42a5      	cmp	r5, r4
 800107a:	dcd5      	bgt.n	8001028 <__gedf2+0x48>
 800107c:	42a5      	cmp	r5, r4
 800107e:	db05      	blt.n	800108c <__gedf2+0xac>
 8001080:	42be      	cmp	r6, r7
 8001082:	d8d1      	bhi.n	8001028 <__gedf2+0x48>
 8001084:	d008      	beq.n	8001098 <__gedf2+0xb8>
 8001086:	2000      	movs	r0, #0
 8001088:	42be      	cmp	r6, r7
 800108a:	d2d2      	bcs.n	8001032 <__gedf2+0x52>
 800108c:	4650      	mov	r0, sl
 800108e:	2301      	movs	r3, #1
 8001090:	3801      	subs	r0, #1
 8001092:	4398      	bics	r0, r3
 8001094:	3001      	adds	r0, #1
 8001096:	e7cc      	b.n	8001032 <__gedf2+0x52>
 8001098:	45c8      	cmp	r8, r9
 800109a:	d8c5      	bhi.n	8001028 <__gedf2+0x48>
 800109c:	2000      	movs	r0, #0
 800109e:	45c8      	cmp	r8, r9
 80010a0:	d3f4      	bcc.n	800108c <__gedf2+0xac>
 80010a2:	e7c6      	b.n	8001032 <__gedf2+0x52>
 80010a4:	000007ff 	.word	0x000007ff

080010a8 <__ledf2>:
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	464f      	mov	r7, r9
 80010ac:	4646      	mov	r6, r8
 80010ae:	46d6      	mov	lr, sl
 80010b0:	004d      	lsls	r5, r1, #1
 80010b2:	b5c0      	push	{r6, r7, lr}
 80010b4:	030e      	lsls	r6, r1, #12
 80010b6:	0fc9      	lsrs	r1, r1, #31
 80010b8:	468a      	mov	sl, r1
 80010ba:	492e      	ldr	r1, [pc, #184]	; (8001174 <__ledf2+0xcc>)
 80010bc:	031f      	lsls	r7, r3, #12
 80010be:	005c      	lsls	r4, r3, #1
 80010c0:	4680      	mov	r8, r0
 80010c2:	0b36      	lsrs	r6, r6, #12
 80010c4:	0d6d      	lsrs	r5, r5, #21
 80010c6:	4691      	mov	r9, r2
 80010c8:	0b3f      	lsrs	r7, r7, #12
 80010ca:	0d64      	lsrs	r4, r4, #21
 80010cc:	0fdb      	lsrs	r3, r3, #31
 80010ce:	428d      	cmp	r5, r1
 80010d0:	d018      	beq.n	8001104 <__ledf2+0x5c>
 80010d2:	428c      	cmp	r4, r1
 80010d4:	d011      	beq.n	80010fa <__ledf2+0x52>
 80010d6:	2d00      	cmp	r5, #0
 80010d8:	d118      	bne.n	800110c <__ledf2+0x64>
 80010da:	4330      	orrs	r0, r6
 80010dc:	4684      	mov	ip, r0
 80010de:	2c00      	cmp	r4, #0
 80010e0:	d11e      	bne.n	8001120 <__ledf2+0x78>
 80010e2:	433a      	orrs	r2, r7
 80010e4:	d11c      	bne.n	8001120 <__ledf2+0x78>
 80010e6:	4663      	mov	r3, ip
 80010e8:	2000      	movs	r0, #0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d030      	beq.n	8001150 <__ledf2+0xa8>
 80010ee:	4651      	mov	r1, sl
 80010f0:	2002      	movs	r0, #2
 80010f2:	3901      	subs	r1, #1
 80010f4:	4008      	ands	r0, r1
 80010f6:	3801      	subs	r0, #1
 80010f8:	e02a      	b.n	8001150 <__ledf2+0xa8>
 80010fa:	0039      	movs	r1, r7
 80010fc:	4311      	orrs	r1, r2
 80010fe:	d0ea      	beq.n	80010d6 <__ledf2+0x2e>
 8001100:	2002      	movs	r0, #2
 8001102:	e025      	b.n	8001150 <__ledf2+0xa8>
 8001104:	4330      	orrs	r0, r6
 8001106:	d1fb      	bne.n	8001100 <__ledf2+0x58>
 8001108:	42ac      	cmp	r4, r5
 800110a:	d026      	beq.n	800115a <__ledf2+0xb2>
 800110c:	2c00      	cmp	r4, #0
 800110e:	d126      	bne.n	800115e <__ledf2+0xb6>
 8001110:	433a      	orrs	r2, r7
 8001112:	d124      	bne.n	800115e <__ledf2+0xb6>
 8001114:	4651      	mov	r1, sl
 8001116:	2002      	movs	r0, #2
 8001118:	3901      	subs	r1, #1
 800111a:	4008      	ands	r0, r1
 800111c:	3801      	subs	r0, #1
 800111e:	e017      	b.n	8001150 <__ledf2+0xa8>
 8001120:	4662      	mov	r2, ip
 8001122:	2a00      	cmp	r2, #0
 8001124:	d00f      	beq.n	8001146 <__ledf2+0x9e>
 8001126:	459a      	cmp	sl, r3
 8001128:	d1e1      	bne.n	80010ee <__ledf2+0x46>
 800112a:	42a5      	cmp	r5, r4
 800112c:	db05      	blt.n	800113a <__ledf2+0x92>
 800112e:	42be      	cmp	r6, r7
 8001130:	d8dd      	bhi.n	80010ee <__ledf2+0x46>
 8001132:	d019      	beq.n	8001168 <__ledf2+0xc0>
 8001134:	2000      	movs	r0, #0
 8001136:	42be      	cmp	r6, r7
 8001138:	d20a      	bcs.n	8001150 <__ledf2+0xa8>
 800113a:	4650      	mov	r0, sl
 800113c:	2301      	movs	r3, #1
 800113e:	3801      	subs	r0, #1
 8001140:	4398      	bics	r0, r3
 8001142:	3001      	adds	r0, #1
 8001144:	e004      	b.n	8001150 <__ledf2+0xa8>
 8001146:	2201      	movs	r2, #1
 8001148:	3b01      	subs	r3, #1
 800114a:	4393      	bics	r3, r2
 800114c:	0018      	movs	r0, r3
 800114e:	3001      	adds	r0, #1
 8001150:	bc1c      	pop	{r2, r3, r4}
 8001152:	4690      	mov	r8, r2
 8001154:	4699      	mov	r9, r3
 8001156:	46a2      	mov	sl, r4
 8001158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115a:	433a      	orrs	r2, r7
 800115c:	d1d0      	bne.n	8001100 <__ledf2+0x58>
 800115e:	459a      	cmp	sl, r3
 8001160:	d1c5      	bne.n	80010ee <__ledf2+0x46>
 8001162:	42a5      	cmp	r5, r4
 8001164:	dcc3      	bgt.n	80010ee <__ledf2+0x46>
 8001166:	e7e0      	b.n	800112a <__ledf2+0x82>
 8001168:	45c8      	cmp	r8, r9
 800116a:	d8c0      	bhi.n	80010ee <__ledf2+0x46>
 800116c:	2000      	movs	r0, #0
 800116e:	45c8      	cmp	r8, r9
 8001170:	d3e3      	bcc.n	800113a <__ledf2+0x92>
 8001172:	e7ed      	b.n	8001150 <__ledf2+0xa8>
 8001174:	000007ff 	.word	0x000007ff

08001178 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_Init+0x24>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_Init+0x24>)
 8001182:	2110      	movs	r1, #16
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001188:	2000      	movs	r0, #0
 800118a:	f000 f809 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118e:	f005 fa35 	bl	80065fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	40022000 	.word	0x40022000

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80011a8:	f000 fed0 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 80011ac:	0002      	movs	r2, r0
 80011ae:	23fa      	movs	r3, #250	; 0xfa
 80011b0:	0099      	lsls	r1, r3, #2
 80011b2:	0010      	movs	r0, r2
 80011b4:	f7fe ffb0 	bl	8000118 <__udivsi3>
 80011b8:	0003      	movs	r3, r0
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 f8e7 	bl	800138e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	2301      	movs	r3, #1
 80011c4:	425b      	negs	r3, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	0018      	movs	r0, r3
 80011ca:	f000 f8cb 	bl	8001364 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b002      	add	sp, #8
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  uwTick++;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_IncTick+0x14>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	4b02      	ldr	r3, [pc, #8]	; (80011ec <HAL_IncTick+0x14>)
 80011e4:	601a      	str	r2, [r3, #0]
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200000f4 	.word	0x200000f4

080011f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <HAL_GetTick+0x10>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	200000f4 	.word	0x200000f4

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff fff0 	bl	80011f0 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	d002      	beq.n	8001224 <HAL_Delay+0x20>
  {
     wait++;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	f7ff ffe3 	bl	80011f0 <HAL_GetTick>
 800122a:	0002      	movs	r2, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	429a      	cmp	r2, r3
 8001234:	d8f7      	bhi.n	8001226 <HAL_Delay+0x22>
  {
  }
}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	0002      	movs	r2, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b7f      	cmp	r3, #127	; 0x7f
 8001254:	d932      	bls.n	80012bc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001256:	4a2f      	ldr	r2, [pc, #188]	; (8001314 <NVIC_SetPriority+0xd4>)
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	0019      	movs	r1, r3
 800125e:	230f      	movs	r3, #15
 8001260:	400b      	ands	r3, r1
 8001262:	3b08      	subs	r3, #8
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3306      	adds	r3, #6
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	18d3      	adds	r3, r2, r3
 800126c:	3304      	adds	r3, #4
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	1dfa      	adds	r2, r7, #7
 8001272:	7812      	ldrb	r2, [r2, #0]
 8001274:	0011      	movs	r1, r2
 8001276:	2203      	movs	r2, #3
 8001278:	400a      	ands	r2, r1
 800127a:	00d2      	lsls	r2, r2, #3
 800127c:	21ff      	movs	r1, #255	; 0xff
 800127e:	4091      	lsls	r1, r2
 8001280:	000a      	movs	r2, r1
 8001282:	43d2      	mvns	r2, r2
 8001284:	401a      	ands	r2, r3
 8001286:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	019b      	lsls	r3, r3, #6
 800128c:	22ff      	movs	r2, #255	; 0xff
 800128e:	401a      	ands	r2, r3
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	0018      	movs	r0, r3
 8001296:	2303      	movs	r3, #3
 8001298:	4003      	ands	r3, r0
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129e:	481d      	ldr	r0, [pc, #116]	; (8001314 <NVIC_SetPriority+0xd4>)
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	001c      	movs	r4, r3
 80012a6:	230f      	movs	r3, #15
 80012a8:	4023      	ands	r3, r4
 80012aa:	3b08      	subs	r3, #8
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	430a      	orrs	r2, r1
 80012b0:	3306      	adds	r3, #6
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	18c3      	adds	r3, r0, r3
 80012b6:	3304      	adds	r3, #4
 80012b8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ba:	e027      	b.n	800130c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	4a16      	ldr	r2, [pc, #88]	; (8001318 <NVIC_SetPriority+0xd8>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	33c0      	adds	r3, #192	; 0xc0
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	589b      	ldr	r3, [r3, r2]
 80012cc:	1dfa      	adds	r2, r7, #7
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	0011      	movs	r1, r2
 80012d2:	2203      	movs	r2, #3
 80012d4:	400a      	ands	r2, r1
 80012d6:	00d2      	lsls	r2, r2, #3
 80012d8:	21ff      	movs	r1, #255	; 0xff
 80012da:	4091      	lsls	r1, r2
 80012dc:	000a      	movs	r2, r1
 80012de:	43d2      	mvns	r2, r2
 80012e0:	401a      	ands	r2, r3
 80012e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	019b      	lsls	r3, r3, #6
 80012e8:	22ff      	movs	r2, #255	; 0xff
 80012ea:	401a      	ands	r2, r3
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	2303      	movs	r3, #3
 80012f4:	4003      	ands	r3, r0
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <NVIC_SetPriority+0xd8>)
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	430a      	orrs	r2, r1
 8001306:	33c0      	adds	r3, #192	; 0xc0
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	501a      	str	r2, [r3, r0]
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b003      	add	sp, #12
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	e000e100 	.word	0xe000e100

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	4a0c      	ldr	r2, [pc, #48]	; (800135c <SysTick_Config+0x40>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d901      	bls.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e010      	b.n	8001354 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <SysTick_Config+0x44>)
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	3a01      	subs	r2, #1
 8001338:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	2301      	movs	r3, #1
 800133c:	425b      	negs	r3, r3
 800133e:	2103      	movs	r1, #3
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff ff7d 	bl	8001240 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SysTick_Config+0x44>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x44>)
 800134e:	2207      	movs	r2, #7
 8001350:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001352:	2300      	movs	r3, #0
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}
 800135c:	00ffffff 	.word	0x00ffffff
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	210f      	movs	r1, #15
 8001370:	187b      	adds	r3, r7, r1
 8001372:	1c02      	adds	r2, r0, #0
 8001374:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	187b      	adds	r3, r7, r1
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	0011      	movs	r1, r2
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <NVIC_SetPriority>
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ffbf 	bl	800131c <SysTick_Config>
 800139e:	0003      	movs	r3, r0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80013be:	e14f      	b.n	8001660 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4091      	lsls	r1, r2
 80013ca:	000a      	movs	r2, r1
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <HAL_GPIO_Init+0x30>
 80013d6:	e140      	b.n	800165a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x40>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b12      	cmp	r3, #18
 80013e6:	d123      	bne.n	8001430 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	58d3      	ldr	r3, [r2, r3]
 80013f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2207      	movs	r2, #7
 80013fa:	4013      	ands	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	409a      	lsls	r2, r3
 8001402:	0013      	movs	r3, r2
 8001404:	43da      	mvns	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2107      	movs	r1, #7
 8001414:	400b      	ands	r3, r1
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	409a      	lsls	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	409a      	lsls	r2, r3
 800143e:	0013      	movs	r3, r2
 8001440:	43da      	mvns	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	409a      	lsls	r2, r3
 8001456:	0013      	movs	r3, r2
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d00b      	beq.n	8001484 <HAL_GPIO_Init+0xdc>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d007      	beq.n	8001484 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001478:	2b11      	cmp	r3, #17
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b12      	cmp	r3, #18
 8001482:	d130      	bne.n	80014e6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	409a      	lsls	r2, r3
 80014a6:	0013      	movs	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80014ba:	2201      	movs	r2, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	43da      	mvns	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	2201      	movs	r2, #1
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	409a      	lsls	r2, r3
 8001508:	0013      	movs	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	055b      	lsls	r3, r3, #21
 800151e:	4013      	ands	r3, r2
 8001520:	d100      	bne.n	8001524 <HAL_GPIO_Init+0x17c>
 8001522:	e09a      	b.n	800165a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001524:	4b54      	ldr	r3, [pc, #336]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001526:	699a      	ldr	r2, [r3, #24]
 8001528:	4b53      	ldr	r3, [pc, #332]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 800152a:	2101      	movs	r1, #1
 800152c:	430a      	orrs	r2, r1
 800152e:	619a      	str	r2, [r3, #24]
 8001530:	4b51      	ldr	r3, [pc, #324]	; (8001678 <HAL_GPIO_Init+0x2d0>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2201      	movs	r2, #1
 8001536:	4013      	ands	r3, r2
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800153c:	4a4f      	ldr	r2, [pc, #316]	; (800167c <HAL_GPIO_Init+0x2d4>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	589b      	ldr	r3, [r3, r2]
 8001548:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2203      	movs	r2, #3
 800154e:	4013      	ands	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	409a      	lsls	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	43da      	mvns	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	2390      	movs	r3, #144	; 0x90
 8001564:	05db      	lsls	r3, r3, #23
 8001566:	429a      	cmp	r2, r3
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x1ea>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a44      	ldr	r2, [pc, #272]	; (8001680 <HAL_GPIO_Init+0x2d8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1e6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a43      	ldr	r2, [pc, #268]	; (8001684 <HAL_GPIO_Init+0x2dc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1e2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a42      	ldr	r2, [pc, #264]	; (8001688 <HAL_GPIO_Init+0x2e0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1de>
 8001582:	2303      	movs	r3, #3
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x1ec>
 8001586:	2305      	movs	r3, #5
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x1ec>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x1ec>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x1ec>
 8001592:	2300      	movs	r3, #0
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	2103      	movs	r1, #3
 8001598:	400a      	ands	r2, r1
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	; (800167c <HAL_GPIO_Init+0x2d4>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_GPIO_Init+0x2e4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	025b      	lsls	r3, r3, #9
 80015ca:	4013      	ands	r3, r2
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_GPIO_Init+0x2e4>)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_GPIO_Init+0x2e4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_GPIO_Init+0x2e4>)
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_GPIO_Init+0x2e4>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	035b      	lsls	r3, r3, #13
 800161e:	4013      	ands	r3, r2
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_GPIO_Init+0x2e4>)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_GPIO_Init+0x2e4>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43da      	mvns	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	039b      	lsls	r3, r3, #14
 8001648:	4013      	ands	r3, r2
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_GPIO_Init+0x2e4>)
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	40da      	lsrs	r2, r3
 8001668:	1e13      	subs	r3, r2, #0
 800166a:	d000      	beq.n	800166e <HAL_GPIO_Init+0x2c6>
 800166c:	e6a8      	b.n	80013c0 <HAL_GPIO_Init+0x18>
  } 
}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b006      	add	sp, #24
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	40010400 	.word	0x40010400

08001690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	0008      	movs	r0, r1
 800169a:	0011      	movs	r1, r2
 800169c:	1cbb      	adds	r3, r7, #2
 800169e:	1c02      	adds	r2, r0, #0
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	1c7b      	adds	r3, r7, #1
 80016a4:	1c0a      	adds	r2, r1, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a8:	1c7b      	adds	r3, r7, #1
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b0:	1cbb      	adds	r3, r7, #2
 80016b2:	881a      	ldrh	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ba:	1cbb      	adds	r3, r7, #2
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	d100      	bne.n	80016e4 <HAL_RCC_OscConfig+0x18>
 80016e2:	e08d      	b.n	8001800 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016e4:	4bc3      	ldr	r3, [pc, #780]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	220c      	movs	r2, #12
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d00e      	beq.n	800170e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f0:	4bc0      	ldr	r3, [pc, #768]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	220c      	movs	r2, #12
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d116      	bne.n	800172a <HAL_RCC_OscConfig+0x5e>
 80016fc:	4bbd      	ldr	r3, [pc, #756]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	401a      	ands	r2, r3
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	429a      	cmp	r2, r3
 800170c:	d10d      	bne.n	800172a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	4bb9      	ldr	r3, [pc, #740]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	029b      	lsls	r3, r3, #10
 8001716:	4013      	ands	r3, r2
 8001718:	d100      	bne.n	800171c <HAL_RCC_OscConfig+0x50>
 800171a:	e070      	b.n	80017fe <HAL_RCC_OscConfig+0x132>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d000      	beq.n	8001726 <HAL_RCC_OscConfig+0x5a>
 8001724:	e06b      	b.n	80017fe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e2b6      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_RCC_OscConfig+0x76>
 8001732:	4bb0      	ldr	r3, [pc, #704]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4baf      	ldr	r3, [pc, #700]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0249      	lsls	r1, r1, #9
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e02f      	b.n	80017a2 <HAL_RCC_OscConfig+0xd6>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x98>
 800174a:	4baa      	ldr	r3, [pc, #680]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4ba9      	ldr	r3, [pc, #676]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001750:	49a9      	ldr	r1, [pc, #676]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001752:	400a      	ands	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	4ba7      	ldr	r3, [pc, #668]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4ba6      	ldr	r3, [pc, #664]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800175c:	49a7      	ldr	r1, [pc, #668]	; (80019fc <HAL_RCC_OscConfig+0x330>)
 800175e:	400a      	ands	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e01e      	b.n	80017a2 <HAL_RCC_OscConfig+0xd6>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b05      	cmp	r3, #5
 800176a:	d10e      	bne.n	800178a <HAL_RCC_OscConfig+0xbe>
 800176c:	4ba1      	ldr	r3, [pc, #644]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4ba0      	ldr	r3, [pc, #640]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	02c9      	lsls	r1, r1, #11
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	4b9e      	ldr	r3, [pc, #632]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b9d      	ldr	r3, [pc, #628]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	0249      	lsls	r1, r1, #9
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0xd6>
 800178a:	4b9a      	ldr	r3, [pc, #616]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b99      	ldr	r3, [pc, #612]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001790:	4999      	ldr	r1, [pc, #612]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001792:	400a      	ands	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	4b97      	ldr	r3, [pc, #604]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b96      	ldr	r3, [pc, #600]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800179c:	4997      	ldr	r1, [pc, #604]	; (80019fc <HAL_RCC_OscConfig+0x330>)
 800179e:	400a      	ands	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d014      	beq.n	80017d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fd21 	bl	80011f0 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fd1c 	bl	80011f0 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e268      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	029b      	lsls	r3, r3, #10
 80017ce:	4013      	ands	r3, r2
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe8>
 80017d2:	e015      	b.n	8001800 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fd0c 	bl	80011f0 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017de:	f7ff fd07 	bl	80011f0 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b64      	cmp	r3, #100	; 0x64
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e253      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f0:	4b80      	ldr	r3, [pc, #512]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	029b      	lsls	r3, r3, #10
 80017f8:	4013      	ands	r3, r2
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x112>
 80017fc:	e000      	b.n	8001800 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2202      	movs	r2, #2
 8001806:	4013      	ands	r3, r2
 8001808:	d100      	bne.n	800180c <HAL_RCC_OscConfig+0x140>
 800180a:	e069      	b.n	80018e0 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800180c:	4b79      	ldr	r3, [pc, #484]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	220c      	movs	r2, #12
 8001812:	4013      	ands	r3, r2
 8001814:	d00b      	beq.n	800182e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	220c      	movs	r2, #12
 800181c:	4013      	ands	r3, r2
 800181e:	2b08      	cmp	r3, #8
 8001820:	d11c      	bne.n	800185c <HAL_RCC_OscConfig+0x190>
 8001822:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	025b      	lsls	r3, r3, #9
 800182a:	4013      	ands	r3, r2
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	4b71      	ldr	r3, [pc, #452]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d005      	beq.n	8001844 <HAL_RCC_OscConfig+0x178>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d001      	beq.n	8001844 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e229      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	22f8      	movs	r2, #248	; 0xf8
 800184a:	4393      	bics	r3, r2
 800184c:	0019      	movs	r1, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00da      	lsls	r2, r3, #3
 8001854:	4b67      	ldr	r3, [pc, #412]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e041      	b.n	80018e0 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d024      	beq.n	80018ae <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800186a:	2101      	movs	r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fcbe 	bl	80011f0 <HAL_GetTick>
 8001874:	0003      	movs	r3, r0
 8001876:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fcb9 	bl	80011f0 <HAL_GetTick>
 800187e:	0002      	movs	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e205      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2202      	movs	r2, #2
 8001892:	4013      	ands	r3, r2
 8001894:	d0f1      	beq.n	800187a <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	22f8      	movs	r2, #248	; 0xf8
 800189c:	4393      	bics	r3, r2
 800189e:	0019      	movs	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	00da      	lsls	r2, r3, #3
 80018a6:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e018      	b.n	80018e0 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	438a      	bics	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fc99 	bl	80011f0 <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fc94 	bl	80011f0 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e1e0      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2202      	movs	r2, #2
 80018dc:	4013      	ands	r3, r2
 80018de:	d1f1      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2208      	movs	r2, #8
 80018e6:	4013      	ands	r3, r2
 80018e8:	d036      	beq.n	8001958 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d019      	beq.n	8001926 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80018f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f6:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80018f8:	2101      	movs	r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fc77 	bl	80011f0 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fc72 	bl	80011f0 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e1be      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
 8001922:	d0f1      	beq.n	8001908 <HAL_RCC_OscConfig+0x23c>
 8001924:	e018      	b.n	8001958 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800192a:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800192c:	2101      	movs	r1, #1
 800192e:	438a      	bics	r2, r1
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fc5d 	bl	80011f0 <HAL_GetTick>
 8001936:	0003      	movs	r3, r0
 8001938:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fc58 	bl	80011f0 <HAL_GetTick>
 8001940:	0002      	movs	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1a4      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194e:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	2202      	movs	r2, #2
 8001954:	4013      	ands	r3, r2
 8001956:	d1f1      	bne.n	800193c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2204      	movs	r2, #4
 800195e:	4013      	ands	r3, r2
 8001960:	d100      	bne.n	8001964 <HAL_RCC_OscConfig+0x298>
 8001962:	e0b5      	b.n	8001ad0 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001964:	2317      	movs	r3, #23
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800196e:	69da      	ldr	r2, [r3, #28]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	055b      	lsls	r3, r3, #21
 8001974:	4013      	ands	r3, r2
 8001976:	d111      	bne.n	800199c <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800197a:	69da      	ldr	r2, [r3, #28]
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	0549      	lsls	r1, r1, #21
 8001982:	430a      	orrs	r2, r1
 8001984:	61da      	str	r2, [r3, #28]
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	055b      	lsls	r3, r3, #21
 800198e:	4013      	ands	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001994:	2317      	movs	r3, #23
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_RCC_OscConfig+0x334>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	d11a      	bne.n	80019de <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_RCC_OscConfig+0x334>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_RCC_OscConfig+0x334>)
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	0049      	lsls	r1, r1, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fc1b 	bl	80011f0 <HAL_GetTick>
 80019ba:	0003      	movs	r3, r0
 80019bc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c0:	f7ff fc16 	bl	80011f0 <HAL_GetTick>
 80019c4:	0002      	movs	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e162      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_OscConfig+0x334>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d10e      	bne.n	8001a04 <HAL_RCC_OscConfig+0x338>
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80019e8:	6a1a      	ldr	r2, [r3, #32]
 80019ea:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <HAL_RCC_OscConfig+0x328>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	621a      	str	r2, [r3, #32]
 80019f2:	e035      	b.n	8001a60 <HAL_RCC_OscConfig+0x394>
 80019f4:	40021000 	.word	0x40021000
 80019f8:	fffeffff 	.word	0xfffeffff
 80019fc:	fffbffff 	.word	0xfffbffff
 8001a00:	40007000 	.word	0x40007000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x35a>
 8001a0c:	4ba4      	ldr	r3, [pc, #656]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	4ba3      	ldr	r3, [pc, #652]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	438a      	bics	r2, r1
 8001a16:	621a      	str	r2, [r3, #32]
 8001a18:	4ba1      	ldr	r3, [pc, #644]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a1a:	6a1a      	ldr	r2, [r3, #32]
 8001a1c:	4ba0      	ldr	r3, [pc, #640]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a1e:	2104      	movs	r1, #4
 8001a20:	438a      	bics	r2, r1
 8001a22:	621a      	str	r2, [r3, #32]
 8001a24:	e01c      	b.n	8001a60 <HAL_RCC_OscConfig+0x394>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x37c>
 8001a2e:	4b9c      	ldr	r3, [pc, #624]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	4b9b      	ldr	r3, [pc, #620]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a34:	2104      	movs	r1, #4
 8001a36:	430a      	orrs	r2, r1
 8001a38:	621a      	str	r2, [r3, #32]
 8001a3a:	4b99      	ldr	r3, [pc, #612]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a3c:	6a1a      	ldr	r2, [r3, #32]
 8001a3e:	4b98      	ldr	r3, [pc, #608]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a40:	2101      	movs	r1, #1
 8001a42:	430a      	orrs	r2, r1
 8001a44:	621a      	str	r2, [r3, #32]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0x394>
 8001a48:	4b95      	ldr	r3, [pc, #596]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a4a:	6a1a      	ldr	r2, [r3, #32]
 8001a4c:	4b94      	ldr	r3, [pc, #592]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	438a      	bics	r2, r1
 8001a52:	621a      	str	r2, [r3, #32]
 8001a54:	4b92      	ldr	r3, [pc, #584]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a56:	6a1a      	ldr	r2, [r3, #32]
 8001a58:	4b91      	ldr	r3, [pc, #580]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	438a      	bics	r2, r1
 8001a5e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d014      	beq.n	8001a92 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff fbc2 	bl	80011f0 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	e009      	b.n	8001a86 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff fbbd 	bl	80011f0 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	4a89      	ldr	r2, [pc, #548]	; (8001ca4 <HAL_RCC_OscConfig+0x5d8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e108      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a86:	4b86      	ldr	r3, [pc, #536]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3a6>
 8001a90:	e013      	b.n	8001aba <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a92:	f7ff fbad 	bl	80011f0 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9a:	e009      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fba8 	bl	80011f0 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	4a7f      	ldr	r2, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x5d8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0f3      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	4b7b      	ldr	r3, [pc, #492]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aba:	2317      	movs	r3, #23
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	4b75      	ldr	r3, [pc, #468]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001aca:	4977      	ldr	r1, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x5dc>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d12a      	bne.n	8001b38 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae6:	4b6e      	ldr	r3, [pc, #440]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001ae8:	2104      	movs	r1, #4
 8001aea:	430a      	orrs	r2, r1
 8001aec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001aee:	4b6c      	ldr	r3, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af2:	4b6b      	ldr	r3, [pc, #428]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001af4:	2101      	movs	r1, #1
 8001af6:	430a      	orrs	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff fb79 	bl	80011f0 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b04:	f7ff fb74 	bl	80011f0 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e0c0      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d0f1      	beq.n	8001b04 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b20:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b24:	22f8      	movs	r2, #248	; 0xf8
 8001b26:	4393      	bics	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	00da      	lsls	r2, r3, #3
 8001b30:	4b5b      	ldr	r3, [pc, #364]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b32:	430a      	orrs	r2, r1
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
 8001b36:	e034      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	3305      	adds	r3, #5
 8001b3e:	d111      	bne.n	8001b64 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b44:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b46:	2104      	movs	r1, #4
 8001b48:	438a      	bics	r2, r1
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b4c:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	22f8      	movs	r2, #248	; 0xf8
 8001b52:	4393      	bics	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	00da      	lsls	r2, r3, #3
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34
 8001b62:	e01e      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b64:	4b4e      	ldr	r3, [pc, #312]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b70:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	438a      	bics	r2, r1
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fb38 	bl	80011f0 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b86:	f7ff fb33 	bl	80011f0 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e07f      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b98:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d1f1      	bne.n	8001b86 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d100      	bne.n	8001bac <HAL_RCC_OscConfig+0x4e0>
 8001baa:	e074      	b.n	8001c96 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bac:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d100      	bne.n	8001bba <HAL_RCC_OscConfig+0x4ee>
 8001bb8:	e06b      	b.n	8001c92 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d14c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001bc8:	4938      	ldr	r1, [pc, #224]	; (8001cac <HAL_RCC_OscConfig+0x5e0>)
 8001bca:	400a      	ands	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fb0f 	bl	80011f0 <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff fb0a 	bl	80011f0 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e056      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	049b      	lsls	r3, r3, #18
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	4393      	bics	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001c06:	430a      	orrs	r2, r1
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <HAL_RCC_OscConfig+0x5e4>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	0449      	lsls	r1, r1, #17
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fadd 	bl	80011f0 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff fad8 	bl	80011f0 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e024      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	049b      	lsls	r3, r3, #18
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x570>
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001c62:	4912      	ldr	r1, [pc, #72]	; (8001cac <HAL_RCC_OscConfig+0x5e0>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fac2 	bl	80011f0 <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c72:	f7ff fabd 	bl	80011f0 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e009      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCC_OscConfig+0x5d4>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	049b      	lsls	r3, r3, #18
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5a6>
 8001c90:	e001      	b.n	8001c96 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b006      	add	sp, #24
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	00001388 	.word	0x00001388
 8001ca8:	efffffff 	.word	0xefffffff
 8001cac:	feffffff 	.word	0xfeffffff
 8001cb0:	ffc2ffff 	.word	0xffc2ffff

08001cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d911      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd0:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4393      	bics	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce2:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0b6      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfe:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	22f0      	movs	r2, #240	; 0xf0
 8001d04:	4393      	bics	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4b58      	ldr	r3, [pc, #352]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2201      	movs	r2, #1
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d100      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x6a>
 8001d1c:	e067      	b.n	8001dee <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b52      	ldr	r3, [pc, #328]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	029b      	lsls	r3, r3, #10
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d114      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e095      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	049b      	lsls	r3, r3, #18
 8001d46:	4013      	ands	r3, r2
 8001d48:	d108      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e089      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2202      	movs	r2, #2
 8001d54:	4013      	ands	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e082      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5c:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4393      	bics	r3, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d70:	f7ff fa3e 	bl	80011f0 <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d111      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7ff fa35 	bl	80011f0 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a39      	ldr	r2, [pc, #228]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e065      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d1ef      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xce>
 8001da2:	e024      	b.n	8001dee <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d11b      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dac:	e009      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dae:	f7ff fa1f 	bl	80011f0 <HAL_GetTick>
 8001db2:	0002      	movs	r2, r0
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4a2e      	ldr	r2, [pc, #184]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e04f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d1ef      	bne.n	8001dae <HAL_RCC_ClockConfig+0xfa>
 8001dce:	e00e      	b.n	8001dee <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff fa0e 	bl	80011f0 <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e03e      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	220c      	movs	r2, #12
 8001dea:	4013      	ands	r3, r2
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d211      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	4013      	ands	r3, r2
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e020      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2204      	movs	r2, #4
 8001e26:	4013      	ands	r3, r2
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e3e:	f000 f821 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e42:	0001      	movs	r1, r0
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	000a      	movs	r2, r1
 8001e54:	40da      	lsrs	r2, r3
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_ClockConfig+0x1cc>)
 8001e58:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff f9a0 	bl	80011a0 <HAL_InitTick>
  
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	00001388 	.word	0x00001388
 8001e78:	fffff8ff 	.word	0xfffff8ff
 8001e7c:	0800748c 	.word	0x0800748c
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b08f      	sub	sp, #60	; 0x3c
 8001e88:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e8a:	2314      	movs	r3, #20
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	4a2b      	ldr	r2, [pc, #172]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e92:	c313      	stmia	r3!, {r0, r1, r4}
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e9e:	c313      	stmia	r3!, {r0, r1, r4}
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eac:	2300      	movs	r3, #0
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec0:	220c      	movs	r2, #12
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d002      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x4a>
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d003      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x50>
 8001ecc:	e02d      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ed2:	e02d      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	220f      	movs	r2, #15
 8001eda:	4013      	ands	r3, r2
 8001edc:	2214      	movs	r2, #20
 8001ede:	18ba      	adds	r2, r7, r2
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	220f      	movs	r2, #15
 8001eea:	4013      	ands	r3, r2
 8001eec:	1d3a      	adds	r2, r7, #4
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	025b      	lsls	r3, r3, #9
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d009      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001efe:	4812      	ldr	r0, [pc, #72]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f00:	f7fe f90a 	bl	8000118 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	001a      	movs	r2, r3
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	4353      	muls	r3, r2
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0e:	e009      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f12:	000a      	movs	r2, r1
 8001f14:	0152      	lsls	r2, r2, #5
 8001f16:	1a52      	subs	r2, r2, r1
 8001f18:	0193      	lsls	r3, r2, #6
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	185b      	adds	r3, r3, r1
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f28:	e002      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f2e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b00f      	add	sp, #60	; 0x3c
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	080072a0 	.word	0x080072a0
 8001f40:	080072b0 	.word	0x080072b0
 8001f44:	40021000 	.word	0x40021000
 8001f48:	007a1200 	.word	0x007a1200

08001f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f50:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f64:	f7ff fff2 	bl	8001f4c <HAL_RCC_GetHCLKFreq>
 8001f68:	0001      	movs	r1, r0
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	2207      	movs	r2, #7
 8001f72:	4013      	ands	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	40d9      	lsrs	r1, r3
 8001f7a:	000b      	movs	r3, r1
}    
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	40021000 	.word	0x40021000
 8001f88:	0800749c 	.word	0x0800749c

08001f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d100      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fa8:	e08f      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2317      	movs	r3, #23
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	055b      	lsls	r3, r3, #21
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d111      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	0549      	lsls	r1, r1, #21
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	61da      	str	r2, [r3, #28]
 8001fcc:	4b58      	ldr	r3, [pc, #352]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	055b      	lsls	r3, r3, #21
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fda:	2317      	movs	r3, #23
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe2:	4b54      	ldr	r3, [pc, #336]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	d11a      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fee:	4b51      	ldr	r3, [pc, #324]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	0049      	lsls	r1, r1, #1
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f8f8 	bl	80011f0 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	e008      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002006:	f7ff f8f3 	bl	80011f0 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b64      	cmp	r3, #100	; 0x64
 8002012:	d901      	bls.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e087      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4013      	ands	r3, r2
 8002022:	d0f0      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002024:	4b42      	ldr	r3, [pc, #264]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	23c0      	movs	r3, #192	; 0xc0
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d034      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	23c0      	movs	r3, #192	; 0xc0
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4013      	ands	r3, r2
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	429a      	cmp	r2, r3
 8002044:	d02c      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002050:	4b37      	ldr	r3, [pc, #220]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002052:	6a1a      	ldr	r2, [r3, #32]
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	0249      	lsls	r1, r1, #9
 800205a:	430a      	orrs	r2, r1
 800205c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800205e:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002060:	6a1a      	ldr	r2, [r3, #32]
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002064:	4935      	ldr	r1, [pc, #212]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002066:	400a      	ands	r2, r1
 8002068:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800206a:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	4013      	ands	r3, r2
 8002076:	d013      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff f8ba 	bl	80011f0 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	e009      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff f8b5 	bl	80011f0 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	4a2c      	ldr	r2, [pc, #176]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e048      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	d0f0      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a24      	ldr	r2, [pc, #144]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020b4:	2317      	movs	r3, #23
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020c4:	491f      	ldr	r1, [pc, #124]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	4013      	ands	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	2203      	movs	r2, #3
 80020da:	4393      	bics	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2220      	movs	r2, #32
 80020ee:	4013      	ands	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	2210      	movs	r2, #16
 80020f8:	4393      	bics	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002102:	430a      	orrs	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4013      	ands	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	4393      	bics	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002122:	430a      	orrs	r2, r1
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b006      	add	sp, #24
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
 8002138:	fffffcff 	.word	0xfffffcff
 800213c:	fffeffff 	.word	0xfffeffff
 8002140:	00001388 	.word	0x00001388
 8002144:	efffffff 	.word	0xefffffff

08002148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e08a      	b.n	8002270 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	225d      	movs	r2, #93	; 0x5d
 8002164:	5c9b      	ldrb	r3, [r3, r2]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	225c      	movs	r2, #92	; 0x5c
 8002170:	2100      	movs	r1, #0
 8002172:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0018      	movs	r0, r3
 8002178:	f004 fa64 	bl	8006644 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	225d      	movs	r2, #93	; 0x5d
 8002180:	2102      	movs	r1, #2
 8002182:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2140      	movs	r1, #64	; 0x40
 8002190:	438a      	bics	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	23e0      	movs	r3, #224	; 0xe0
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	429a      	cmp	r2, r3
 800219e:	d902      	bls.n	80021a6 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e002      	b.n	80021ac <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	015b      	lsls	r3, r3, #5
 80021aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	23f0      	movs	r3, #240	; 0xf0
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d008      	beq.n	80021ca <HAL_SPI_Init+0x82>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	23e0      	movs	r3, #224	; 0xe0
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d002      	beq.n	80021ca <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	23e0      	movs	r3, #224	; 0xe0
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	429a      	cmp	r2, r3
 80021dc:	d903      	bls.n	80021e6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
 80021e4:	e002      	b.n	80021ec <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6999      	ldr	r1, [r3, #24]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	400b      	ands	r3, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	431a      	orrs	r2, r3
 800221a:	0011      	movs	r1, r2
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	2204      	movs	r2, #4
 8002230:	401a      	ands	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	431a      	orrs	r2, r3
 8002244:	0011      	movs	r1, r2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	430a      	orrs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4907      	ldr	r1, [pc, #28]	; (8002278 <HAL_SPI_Init+0x130>)
 800225c:	400a      	ands	r2, r1
 800225e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	225d      	movs	r2, #93	; 0x5d
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	b004      	add	sp, #16
 8002276:	bd80      	pop	{r7, pc}
 8002278:	fffff7ff 	.word	0xfffff7ff

0800227c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	1dbb      	adds	r3, r7, #6
 800228a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002290:	231f      	movs	r3, #31
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	225c      	movs	r2, #92	; 0x5c
 800229c:	5c9b      	ldrb	r3, [r3, r2]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_SPI_Transmit+0x2a>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e14f      	b.n	8002546 <HAL_SPI_Transmit+0x2ca>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	225c      	movs	r2, #92	; 0x5c
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ae:	f7fe ff9f 	bl	80011f0 <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	225d      	movs	r2, #93	; 0x5d
 80022ba:	5c9b      	ldrb	r3, [r3, r2]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d004      	beq.n	80022cc <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 80022c2:	231f      	movs	r3, #31
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2202      	movs	r2, #2
 80022c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80022ca:	e131      	b.n	8002530 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_SPI_Transmit+0x5e>
 80022d2:	1dbb      	adds	r3, r7, #6
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d104      	bne.n	80022e4 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 80022da:	231f      	movs	r3, #31
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80022e2:	e125      	b.n	8002530 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	225d      	movs	r2, #93	; 0x5d
 80022e8:	2103      	movs	r1, #3
 80022ea:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1dba      	adds	r2, r7, #6
 80022fc:	8812      	ldrh	r2, [r2, #0]
 80022fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1dba      	adds	r2, r7, #6
 8002304:	8812      	ldrh	r2, [r2, #0]
 8002306:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2244      	movs	r2, #68	; 0x44
 8002312:	2100      	movs	r1, #0
 8002314:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2246      	movs	r2, #70	; 0x46
 800231a:	2100      	movs	r1, #0
 800231c:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	429a      	cmp	r2, r3
 8002334:	d108      	bne.n	8002348 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	01c9      	lsls	r1, r1, #7
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2240      	movs	r2, #64	; 0x40
 8002350:	4013      	ands	r3, r2
 8002352:	2b40      	cmp	r3, #64	; 0x40
 8002354:	d007      	beq.n	8002366 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	430a      	orrs	r2, r1
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	23e0      	movs	r3, #224	; 0xe0
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	429a      	cmp	r2, r3
 8002370:	d948      	bls.n	8002404 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_SPI_Transmit+0x108>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d139      	bne.n	80023f8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	3302      	adds	r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023a2:	e029      	b.n	80023f8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2202      	movs	r2, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d10f      	bne.n	80023d2 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	881a      	ldrh	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	3302      	adds	r3, #2
 80023c0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023d0:	e012      	b.n	80023f8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_SPI_Transmit+0x172>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	d00c      	beq.n	80023f8 <HAL_SPI_Transmit+0x17c>
 80023de:	f7fe ff07 	bl	80011f0 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d804      	bhi.n	80023f8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80023ee:	231f      	movs	r3, #31
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	2203      	movs	r2, #3
 80023f4:	701a      	strb	r2, [r3, #0]
          goto error;
 80023f6:	e09b      	b.n	8002530 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1d0      	bne.n	80023a4 <HAL_SPI_Transmit+0x128>
 8002402:	e071      	b.n	80024e8 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <HAL_SPI_Transmit+0x19a>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d163      	bne.n	80024de <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d90f      	bls.n	8002440 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	881a      	ldrh	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3302      	adds	r3, #2
 800242e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b02      	subs	r3, #2
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800243e:	e04e      	b.n	80024de <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	60ba      	str	r2, [r7, #8]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	320c      	adds	r2, #12
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800245e:	e03e      	b.n	80024de <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d124      	bne.n	80024b8 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d90f      	bls.n	8002498 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	881a      	ldrh	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3302      	adds	r3, #2
 8002486:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b02      	subs	r3, #2
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002496:	e022      	b.n	80024de <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	60ba      	str	r2, [r7, #8]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	320c      	adds	r2, #12
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024b6:	e012      	b.n	80024de <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_SPI_Transmit+0x258>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	d00c      	beq.n	80024de <HAL_SPI_Transmit+0x262>
 80024c4:	f7fe fe94 	bl	80011f0 <HAL_GetTick>
 80024c8:	0002      	movs	r2, r0
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d804      	bhi.n	80024de <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80024d4:	231f      	movs	r3, #31
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2203      	movs	r2, #3
 80024da:	701a      	strb	r2, [r3, #0]
          goto error;
 80024dc:	e028      	b.n	8002530 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1bb      	bne.n	8002460 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	6839      	ldr	r1, [r7, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 fb38 	bl	8002b64 <SPI_EndRxTxTransaction>
 80024f4:	1e03      	subs	r3, r0, #0
 80024f6:	d002      	beq.n	80024fe <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8002524:	231f      	movs	r3, #31
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e000      	b.n	8002530 <HAL_SPI_Transmit+0x2b4>
  }

error:
 800252e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	225d      	movs	r2, #93	; 0x5d
 8002534:	2101      	movs	r1, #1
 8002536:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	225c      	movs	r2, #92	; 0x5c
 800253c:	2100      	movs	r1, #0
 800253e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002540:	231f      	movs	r3, #31
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	781b      	ldrb	r3, [r3, #0]
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b008      	add	sp, #32
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	001a      	movs	r2, r3
 800255e:	1cbb      	adds	r3, r7, #2
 8002560:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 800256e:	2301      	movs	r3, #1
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002572:	2323      	movs	r3, #35	; 0x23
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	225c      	movs	r2, #92	; 0x5c
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_SPI_TransmitReceive+0x38>
 8002584:	2302      	movs	r3, #2
 8002586:	e1f2      	b.n	800296e <HAL_SPI_TransmitReceive+0x41e>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	225c      	movs	r2, #92	; 0x5c
 800258c:	2101      	movs	r1, #1
 800258e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002590:	f7fe fe2e 	bl	80011f0 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	225d      	movs	r2, #93	; 0x5d
 800259c:	5c9b      	ldrb	r3, [r3, r2]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d010      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x80>
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	2382      	movs	r3, #130	; 0x82
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d106      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x76>
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d004      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80025c6:	2323      	movs	r3, #35	; 0x23
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2202      	movs	r2, #2
 80025cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80025ce:	e1c3      	b.n	8002958 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0x94>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_SPI_TransmitReceive+0x94>
 80025dc:	1cbb      	adds	r3, r7, #2
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 80025e4:	2323      	movs	r3, #35	; 0x23
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80025ec:	e1b4      	b.n	8002958 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	225d      	movs	r2, #93	; 0x5d
 80025f2:	5c9b      	ldrb	r3, [r3, r2]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d003      	beq.n	8002602 <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	225d      	movs	r2, #93	; 0x5d
 80025fe:	2105      	movs	r1, #5
 8002600:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1cba      	adds	r2, r7, #2
 8002612:	2146      	movs	r1, #70	; 0x46
 8002614:	8812      	ldrh	r2, [r2, #0]
 8002616:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1cba      	adds	r2, r7, #2
 800261c:	2144      	movs	r1, #68	; 0x44
 800261e:	8812      	ldrh	r2, [r2, #0]
 8002620:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1cba      	adds	r2, r7, #2
 800262c:	8812      	ldrh	r2, [r2, #0]
 800262e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1cba      	adds	r2, r7, #2
 8002634:	8812      	ldrh	r2, [r2, #0]
 8002636:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	23e0      	movs	r3, #224	; 0xe0
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	429a      	cmp	r2, r3
 800264e:	d805      	bhi.n	800265c <HAL_SPI_TransmitReceive+0x10c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2246      	movs	r2, #70	; 0x46
 8002654:	5a9b      	ldrh	r3, [r3, r2]
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d908      	bls.n	800266e <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	49c4      	ldr	r1, [pc, #784]	; (8002978 <HAL_SPI_TransmitReceive+0x428>)
 8002668:	400a      	ands	r2, r1
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	e008      	b.n	8002680 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0149      	lsls	r1, r1, #5
 800267c:	430a      	orrs	r2, r1
 800267e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2240      	movs	r2, #64	; 0x40
 8002688:	4013      	ands	r3, r2
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d007      	beq.n	800269e <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	23e0      	movs	r3, #224	; 0xe0
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d800      	bhi.n	80026ac <HAL_SPI_TransmitReceive+0x15c>
 80026aa:	e075      	b.n	8002798 <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_SPI_TransmitReceive+0x16e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d160      	bne.n	8002780 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3302      	adds	r3, #2
 80026cc:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026dc:	e050      	b.n	8002780 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01c      	beq.n	800271e <HAL_SPI_TransmitReceive+0x1ce>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d017      	beq.n	800271e <HAL_SPI_TransmitReceive+0x1ce>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2202      	movs	r2, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d110      	bne.n	800271e <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	881a      	ldrh	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3302      	adds	r3, #2
 800270a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2246      	movs	r2, #70	; 0x46
 8002722:	5a9b      	ldrh	r3, [r3, r2]
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01a      	beq.n	8002760 <HAL_SPI_TransmitReceive+0x210>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2201      	movs	r2, #1
 8002732:	4013      	ands	r3, r2
 8002734:	2b01      	cmp	r3, #1
 8002736:	d113      	bne.n	8002760 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	b29a      	uxth	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3302      	adds	r3, #2
 8002748:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2246      	movs	r2, #70	; 0x46
 800274e:	5a9b      	ldrh	r3, [r3, r2]
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b299      	uxth	r1, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2246      	movs	r2, #70	; 0x46
 800275a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800275c:	2301      	movs	r3, #1
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	3301      	adds	r3, #1
 8002764:	d00c      	beq.n	8002780 <HAL_SPI_TransmitReceive+0x230>
 8002766:	f7fe fd43 	bl	80011f0 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002772:	429a      	cmp	r2, r3
 8002774:	d804      	bhi.n	8002780 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 8002776:	2323      	movs	r3, #35	; 0x23
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	2203      	movs	r2, #3
 800277c:	701a      	strb	r2, [r3, #0]
        goto error;
 800277e:	e0eb      	b.n	8002958 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1a9      	bne.n	80026de <HAL_SPI_TransmitReceive+0x18e>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2246      	movs	r2, #70	; 0x46
 800278e:	5a9b      	ldrh	r3, [r3, r2]
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1a3      	bne.n	80026de <HAL_SPI_TransmitReceive+0x18e>
 8002796:	e0ca      	b.n	800292e <HAL_SPI_TransmitReceive+0x3de>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x25c>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d000      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x25c>
 80027aa:	e0b3      	b.n	8002914 <HAL_SPI_TransmitReceive+0x3c4>
    {
      if (hspi->TxXferCount > 1U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d90f      	bls.n	80027d6 <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3302      	adds	r3, #2
 80027c4:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b02      	subs	r3, #2
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027d4:	e09e      	b.n	8002914 <HAL_SPI_TransmitReceive+0x3c4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	60ba      	str	r2, [r7, #8]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	320c      	adds	r2, #12
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027f4:	e08e      	b.n	8002914 <HAL_SPI_TransmitReceive+0x3c4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d031      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x310>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d02c      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x310>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d125      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x310>
      {
        if (hspi->TxXferCount > 1U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d90f      	bls.n	800283e <HAL_SPI_TransmitReceive+0x2ee>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3302      	adds	r3, #2
 800282c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b02      	subs	r3, #2
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800283c:	e00e      	b.n	800285c <HAL_SPI_TransmitReceive+0x30c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	60ba      	str	r2, [r7, #8]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	320c      	adds	r2, #12
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2246      	movs	r2, #70	; 0x46
 8002864:	5a9b      	ldrh	r3, [r3, r2]
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d043      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x3a4>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2201      	movs	r2, #1
 8002874:	4013      	ands	r3, r2
 8002876:	2b01      	cmp	r3, #1
 8002878:	d13c      	bne.n	80028f4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        if (hspi->RxXferCount > 1U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2246      	movs	r2, #70	; 0x46
 800287e:	5a9b      	ldrh	r3, [r3, r2]
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d921      	bls.n	80028ca <HAL_SPI_TransmitReceive+0x37a>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	b29a      	uxth	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3302      	adds	r3, #2
 8002896:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2246      	movs	r2, #70	; 0x46
 800289c:	5a9b      	ldrh	r3, [r3, r2]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b02      	subs	r3, #2
 80028a2:	b299      	uxth	r1, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2246      	movs	r2, #70	; 0x46
 80028a8:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2246      	movs	r2, #70	; 0x46
 80028ae:	5a9b      	ldrh	r3, [r3, r2]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d81c      	bhi.n	80028f0 <HAL_SPI_TransmitReceive+0x3a0>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	0149      	lsls	r1, r1, #5
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	e012      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x3a0>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	001a      	movs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	1c59      	adds	r1, r3, #1
 80028d6:	6079      	str	r1, [r7, #4]
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2246      	movs	r2, #70	; 0x46
 80028e2:	5a9b      	ldrh	r3, [r3, r2]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b299      	uxth	r1, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2246      	movs	r2, #70	; 0x46
 80028ee:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028f0:	2301      	movs	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	3301      	adds	r3, #1
 80028f8:	d00c      	beq.n	8002914 <HAL_SPI_TransmitReceive+0x3c4>
 80028fa:	f7fe fc79 	bl	80011f0 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002906:	429a      	cmp	r2, r3
 8002908:	d804      	bhi.n	8002914 <HAL_SPI_TransmitReceive+0x3c4>
      {
        errorcode = HAL_TIMEOUT;
 800290a:	2323      	movs	r3, #35	; 0x23
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	2203      	movs	r2, #3
 8002910:	701a      	strb	r2, [r3, #0]
        goto error;
 8002912:	e021      	b.n	8002958 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d000      	beq.n	8002920 <HAL_SPI_TransmitReceive+0x3d0>
 800291e:	e76a      	b.n	80027f6 <HAL_SPI_TransmitReceive+0x2a6>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2246      	movs	r2, #70	; 0x46
 8002924:	5a9b      	ldrh	r3, [r3, r2]
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d000      	beq.n	800292e <HAL_SPI_TransmitReceive+0x3de>
 800292c:	e763      	b.n	80027f6 <HAL_SPI_TransmitReceive+0x2a6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 f915 	bl	8002b64 <SPI_EndRxTxTransaction>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d002      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x3f4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 800294c:	2323      	movs	r3, #35	; 0x23
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e000      	b.n	8002958 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8002956:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	225d      	movs	r2, #93	; 0x5d
 800295c:	2101      	movs	r1, #1
 800295e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	225c      	movs	r2, #92	; 0x5c
 8002964:	2100      	movs	r1, #0
 8002966:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002968:	2323      	movs	r3, #35	; 0x23
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	781b      	ldrb	r3, [r3, #0]
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b00a      	add	sp, #40	; 0x28
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	ffffefff 	.word	0xffffefff

0800297c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	225d      	movs	r2, #93	; 0x5d
 8002988:	5c9b      	ldrb	r3, [r3, r2]
 800298a:	b2db      	uxtb	r3, r3
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bd80      	pop	{r7, pc}

08002994 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a2:	e050      	b.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	d04d      	beq.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0x2c>
 80029b0:	f7fe fc1e 	bl	80011f0 <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d842      	bhi.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	21e0      	movs	r1, #224	; 0xe0
 80029cc:	438a      	bics	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	2382      	movs	r3, #130	; 0x82
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	429a      	cmp	r2, r3
 80029da:	d113      	bne.n	8002a04 <SPI_WaitFlagStateUntilTimeout+0x70>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d005      	beq.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2140      	movs	r1, #64	; 0x40
 8002a00:	438a      	bics	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	019b      	lsls	r3, r3, #6
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d110      	bne.n	8002a32 <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4914      	ldr	r1, [pc, #80]	; (8002a6c <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	0189      	lsls	r1, r1, #6
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	225d      	movs	r2, #93	; 0x5d
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	225c      	movs	r2, #92	; 0x5c
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e00e      	b.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d101      	bne.n	8002a5a <SPI_WaitFlagStateUntilTimeout+0xc6>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0xc8>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d1a0      	bne.n	80029a4 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b004      	add	sp, #16
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	ffffdfff 	.word	0xffffdfff

08002a70 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002a7e:	e062      	b.n	8002b46 <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	23c0      	movs	r3, #192	; 0xc0
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d10c      	bne.n	8002aa4 <SPI_WaitFifoStateUntilTimeout+0x34>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	2117      	movs	r1, #23
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	d04d      	beq.n	8002b46 <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <SPI_WaitFifoStateUntilTimeout+0x50>
 8002ab0:	f7fe fb9e 	bl	80011f0 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d842      	bhi.n	8002b46 <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	21e0      	movs	r1, #224	; 0xe0
 8002acc:	438a      	bics	r2, r1
 8002ace:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	2382      	movs	r3, #130	; 0x82
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d113      	bne.n	8002b04 <SPI_WaitFifoStateUntilTimeout+0x94>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d005      	beq.n	8002af4 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2140      	movs	r1, #64	; 0x40
 8002b00:	438a      	bics	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	019b      	lsls	r3, r3, #6
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d110      	bne.n	8002b32 <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4911      	ldr	r1, [pc, #68]	; (8002b60 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	0189      	lsls	r1, r1, #6
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	225d      	movs	r2, #93	; 0x5d
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	225c      	movs	r2, #92	; 0x5c
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e008      	b.n	8002b58 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d194      	bne.n	8002a80 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b006      	add	sp, #24
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	ffffdfff 	.word	0xffffdfff

08002b64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	23c0      	movs	r3, #192	; 0xc0
 8002b74:	0159      	lsls	r1, r3, #5
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f7ff ff76 	bl	8002a70 <SPI_WaitFifoStateUntilTimeout>
 8002b84:	1e03      	subs	r3, r0, #0
 8002b86:	d007      	beq.n	8002b98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e027      	b.n	8002be8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	f7ff fef5 	bl	8002994 <SPI_WaitFlagStateUntilTimeout>
 8002baa:	1e03      	subs	r3, r0, #0
 8002bac:	d007      	beq.n	8002bbe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e014      	b.n	8002be8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	00d9      	lsls	r1, r3, #3
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	0013      	movs	r3, r2
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f7ff ff4f 	bl	8002a70 <SPI_WaitFifoStateUntilTimeout>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d007      	beq.n	8002be6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bda:	2220      	movs	r2, #32
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e000      	b.n	8002be8 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	0018      	movs	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b004      	add	sp, #16
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e047      	b.n	8002c92 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2269      	movs	r2, #105	; 0x69
 8002c06:	5c9b      	ldrb	r3, [r3, r2]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2268      	movs	r2, #104	; 0x68
 8002c12:	2100      	movs	r1, #0
 8002c14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f003 fd5f 	bl	80066dc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2269      	movs	r2, #105	; 0x69
 8002c22:	2124      	movs	r1, #36	; 0x24
 8002c24:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	438a      	bics	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 f8d5 	bl	8002de8 <UART_SetConfig>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e024      	b.n	8002c92 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 fa3e 	bl	80030d4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_UART_Init+0xac>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	212a      	movs	r1, #42	; 0x2a
 8002c74:	438a      	bics	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2101      	movs	r1, #1
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 fad6 	bl	800323c <UART_CheckIdleState>
 8002c90:	0003      	movs	r3, r0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	ffffb7ff 	.word	0xffffb7ff

08002ca0 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	1dbb      	adds	r3, r7, #6
 8002cae:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2269      	movs	r2, #105	; 0x69
 8002cb8:	5c9b      	ldrb	r3, [r3, r2]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d000      	beq.n	8002cc2 <HAL_UART_Transmit+0x22>
 8002cc0:	e08c      	b.n	8002ddc <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_UART_Transmit+0x30>
 8002cc8:	1dbb      	adds	r3, r7, #6
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e084      	b.n	8002dde <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	015b      	lsls	r3, r3, #5
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d109      	bne.n	8002cf4 <HAL_UART_Transmit+0x54>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2201      	movs	r2, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	d001      	beq.n	8002cf4 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e074      	b.n	8002dde <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2268      	movs	r2, #104	; 0x68
 8002cf8:	5c9b      	ldrb	r3, [r3, r2]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Transmit+0x62>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e06d      	b.n	8002dde <HAL_UART_Transmit+0x13e>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2268      	movs	r2, #104	; 0x68
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2269      	movs	r2, #105	; 0x69
 8002d14:	2121      	movs	r1, #33	; 0x21
 8002d16:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002d18:	f7fe fa6a 	bl	80011f0 <HAL_GetTick>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1dba      	adds	r2, r7, #6
 8002d24:	2150      	movs	r1, #80	; 0x50
 8002d26:	8812      	ldrh	r2, [r2, #0]
 8002d28:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1dba      	adds	r2, r7, #6
 8002d2e:	2152      	movs	r1, #82	; 0x52
 8002d30:	8812      	ldrh	r2, [r2, #0]
 8002d32:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8002d34:	e035      	b.n	8002da2 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2252      	movs	r2, #82	; 0x52
 8002d3a:	5a9b      	ldrh	r3, [r3, r2]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b299      	uxth	r1, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2252      	movs	r2, #82	; 0x52
 8002d46:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	0013      	movs	r3, r2
 8002d52:	2200      	movs	r2, #0
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	f000 fac3 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e03d      	b.n	8002dde <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d111      	bne.n	8002d92 <HAL_UART_Transmit+0xf2>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10d      	bne.n	8002d92 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	05d2      	lsls	r2, r2, #23
 8002d84:	0dd2      	lsrs	r2, r2, #23
 8002d86:	b292      	uxth	r2, r2
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	e007      	b.n	8002da2 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	60ba      	str	r2, [r7, #8]
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2252      	movs	r2, #82	; 0x52
 8002da6:	5a9b      	ldrh	r3, [r3, r2]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1c3      	bne.n	8002d36 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	0013      	movs	r3, r2
 8002db8:	2200      	movs	r2, #0
 8002dba:	2140      	movs	r1, #64	; 0x40
 8002dbc:	f000 fa90 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e00a      	b.n	8002dde <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2269      	movs	r2, #105	; 0x69
 8002dcc:	2120      	movs	r1, #32
 8002dce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2268      	movs	r2, #104	; 0x68
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
  }
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b006      	add	sp, #24
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002df4:	2317      	movs	r3, #23
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	2210      	movs	r2, #16
 8002dfa:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002e04:	2314      	movs	r3, #20
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2200      	movs	r2, #0
 8002e0a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e0c:	2313      	movs	r3, #19
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4aa0      	ldr	r2, [pc, #640]	; (80030b4 <UART_SetConfig+0x2cc>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a9b      	ldr	r2, [pc, #620]	; (80030b8 <UART_SetConfig+0x2d0>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a93      	ldr	r2, [pc, #588]	; (80030bc <UART_SetConfig+0x2d4>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a8f      	ldr	r2, [pc, #572]	; (80030c0 <UART_SetConfig+0x2d8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d125      	bne.n	8002ed2 <UART_SetConfig+0xea>
 8002e86:	4b8f      	ldr	r3, [pc, #572]	; (80030c4 <UART_SetConfig+0x2dc>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d00f      	beq.n	8002eb2 <UART_SetConfig+0xca>
 8002e92:	d304      	bcc.n	8002e9e <UART_SetConfig+0xb6>
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d011      	beq.n	8002ebc <UART_SetConfig+0xd4>
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d005      	beq.n	8002ea8 <UART_SetConfig+0xc0>
 8002e9c:	e013      	b.n	8002ec6 <UART_SetConfig+0xde>
 8002e9e:	2317      	movs	r3, #23
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e022      	b.n	8002eee <UART_SetConfig+0x106>
 8002ea8:	2317      	movs	r3, #23
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2202      	movs	r2, #2
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e01d      	b.n	8002eee <UART_SetConfig+0x106>
 8002eb2:	2317      	movs	r3, #23
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e018      	b.n	8002eee <UART_SetConfig+0x106>
 8002ebc:	2317      	movs	r3, #23
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	701a      	strb	r2, [r3, #0]
 8002ec4:	e013      	b.n	8002eee <UART_SetConfig+0x106>
 8002ec6:	2317      	movs	r3, #23
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2210      	movs	r2, #16
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	e00d      	b.n	8002eee <UART_SetConfig+0x106>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7c      	ldr	r2, [pc, #496]	; (80030c8 <UART_SetConfig+0x2e0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d104      	bne.n	8002ee6 <UART_SetConfig+0xfe>
 8002edc:	2317      	movs	r3, #23
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e003      	b.n	8002eee <UART_SetConfig+0x106>
 8002ee6:	2317      	movs	r3, #23
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	2210      	movs	r2, #16
 8002eec:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d000      	beq.n	8002efc <UART_SetConfig+0x114>
 8002efa:	e077      	b.n	8002fec <UART_SetConfig+0x204>
  {
    switch (clocksource)
 8002efc:	2317      	movs	r3, #23
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d01c      	beq.n	8002f40 <UART_SetConfig+0x158>
 8002f06:	dc02      	bgt.n	8002f0e <UART_SetConfig+0x126>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <UART_SetConfig+0x130>
 8002f0c:	e04f      	b.n	8002fae <UART_SetConfig+0x1c6>
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d027      	beq.n	8002f62 <UART_SetConfig+0x17a>
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d039      	beq.n	8002f8a <UART_SetConfig+0x1a2>
 8002f16:	e04a      	b.n	8002fae <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f18:	f7ff f822 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	005a      	lsls	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	18d2      	adds	r2, r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	0010      	movs	r0, r2
 8002f30:	f7fd f8f2 	bl	8000118 <__udivsi3>
 8002f34:	0003      	movs	r3, r0
 8002f36:	001a      	movs	r2, r3
 8002f38:	2314      	movs	r3, #20
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	801a      	strh	r2, [r3, #0]
        break;
 8002f3e:	e03b      	b.n	8002fb8 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	4a61      	ldr	r2, [pc, #388]	; (80030cc <UART_SetConfig+0x2e4>)
 8002f48:	189a      	adds	r2, r3, r2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0019      	movs	r1, r3
 8002f50:	0010      	movs	r0, r2
 8002f52:	f7fd f8e1 	bl	8000118 <__udivsi3>
 8002f56:	0003      	movs	r3, r0
 8002f58:	001a      	movs	r2, r3
 8002f5a:	2314      	movs	r3, #20
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	801a      	strh	r2, [r3, #0]
        break;
 8002f60:	e02a      	b.n	8002fb8 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f62:	f7fe ff8f 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8002f66:	0003      	movs	r3, r0
 8002f68:	005a      	lsls	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	18d2      	adds	r2, r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	0019      	movs	r1, r3
 8002f78:	0010      	movs	r0, r2
 8002f7a:	f7fd f8cd 	bl	8000118 <__udivsi3>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	001a      	movs	r2, r3
 8002f82:	2314      	movs	r3, #20
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	801a      	strh	r2, [r3, #0]
        break;
 8002f88:	e016      	b.n	8002fb8 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	0252      	lsls	r2, r2, #9
 8002f94:	189a      	adds	r2, r3, r2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	0010      	movs	r0, r2
 8002f9e:	f7fd f8bb 	bl	8000118 <__udivsi3>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	2314      	movs	r3, #20
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	801a      	strh	r2, [r3, #0]
        break;
 8002fac:	e004      	b.n	8002fb8 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002fae:	2313      	movs	r3, #19
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
        break;
 8002fb6:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002fb8:	200a      	movs	r0, #10
 8002fba:	183b      	adds	r3, r7, r0
 8002fbc:	2414      	movs	r4, #20
 8002fbe:	193a      	adds	r2, r7, r4
 8002fc0:	8812      	ldrh	r2, [r2, #0]
 8002fc2:	210f      	movs	r1, #15
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	105b      	asrs	r3, r3, #1
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	183b      	adds	r3, r7, r0
 8002fd8:	183a      	adds	r2, r7, r0
 8002fda:	8812      	ldrh	r2, [r2, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	183a      	adds	r2, r7, r0
 8002fe6:	8812      	ldrh	r2, [r2, #0]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	e05b      	b.n	80030a4 <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 8002fec:	2317      	movs	r3, #23
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d01b      	beq.n	800302e <UART_SetConfig+0x246>
 8002ff6:	dc02      	bgt.n	8002ffe <UART_SetConfig+0x216>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <UART_SetConfig+0x220>
 8002ffc:	e04d      	b.n	800309a <UART_SetConfig+0x2b2>
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d026      	beq.n	8003050 <UART_SetConfig+0x268>
 8003002:	2b08      	cmp	r3, #8
 8003004:	d037      	beq.n	8003076 <UART_SetConfig+0x28e>
 8003006:	e048      	b.n	800309a <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003008:	f7fe ffaa 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 800300c:	0002      	movs	r2, r0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	18d2      	adds	r2, r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	0019      	movs	r1, r3
 800301c:	0010      	movs	r0, r2
 800301e:	f7fd f87b 	bl	8000118 <__udivsi3>
 8003022:	0003      	movs	r3, r0
 8003024:	b29a      	uxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60da      	str	r2, [r3, #12]
        break;
 800302c:	e03a      	b.n	80030a4 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	4a26      	ldr	r2, [pc, #152]	; (80030d0 <UART_SetConfig+0x2e8>)
 8003036:	189a      	adds	r2, r3, r2
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	0019      	movs	r1, r3
 800303e:	0010      	movs	r0, r2
 8003040:	f7fd f86a 	bl	8000118 <__udivsi3>
 8003044:	0003      	movs	r3, r0
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60da      	str	r2, [r3, #12]
        break;
 800304e:	e029      	b.n	80030a4 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003050:	f7fe ff18 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8003054:	0002      	movs	r2, r0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	18d2      	adds	r2, r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0019      	movs	r1, r3
 8003064:	0010      	movs	r0, r2
 8003066:	f7fd f857 	bl	8000118 <__udivsi3>
 800306a:	0003      	movs	r3, r0
 800306c:	b29a      	uxth	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60da      	str	r2, [r3, #12]
        break;
 8003074:	e016      	b.n	80030a4 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	0212      	lsls	r2, r2, #8
 8003080:	189a      	adds	r2, r3, r2
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	0019      	movs	r1, r3
 8003088:	0010      	movs	r0, r2
 800308a:	f7fd f845 	bl	8000118 <__udivsi3>
 800308e:	0003      	movs	r3, r0
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60da      	str	r2, [r3, #12]
        break;
 8003098:	e004      	b.n	80030a4 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800309a:	2313      	movs	r3, #19
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
        break;
 80030a2:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80030a4:	2313      	movs	r3, #19
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	781b      	ldrb	r3, [r3, #0]

}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b007      	add	sp, #28
 80030b0:	bd90      	pop	{r4, r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	ffff69f3 	.word	0xffff69f3
 80030b8:	ffffcfff 	.word	0xffffcfff
 80030bc:	fffff4ff 	.word	0xfffff4ff
 80030c0:	40013800 	.word	0x40013800
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40004400 	.word	0x40004400
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	007a1200 	.word	0x007a1200

080030d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	2201      	movs	r2, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	d00b      	beq.n	80030fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a4a      	ldr	r2, [pc, #296]	; (8003218 <UART_AdvFeatureConfig+0x144>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2202      	movs	r2, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d00b      	beq.n	8003120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4a43      	ldr	r2, [pc, #268]	; (800321c <UART_AdvFeatureConfig+0x148>)
 8003110:	4013      	ands	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2204      	movs	r2, #4
 8003126:	4013      	ands	r3, r2
 8003128:	d00b      	beq.n	8003142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a3b      	ldr	r2, [pc, #236]	; (8003220 <UART_AdvFeatureConfig+0x14c>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2208      	movs	r2, #8
 8003148:	4013      	ands	r3, r2
 800314a:	d00b      	beq.n	8003164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <UART_AdvFeatureConfig+0x150>)
 8003154:	4013      	ands	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2210      	movs	r2, #16
 800316a:	4013      	ands	r3, r2
 800316c:	d00b      	beq.n	8003186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a2c      	ldr	r2, [pc, #176]	; (8003228 <UART_AdvFeatureConfig+0x154>)
 8003176:	4013      	ands	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	2220      	movs	r2, #32
 800318c:	4013      	ands	r3, r2
 800318e:	d00b      	beq.n	80031a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4a25      	ldr	r2, [pc, #148]	; (800322c <UART_AdvFeatureConfig+0x158>)
 8003198:	4013      	ands	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2240      	movs	r2, #64	; 0x40
 80031ae:	4013      	ands	r3, r2
 80031b0:	d01d      	beq.n	80031ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <UART_AdvFeatureConfig+0x15c>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	035b      	lsls	r3, r3, #13
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d10b      	bne.n	80031ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <UART_AdvFeatureConfig+0x160>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	4013      	ands	r3, r2
 80031f6:	d00b      	beq.n	8003210 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <UART_AdvFeatureConfig+0x164>)
 8003200:	4013      	ands	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}
 8003218:	fffdffff 	.word	0xfffdffff
 800321c:	fffeffff 	.word	0xfffeffff
 8003220:	fffbffff 	.word	0xfffbffff
 8003224:	ffff7fff 	.word	0xffff7fff
 8003228:	ffffefff 	.word	0xffffefff
 800322c:	ffffdfff 	.word	0xffffdfff
 8003230:	ffefffff 	.word	0xffefffff
 8003234:	ff9fffff 	.word	0xff9fffff
 8003238:	fff7ffff 	.word	0xfff7ffff

0800323c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af02      	add	r7, sp, #8
 8003242:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800324e:	f7fd ffcf 	bl	80011f0 <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1f      	ldr	r2, [pc, #124]	; (80032d8 <UART_CheckIdleState+0x9c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d129      	bne.n	80032b4 <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2208      	movs	r2, #8
 8003268:	4013      	ands	r3, r2
 800326a:	2b08      	cmp	r3, #8
 800326c:	d10d      	bne.n	800328a <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	0399      	lsls	r1, r3, #14
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4b19      	ldr	r3, [pc, #100]	; (80032dc <UART_CheckIdleState+0xa0>)
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	0013      	movs	r3, r2
 800327c:	2200      	movs	r2, #0
 800327e:	f000 f82f 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d001      	beq.n	800328a <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e021      	b.n	80032ce <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2204      	movs	r2, #4
 8003292:	4013      	ands	r3, r2
 8003294:	2b04      	cmp	r3, #4
 8003296:	d10d      	bne.n	80032b4 <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	03d9      	lsls	r1, r3, #15
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <UART_CheckIdleState+0xa0>)
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	0013      	movs	r3, r2
 80032a6:	2200      	movs	r2, #0
 80032a8:	f000 f81a 	bl	80032e0 <UART_WaitOnFlagUntilTimeout>
 80032ac:	1e03      	subs	r3, r0, #0
 80032ae:	d001      	beq.n	80032b4 <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e00c      	b.n	80032ce <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2269      	movs	r2, #105	; 0x69
 80032b8:	2120      	movs	r1, #32
 80032ba:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	226a      	movs	r2, #106	; 0x6a
 80032c0:	2120      	movs	r1, #32
 80032c2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2268      	movs	r2, #104	; 0x68
 80032c8:	2100      	movs	r1, #0
 80032ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b004      	add	sp, #16
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	40013800 	.word	0x40013800
 80032dc:	01ffffff 	.word	0x01ffffff

080032e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f0:	e02b      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3301      	adds	r3, #1
 80032f6:	d028      	beq.n	800334a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0x2e>
 80032fe:	f7fd ff77 	bl	80011f0 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	429a      	cmp	r2, r3
 800330c:	d21d      	bcs.n	800334a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4916      	ldr	r1, [pc, #88]	; (8003374 <UART_WaitOnFlagUntilTimeout+0x94>)
 800331a:	400a      	ands	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2101      	movs	r1, #1
 800332a:	438a      	bics	r2, r1
 800332c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2269      	movs	r2, #105	; 0x69
 8003332:	2120      	movs	r1, #32
 8003334:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	226a      	movs	r2, #106	; 0x6a
 800333a:	2120      	movs	r1, #32
 800333c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2268      	movs	r2, #104	; 0x68
 8003342:	2100      	movs	r1, #0
 8003344:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e00f      	b.n	800336a <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	4013      	ands	r3, r2
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	425a      	negs	r2, r3
 800335a:	4153      	adcs	r3, r2
 800335c:	b2db      	uxtb	r3, r3
 800335e:	001a      	movs	r2, r3
 8003360:	1dfb      	adds	r3, r7, #7
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d0c4      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b004      	add	sp, #16
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	fffffe5f 	.word	0xfffffe5f

08003378 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	0002      	movs	r2, r0
 8003380:	1dfb      	adds	r3, r7, #7
 8003382:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003384:	1dfb      	adds	r3, r7, #7
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <disk_status+0x40>)
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	3304      	adds	r3, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	1dfa      	adds	r2, r7, #7
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	4907      	ldr	r1, [pc, #28]	; (80033b8 <disk_status+0x40>)
 800339a:	188a      	adds	r2, r1, r2
 800339c:	7a12      	ldrb	r2, [r2, #8]
 800339e:	250f      	movs	r5, #15
 80033a0:	197c      	adds	r4, r7, r5
 80033a2:	0010      	movs	r0, r2
 80033a4:	4798      	blx	r3
 80033a6:	0003      	movs	r3, r0
 80033a8:	7023      	strb	r3, [r4, #0]
  return stat;
 80033aa:	197b      	adds	r3, r7, r5
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	200000bc 	.word	0x200000bc

080033bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	0002      	movs	r2, r0
 80033c4:	1dfb      	adds	r3, r7, #7
 80033c6:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80033c8:	230f      	movs	r3, #15
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <disk_initialize+0x60>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d117      	bne.n	800340c <disk_initialize+0x50>
  { 
    disk.is_initialized[pdrv] = 1;
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4a0e      	ldr	r2, [pc, #56]	; (800341c <disk_initialize+0x60>)
 80033e2:	2101      	movs	r1, #1
 80033e4:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	4a0c      	ldr	r2, [pc, #48]	; (800341c <disk_initialize+0x60>)
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	18d3      	adds	r3, r2, r3
 80033f0:	3304      	adds	r3, #4
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	1dfa      	adds	r2, r7, #7
 80033f8:	7812      	ldrb	r2, [r2, #0]
 80033fa:	4908      	ldr	r1, [pc, #32]	; (800341c <disk_initialize+0x60>)
 80033fc:	188a      	adds	r2, r1, r2
 80033fe:	7a12      	ldrb	r2, [r2, #8]
 8003400:	210f      	movs	r1, #15
 8003402:	187c      	adds	r4, r7, r1
 8003404:	0010      	movs	r0, r2
 8003406:	4798      	blx	r3
 8003408:	0003      	movs	r3, r0
 800340a:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800340c:	230f      	movs	r3, #15
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	781b      	ldrb	r3, [r3, #0]
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b005      	add	sp, #20
 8003418:	bd90      	pop	{r4, r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	200000bc 	.word	0x200000bc

08003420 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	210f      	movs	r1, #15
 800342e:	187b      	adds	r3, r7, r1
 8003430:	1c02      	adds	r2, r0, #0
 8003432:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003434:	187b      	adds	r3, r7, r1
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <disk_read+0x4c>)
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	18d3      	adds	r3, r2, r3
 800343e:	3304      	adds	r3, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689d      	ldr	r5, [r3, #8]
 8003444:	187b      	adds	r3, r7, r1
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	4a08      	ldr	r2, [pc, #32]	; (800346c <disk_read+0x4c>)
 800344a:	18d3      	adds	r3, r2, r3
 800344c:	7a18      	ldrb	r0, [r3, #8]
 800344e:	2617      	movs	r6, #23
 8003450:	19bc      	adds	r4, r7, r6
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	47a8      	blx	r5
 800345a:	0003      	movs	r3, r0
 800345c:	7023      	strb	r3, [r4, #0]
  return res;
 800345e:	19bb      	adds	r3, r7, r6
 8003460:	781b      	ldrb	r3, [r3, #0]
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b007      	add	sp, #28
 8003468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	200000bc 	.word	0x200000bc

08003470 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	210f      	movs	r1, #15
 800347e:	187b      	adds	r3, r7, r1
 8003480:	1c02      	adds	r2, r0, #0
 8003482:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003484:	187b      	adds	r3, r7, r1
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <disk_write+0x4c>)
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	18d3      	adds	r3, r2, r3
 800348e:	3304      	adds	r3, #4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68dd      	ldr	r5, [r3, #12]
 8003494:	187b      	adds	r3, r7, r1
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <disk_write+0x4c>)
 800349a:	18d3      	adds	r3, r2, r3
 800349c:	7a18      	ldrb	r0, [r3, #8]
 800349e:	2617      	movs	r6, #23
 80034a0:	19bc      	adds	r4, r7, r6
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	47a8      	blx	r5
 80034aa:	0003      	movs	r3, r0
 80034ac:	7023      	strb	r3, [r4, #0]
  return res;
 80034ae:	19bb      	adds	r3, r7, r6
 80034b0:	781b      	ldrb	r3, [r3, #0]
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b007      	add	sp, #28
 80034b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	200000bc 	.word	0x200000bc

080034c0 <mem_set>:
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80034d0:	e005      	b.n	80034de <mem_set+0x1e>
		*d++ = (BYTE)val;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	617a      	str	r2, [r7, #20]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f4      	bne.n	80034d2 <mem_set+0x12>
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b006      	add	sp, #24
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	1e5a      	subs	r2, r3, #1
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <mem_cmp+0x40>
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	61fa      	str	r2, [r7, #28]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	0019      	movs	r1, r3
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	61ba      	str	r2, [r7, #24]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	1acb      	subs	r3, r1, r3
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0ec      	beq.n	800350a <mem_cmp+0x1a>
	return r;
 8003530:	697b      	ldr	r3, [r7, #20]
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b008      	add	sp, #32
 8003538:	bd80      	pop	{r7, pc}

0800353a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003544:	e002      	b.n	800354c <chk_chr+0x12>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3301      	adds	r3, #1
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <chk_chr+0x26>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	001a      	movs	r2, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	4293      	cmp	r3, r2
 800355e:	d1f2      	bne.n	8003546 <chk_chr+0xc>
	return *str;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	781b      	ldrb	r3, [r3, #0]
}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}

0800356c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e02c      	b.n	80035d6 <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 800357c:	4955      	ldr	r1, [pc, #340]	; (80036d4 <inc_lock+0x168>)
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	0013      	movs	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	189b      	adds	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	585a      	ldr	r2, [r3, r1]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	58cb      	ldr	r3, [r1, r3]
 8003592:	429a      	cmp	r2, r3
 8003594:	d11c      	bne.n	80035d0 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 8003596:	494f      	ldr	r1, [pc, #316]	; (80036d4 <inc_lock+0x168>)
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	0013      	movs	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	189b      	adds	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	18cb      	adds	r3, r1, r3
 80035a4:	3304      	adds	r3, #4
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	2382      	movs	r3, #130	; 0x82
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d10d      	bne.n	80035d0 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 80035b4:	4947      	ldr	r1, [pc, #284]	; (80036d4 <inc_lock+0x168>)
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	0013      	movs	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	189b      	adds	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	18cb      	adds	r3, r1, r3
 80035c2:	3308      	adds	r3, #8
 80035c4:	881a      	ldrh	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4943      	ldr	r1, [pc, #268]	; (80036d8 <inc_lock+0x16c>)
 80035ca:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d006      	beq.n	80035de <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3301      	adds	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d9cf      	bls.n	800357c <inc_lock+0x10>
 80035dc:	e000      	b.n	80035e0 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 80035de:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d145      	bne.n	8003672 <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e002      	b.n	80035f2 <inc_lock+0x86>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d808      	bhi.n	800360a <inc_lock+0x9e>
 80035f8:	4936      	ldr	r1, [pc, #216]	; (80036d4 <inc_lock+0x168>)
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	0013      	movs	r3, r2
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	189b      	adds	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	585b      	ldr	r3, [r3, r1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d101      	bne.n	8003614 <inc_lock+0xa8>
 8003610:	2300      	movs	r3, #0
 8003612:	e05a      	b.n	80036ca <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	58d0      	ldr	r0, [r2, r3]
 800361c:	492d      	ldr	r1, [pc, #180]	; (80036d4 <inc_lock+0x168>)
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	0013      	movs	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	189b      	adds	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	2382      	movs	r3, #130	; 0x82
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	58d1      	ldr	r1, [r2, r3]
 8003632:	4828      	ldr	r0, [pc, #160]	; (80036d4 <inc_lock+0x168>)
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	0013      	movs	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	189b      	adds	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	18c3      	adds	r3, r0, r3
 8003640:	3304      	adds	r3, #4
 8003642:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a24      	ldr	r2, [pc, #144]	; (80036d8 <inc_lock+0x16c>)
 8003648:	5a98      	ldrh	r0, [r3, r2]
 800364a:	4922      	ldr	r1, [pc, #136]	; (80036d4 <inc_lock+0x168>)
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	0013      	movs	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	189b      	adds	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	18cb      	adds	r3, r1, r3
 8003658:	3308      	adds	r3, #8
 800365a:	1c02      	adds	r2, r0, #0
 800365c:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800365e:	491d      	ldr	r1, [pc, #116]	; (80036d4 <inc_lock+0x168>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	0013      	movs	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	189b      	adds	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	18cb      	adds	r3, r1, r3
 800366c:	330a      	adds	r3, #10
 800366e:	2200      	movs	r2, #0
 8003670:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00c      	beq.n	8003692 <inc_lock+0x126>
 8003678:	4916      	ldr	r1, [pc, #88]	; (80036d4 <inc_lock+0x168>)
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	0013      	movs	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	189b      	adds	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	18cb      	adds	r3, r1, r3
 8003686:	330a      	adds	r3, #10
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <inc_lock+0x126>
 800368e:	2300      	movs	r3, #0
 8003690:	e01b      	b.n	80036ca <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <inc_lock+0x144>
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <inc_lock+0x168>)
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	0013      	movs	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	189b      	adds	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	18cb      	adds	r3, r1, r3
 80036a6:	330a      	adds	r3, #10
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	e001      	b.n	80036b4 <inc_lock+0x148>
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	005a      	lsls	r2, r3, #1
 80036b4:	4807      	ldr	r0, [pc, #28]	; (80036d4 <inc_lock+0x168>)
 80036b6:	68f9      	ldr	r1, [r7, #12]
 80036b8:	000b      	movs	r3, r1
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	185b      	adds	r3, r3, r1
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	18c3      	adds	r3, r0, r3
 80036c2:	330a      	adds	r3, #10
 80036c4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3301      	adds	r3, #1
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b004      	add	sp, #16
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	200000a4 	.word	0x200000a4
 80036d8:	00000206 	.word	0x00000206

080036dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d83d      	bhi.n	800376c <dec_lock+0x90>
		n = Files[i].ctr;
 80036f0:	240e      	movs	r4, #14
 80036f2:	1939      	adds	r1, r7, r4
 80036f4:	4823      	ldr	r0, [pc, #140]	; (8003784 <dec_lock+0xa8>)
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	0013      	movs	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	189b      	adds	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	18c3      	adds	r3, r0, r3
 8003702:	330a      	adds	r3, #10
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003708:	193b      	adds	r3, r7, r4
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	429a      	cmp	r2, r3
 8003712:	d103      	bne.n	800371c <dec_lock+0x40>
 8003714:	230e      	movs	r3, #14
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2200      	movs	r2, #0
 800371a:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 800371c:	230e      	movs	r3, #14
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <dec_lock+0x56>
 8003726:	210e      	movs	r1, #14
 8003728:	187b      	adds	r3, r7, r1
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	187b      	adds	r3, r7, r1
 800372e:	3a01      	subs	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8003732:	4914      	ldr	r1, [pc, #80]	; (8003784 <dec_lock+0xa8>)
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	0013      	movs	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	189b      	adds	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	18cb      	adds	r3, r1, r3
 8003740:	330a      	adds	r3, #10
 8003742:	210e      	movs	r1, #14
 8003744:	187a      	adds	r2, r7, r1
 8003746:	8812      	ldrh	r2, [r2, #0]
 8003748:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800374a:	187b      	adds	r3, r7, r1
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d107      	bne.n	8003762 <dec_lock+0x86>
 8003752:	490c      	ldr	r1, [pc, #48]	; (8003784 <dec_lock+0xa8>)
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	0013      	movs	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	189b      	adds	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	2200      	movs	r2, #0
 8003760:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 8003762:	230d      	movs	r3, #13
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	e003      	b.n	8003774 <dec_lock+0x98>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800376c:	230d      	movs	r3, #13
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2202      	movs	r2, #2
 8003772:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8003774:	230d      	movs	r3, #13
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	781b      	ldrb	r3, [r3, #0]
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b005      	add	sp, #20
 8003780:	bd90      	pop	{r4, r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	200000a4 	.word	0x200000a4

08003788 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e014      	b.n	80037c0 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003796:	490e      	ldr	r1, [pc, #56]	; (80037d0 <clear_lock+0x48>)
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	0013      	movs	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	189b      	adds	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	585b      	ldr	r3, [r3, r1]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d107      	bne.n	80037ba <clear_lock+0x32>
 80037aa:	4909      	ldr	r1, [pc, #36]	; (80037d0 <clear_lock+0x48>)
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	0013      	movs	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	2200      	movs	r2, #0
 80037b8:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3301      	adds	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d9e7      	bls.n	8003796 <clear_lock+0xe>
	}
}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b004      	add	sp, #16
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	200000a4 	.word	0x200000a4

080037d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80037dc:	230f      	movs	r3, #15
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	2381      	movs	r3, #129	; 0x81
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d03e      	beq.n	800386e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	238b      	movs	r3, #139	; 0x8b
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	58d3      	ldr	r3, [r2, r3]
 80037f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <sync_window+0xa8>)
 80037fe:	5c98      	ldrb	r0, [r3, r2]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	2301      	movs	r3, #1
 8003806:	f7ff fe33 	bl	8003470 <disk_write>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d004      	beq.n	8003818 <sync_window+0x44>
			res = FR_DISK_ERR;
 800380e:	230f      	movs	r3, #15
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e02a      	b.n	800386e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	2381      	movs	r3, #129	; 0x81
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	2100      	movs	r1, #0
 8003820:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	2388      	movs	r3, #136	; 0x88
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	58d3      	ldr	r3, [r2, r3]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	1ad2      	subs	r2, r2, r3
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	2386      	movs	r3, #134	; 0x86
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	58cb      	ldr	r3, [r1, r3]
 8003836:	429a      	cmp	r2, r3
 8003838:	d219      	bcs.n	800386e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a10      	ldr	r2, [pc, #64]	; (8003880 <sync_window+0xac>)
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e011      	b.n	8003868 <sync_window+0x94>
					wsect += fs->fsize;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	2386      	movs	r3, #134	; 0x86
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	58d3      	ldr	r3, [r2, r3]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	18d3      	adds	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a09      	ldr	r2, [pc, #36]	; (800387c <sync_window+0xa8>)
 8003856:	5c98      	ldrb	r0, [r3, r2]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	2301      	movs	r3, #1
 800385e:	f7ff fe07 	bl	8003470 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	3b01      	subs	r3, #1
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d8ea      	bhi.n	8003844 <sync_window+0x70>
				}
			}
		}
	}
	return res;
 800386e:	230f      	movs	r3, #15
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	781b      	ldrb	r3, [r3, #0]
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b006      	add	sp, #24
 800387a:	bd80      	pop	{r7, pc}
 800387c:	00000201 	.word	0x00000201
 8003880:	00000203 	.word	0x00000203

08003884 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003884:	b5b0      	push	{r4, r5, r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800388e:	230f      	movs	r3, #15
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	238b      	movs	r3, #139	; 0x8b
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	58d3      	ldr	r3, [r2, r3]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d021      	beq.n	80038e8 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80038a4:	250f      	movs	r5, #15
 80038a6:	197c      	adds	r4, r7, r5
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7ff ff92 	bl	80037d4 <sync_window>
 80038b0:	0003      	movs	r3, r0
 80038b2:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80038b4:	197b      	adds	r3, r7, r5
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d115      	bne.n	80038e8 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <move_window+0x74>)
 80038c0:	5c98      	ldrb	r0, [r3, r2]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	2301      	movs	r3, #1
 80038c8:	f7ff fdaa 	bl	8003420 <disk_read>
 80038cc:	1e03      	subs	r3, r0, #0
 80038ce:	d006      	beq.n	80038de <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80038d0:	2301      	movs	r3, #1
 80038d2:	425b      	negs	r3, r3
 80038d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80038d6:	230f      	movs	r3, #15
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	238b      	movs	r3, #139	; 0x8b
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	6839      	ldr	r1, [r7, #0]
 80038e6:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 80038e8:	230f      	movs	r3, #15
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	781b      	ldrb	r3, [r3, #0]
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bdb0      	pop	{r4, r5, r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	00000201 	.word	0x00000201

080038fc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	3b02      	subs	r3, #2
 800390a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	2385      	movs	r3, #133	; 0x85
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	58d3      	ldr	r3, [r2, r3]
 8003914:	3b02      	subs	r3, #2
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d301      	bcc.n	8003920 <clust2sect+0x24>
 800391c:	2300      	movs	r3, #0
 800391e:	e00a      	b.n	8003936 <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <clust2sect+0x44>)
 8003924:	5c9b      	ldrb	r3, [r3, r2]
 8003926:	001a      	movs	r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	435a      	muls	r2, r3
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	238a      	movs	r3, #138	; 0x8a
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	58cb      	ldr	r3, [r1, r3]
 8003934:	18d3      	adds	r3, r2, r3
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	00000202 	.word	0x00000202

08003944 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d906      	bls.n	8003962 <get_fat+0x1e>
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	2385      	movs	r3, #133	; 0x85
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	58d3      	ldr	r3, [r2, r3]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <get_fat+0x24>
		val = 1;	/* Internal error */
 8003962:	2301      	movs	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e0a7      	b.n	8003ab8 <get_fat+0x174>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003968:	2301      	movs	r3, #1
 800396a:	425b      	negs	r3, r3
 800396c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	5cd3      	ldrb	r3, [r2, r3]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d046      	beq.n	8003a08 <get_fat+0xc4>
 800397a:	2b03      	cmp	r3, #3
 800397c:	d067      	beq.n	8003a4e <get_fat+0x10a>
 800397e:	2b01      	cmp	r3, #1
 8003980:	d000      	beq.n	8003984 <get_fat+0x40>
 8003982:	e08f      	b.n	8003aa4 <get_fat+0x160>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	18d3      	adds	r3, r2, r3
 8003990:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	2388      	movs	r3, #136	; 0x88
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	58d2      	ldr	r2, [r2, r3]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	0a5b      	lsrs	r3, r3, #9
 800399e:	18d2      	adds	r2, r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff ff6d 	bl	8003884 <move_window>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d000      	beq.n	80039b0 <get_fat+0x6c>
 80039ae:	e07c      	b.n	8003aaa <get_fat+0x166>
			wc = fs->win.d8[bc++ % SS(fs)];
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	60fa      	str	r2, [r7, #12]
 80039b6:	05db      	lsls	r3, r3, #23
 80039b8:	0ddb      	lsrs	r3, r3, #23
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	5cd3      	ldrb	r3, [r2, r3]
 80039be:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	2388      	movs	r3, #136	; 0x88
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	58d2      	ldr	r2, [r2, r3]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	0a5b      	lsrs	r3, r3, #9
 80039cc:	18d2      	adds	r2, r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0011      	movs	r1, r2
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7ff ff56 	bl	8003884 <move_window>
 80039d8:	1e03      	subs	r3, r0, #0
 80039da:	d168      	bne.n	8003aae <get_fat+0x16a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	05db      	lsls	r3, r3, #23
 80039e0:	0ddb      	lsrs	r3, r3, #23
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	5cd3      	ldrb	r3, [r2, r3]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	001a      	movs	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	4013      	ands	r3, r2
 80039f6:	d002      	beq.n	80039fe <get_fat+0xba>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	e002      	b.n	8003a04 <get_fat+0xc0>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	051b      	lsls	r3, r3, #20
 8003a02:	0d1b      	lsrs	r3, r3, #20
 8003a04:	617b      	str	r3, [r7, #20]
			break;
 8003a06:	e057      	b.n	8003ab8 <get_fat+0x174>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	2388      	movs	r3, #136	; 0x88
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	58d2      	ldr	r2, [r2, r3]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	18d2      	adds	r2, r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0011      	movs	r1, r2
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7ff ff32 	bl	8003884 <move_window>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d146      	bne.n	8003ab2 <get_fat+0x16e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	005a      	lsls	r2, r3, #1
 8003a28:	23ff      	movs	r3, #255	; 0xff
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	18d3      	adds	r3, r2, r3
 8003a32:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3301      	adds	r3, #1
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	b21a      	sxth	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	b21b      	sxth	r3, r3
 8003a44:	4313      	orrs	r3, r2
 8003a46:	b21b      	sxth	r3, r3
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	617b      	str	r3, [r7, #20]
			break;
 8003a4c:	e034      	b.n	8003ab8 <get_fat+0x174>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	2388      	movs	r3, #136	; 0x88
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	58d2      	ldr	r2, [r2, r3]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	09db      	lsrs	r3, r3, #7
 8003a5a:	18d2      	adds	r2, r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	0011      	movs	r1, r2
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7ff ff0f 	bl	8003884 <move_window>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d125      	bne.n	8003ab6 <get_fat+0x172>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	009a      	lsls	r2, r3, #2
 8003a6e:	23fe      	movs	r3, #254	; 0xfe
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	18d3      	adds	r3, r2, r3
 8003a78:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	3303      	adds	r3, #3
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	061a      	lsls	r2, r3, #24
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	3302      	adds	r3, #2
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	3201      	adds	r2, #1
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	0212      	lsls	r2, r2, #8
 8003a94:	4313      	orrs	r3, r2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	617b      	str	r3, [r7, #20]
			break;
 8003aa2:	e009      	b.n	8003ab8 <get_fat+0x174>

		default:
			val = 1;	/* Internal error */
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e006      	b.n	8003ab8 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	e004      	b.n	8003ab8 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	e002      	b.n	8003ab8 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	e000      	b.n	8003ab8 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ab6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8003ab8:	697b      	ldr	r3, [r7, #20]
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b006      	add	sp, #24
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003ac2:	b5b0      	push	{r4, r5, r7, lr}
 8003ac4:	b088      	sub	sp, #32
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d906      	bls.n	8003ae2 <put_fat+0x20>
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	2385      	movs	r3, #133	; 0x85
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	58d3      	ldr	r3, [r2, r3]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d304      	bcc.n	8003aec <put_fat+0x2a>
		res = FR_INT_ERR;
 8003ae2:	231f      	movs	r3, #31
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e10f      	b.n	8003d0c <put_fat+0x24a>

	} else {
		switch (fs->fs_type) {
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d100      	bne.n	8003afa <put_fat+0x38>
 8003af8:	e07e      	b.n	8003bf8 <put_fat+0x136>
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d100      	bne.n	8003b00 <put_fat+0x3e>
 8003afe:	e0a9      	b.n	8003c54 <put_fat+0x192>
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d000      	beq.n	8003b06 <put_fat+0x44>
 8003b04:	e0f6      	b.n	8003cf4 <put_fat+0x232>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	18d3      	adds	r3, r2, r3
 8003b12:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	2388      	movs	r3, #136	; 0x88
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	58d2      	ldr	r2, [r2, r3]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	0a5b      	lsrs	r3, r3, #9
 8003b20:	18d2      	adds	r2, r2, r3
 8003b22:	251f      	movs	r5, #31
 8003b24:	197c      	adds	r4, r7, r5
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	0011      	movs	r1, r2
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f7ff feaa 	bl	8003884 <move_window>
 8003b30:	0003      	movs	r3, r0
 8003b32:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003b34:	197b      	adds	r3, r7, r5
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d000      	beq.n	8003b3e <put_fat+0x7c>
 8003b3c:	e0df      	b.n	8003cfe <put_fat+0x23c>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	617a      	str	r2, [r7, #20]
 8003b44:	05db      	lsls	r3, r3, #23
 8003b46:	0ddb      	lsrs	r3, r3, #23
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2201      	movs	r2, #1
 8003b52:	4013      	ands	r3, r2
 8003b54:	d00d      	beq.n	8003b72 <put_fat+0xb0>
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b25b      	sxtb	r3, r3
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	4013      	ands	r3, r2
 8003b60:	b25a      	sxtb	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	b25b      	sxtb	r3, r3
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	e001      	b.n	8003b76 <put_fat+0xb4>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	2381      	movs	r3, #129	; 0x81
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	2101      	movs	r1, #1
 8003b82:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	2388      	movs	r3, #136	; 0x88
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	58d2      	ldr	r2, [r2, r3]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	0a5b      	lsrs	r3, r3, #9
 8003b90:	18d2      	adds	r2, r2, r3
 8003b92:	251f      	movs	r5, #31
 8003b94:	197c      	adds	r4, r7, r5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	0011      	movs	r1, r2
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f7ff fe72 	bl	8003884 <move_window>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003ba4:	197b      	adds	r3, r7, r5
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d000      	beq.n	8003bae <put_fat+0xec>
 8003bac:	e0a9      	b.n	8003d02 <put_fat+0x240>
			p = &fs->win.d8[bc % SS(fs)];
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	05db      	lsls	r3, r3, #23
 8003bb2:	0ddb      	lsrs	r3, r3, #23
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	18d3      	adds	r3, r2, r3
 8003bb8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d003      	beq.n	8003bca <put_fat+0x108>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	e00e      	b.n	8003be8 <put_fat+0x126>
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	220f      	movs	r2, #15
 8003bd2:	4393      	bics	r3, r2
 8003bd4:	b25a      	sxtb	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	210f      	movs	r1, #15
 8003bde:	400b      	ands	r3, r1
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	2381      	movs	r3, #129	; 0x81
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	54d1      	strb	r1, [r2, r3]
			break;
 8003bf6:	e089      	b.n	8003d0c <put_fat+0x24a>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	2388      	movs	r3, #136	; 0x88
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	58d2      	ldr	r2, [r2, r3]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	18d2      	adds	r2, r2, r3
 8003c06:	251f      	movs	r5, #31
 8003c08:	197c      	adds	r4, r7, r5
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	0011      	movs	r1, r2
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7ff fe38 	bl	8003884 <move_window>
 8003c14:	0003      	movs	r3, r0
 8003c16:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003c18:	197b      	adds	r3, r7, r5
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d172      	bne.n	8003d06 <put_fat+0x244>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	005a      	lsls	r2, r3, #1
 8003c24:	23ff      	movs	r3, #255	; 0xff
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4013      	ands	r3, r2
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	18d3      	adds	r3, r2, r3
 8003c2e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	3301      	adds	r3, #1
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	2381      	movs	r3, #129	; 0x81
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	2101      	movs	r1, #1
 8003c50:	54d1      	strb	r1, [r2, r3]
			break;
 8003c52:	e05b      	b.n	8003d0c <put_fat+0x24a>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	2388      	movs	r3, #136	; 0x88
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	58d2      	ldr	r2, [r2, r3]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	09db      	lsrs	r3, r3, #7
 8003c60:	18d2      	adds	r2, r2, r3
 8003c62:	251f      	movs	r5, #31
 8003c64:	197c      	adds	r4, r7, r5
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	0011      	movs	r1, r2
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f7ff fe0a 	bl	8003884 <move_window>
 8003c70:	0003      	movs	r3, r0
 8003c72:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003c74:	197b      	adds	r3, r7, r5
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d146      	bne.n	8003d0a <put_fat+0x248>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	009a      	lsls	r2, r3, #2
 8003c80:	23fe      	movs	r3, #254	; 0xfe
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4013      	ands	r3, r2
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	18d3      	adds	r3, r2, r3
 8003c8a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	3303      	adds	r3, #3
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	061a      	lsls	r2, r3, #24
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3302      	adds	r3, #2
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	3201      	adds	r2, #1
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	0212      	lsls	r2, r2, #8
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	0f1b      	lsrs	r3, r3, #28
 8003cb0:	071b      	lsls	r3, r3, #28
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	0c1a      	lsrs	r2, r3, #16
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0e1a      	lsrs	r2, r3, #24
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	3303      	adds	r3, #3
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	2381      	movs	r3, #129	; 0x81
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	2101      	movs	r1, #1
 8003cf0:	54d1      	strb	r1, [r2, r3]
			break;
 8003cf2:	e00b      	b.n	8003d0c <put_fat+0x24a>

		default :
			res = FR_INT_ERR;
 8003cf4:	231f      	movs	r3, #31
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e006      	b.n	8003d0c <put_fat+0x24a>
			if (res != FR_OK) break;
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	e004      	b.n	8003d0c <put_fat+0x24a>
			if (res != FR_OK) break;
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	e002      	b.n	8003d0c <put_fat+0x24a>
			if (res != FR_OK) break;
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	e000      	b.n	8003d0c <put_fat+0x24a>
			if (res != FR_OK) break;
 8003d0a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8003d0c:	231f      	movs	r3, #31
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	781b      	ldrb	r3, [r3, #0]
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b008      	add	sp, #32
 8003d18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003d1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003d1c:	b5b0      	push	{r4, r5, r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d111      	bne.n	8003d50 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	2383      	movs	r3, #131	; 0x83
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	58d3      	ldr	r3, [r2, r3]
 8003d34:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <create_chain+0x2e>
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	2385      	movs	r3, #133	; 0x85
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	58d3      	ldr	r3, [r2, r3]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d31f      	bcc.n	8003d8a <create_chain+0x6e>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e01c      	b.n	8003d8a <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	0011      	movs	r1, r2
 8003d56:	0018      	movs	r0, r3
 8003d58:	f7ff fdf4 	bl	8003944 <get_fat>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d801      	bhi.n	8003d6a <create_chain+0x4e>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e086      	b.n	8003e78 <create_chain+0x15c>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <create_chain+0x58>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	e081      	b.n	8003e78 <create_chain+0x15c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	2385      	movs	r3, #133	; 0x85
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	58d3      	ldr	r3, [r2, r3]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d201      	bcs.n	8003d86 <create_chain+0x6a>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	e078      	b.n	8003e78 <create_chain+0x15c>
		scl = clst;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	3301      	adds	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	2385      	movs	r3, #133	; 0x85
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	58d3      	ldr	r3, [r2, r3]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d307      	bcc.n	8003db2 <create_chain+0x96>
			ncl = 2;
 8003da2:	2302      	movs	r3, #2
 8003da4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d901      	bls.n	8003db2 <create_chain+0x96>
 8003dae:	2300      	movs	r3, #0
 8003db0:	e062      	b.n	8003e78 <create_chain+0x15c>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0011      	movs	r1, r2
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff fdc3 	bl	8003944 <get_fat>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00d      	beq.n	8003de4 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	d002      	beq.n	8003dd4 <create_chain+0xb8>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <create_chain+0xbc>
			return cs;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	e04f      	b.n	8003e78 <create_chain+0x15c>
		if (ncl == scl) return 0;		/* No free cluster */
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d1d6      	bne.n	8003d8e <create_chain+0x72>
 8003de0:	2300      	movs	r3, #0
 8003de2:	e049      	b.n	8003e78 <create_chain+0x15c>
		if (cs == 0) break;				/* Found a free cluster */
 8003de4:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003de6:	250f      	movs	r5, #15
 8003de8:	197c      	adds	r4, r7, r5
 8003dea:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <create_chain+0x164>)
 8003dec:	6979      	ldr	r1, [r7, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff fe66 	bl	8003ac2 <put_fat>
 8003df6:	0003      	movs	r3, r0
 8003df8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 8003dfa:	197b      	adds	r3, r7, r5
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <create_chain+0x100>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d009      	beq.n	8003e1c <create_chain+0x100>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003e08:	230f      	movs	r3, #15
 8003e0a:	18fc      	adds	r4, r7, r3
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff fe55 	bl	8003ac2 <put_fat>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 8003e1c:	230f      	movs	r3, #15
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11d      	bne.n	8003e62 <create_chain+0x146>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	2383      	movs	r3, #131	; 0x83
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	6979      	ldr	r1, [r7, #20]
 8003e2e:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	2384      	movs	r3, #132	; 0x84
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	58d3      	ldr	r3, [r2, r3]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	d01c      	beq.n	8003e76 <create_chain+0x15a>
			fs->free_clust--;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	2384      	movs	r3, #132	; 0x84
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	58d3      	ldr	r3, [r2, r3]
 8003e44:	1e59      	subs	r1, r3, #1
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	2384      	movs	r3, #132	; 0x84
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <create_chain+0x168>)
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	2201      	movs	r2, #1
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b2d9      	uxtb	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <create_chain+0x168>)
 8003e5e:	5499      	strb	r1, [r3, r2]
 8003e60:	e009      	b.n	8003e76 <create_chain+0x15a>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003e62:	230f      	movs	r3, #15
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d102      	bne.n	8003e72 <create_chain+0x156>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	425b      	negs	r3, r3
 8003e70:	e000      	b.n	8003e74 <create_chain+0x158>
 8003e72:	2301      	movs	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003e76:	697b      	ldr	r3, [r7, #20]
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b006      	add	sp, #24
 8003e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e80:	0fffffff 	.word	0x0fffffff
 8003e84:	00000205 	.word	0x00000205

08003e88 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	b299      	uxth	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a51      	ldr	r2, [pc, #324]	; (8003fe0 <dir_sdi+0x158>)
 8003e9a:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	2382      	movs	r3, #130	; 0x82
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	58d3      	ldr	r3, [r2, r3]
 8003ea4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d009      	beq.n	8003ec0 <dir_sdi+0x38>
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	58d2      	ldr	r2, [r2, r3]
 8003eb4:	2385      	movs	r3, #133	; 0x85
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	58d3      	ldr	r3, [r2, r3]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d301      	bcc.n	8003ec4 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e088      	b.n	8003fd6 <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d110      	bne.n	8003eec <dir_sdi+0x64>
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	58d2      	ldr	r2, [r2, r3]
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d107      	bne.n	8003eec <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	58d2      	ldr	r2, [r2, r3]
 8003ee4:	2389      	movs	r3, #137	; 0x89
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	58d3      	ldr	r3, [r2, r3]
 8003eea:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d115      	bne.n	8003f1e <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	58d2      	ldr	r2, [r2, r3]
 8003efa:	2382      	movs	r3, #130	; 0x82
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	5ad3      	ldrh	r3, [r2, r3]
 8003f00:	001a      	movs	r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d301      	bcc.n	8003f0c <dir_sdi+0x84>
			return FR_INT_ERR;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e064      	b.n	8003fd6 <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	58d2      	ldr	r2, [r2, r3]
 8003f14:	2389      	movs	r3, #137	; 0x89
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	58d3      	ldr	r3, [r2, r3]
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	e03a      	b.n	8003f94 <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	58d3      	ldr	r3, [r2, r3]
 8003f26:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <dir_sdi+0x15c>)
 8003f28:	5c9b      	ldrb	r3, [r3, r2]
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003f2e:	e022      	b.n	8003f76 <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	58d3      	ldr	r3, [r2, r3]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	0011      	movs	r1, r2
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7ff fd01 	bl	8003944 <get_fat>
 8003f42:	0003      	movs	r3, r0
 8003f44:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <dir_sdi+0xc8>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e042      	b.n	8003fd6 <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d909      	bls.n	8003f6a <dir_sdi+0xe2>
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	58d2      	ldr	r2, [r2, r3]
 8003f5e:	2385      	movs	r3, #133	; 0x85
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	58d3      	ldr	r3, [r2, r3]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d301      	bcc.n	8003f6e <dir_sdi+0xe6>
				return FR_INT_ERR;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e033      	b.n	8003fd6 <dir_sdi+0x14e>
			idx -= ic;
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d2d8      	bcs.n	8003f30 <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	58d3      	ldr	r3, [r2, r3]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	0011      	movs	r1, r2
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7ff fcb6 	bl	80038fc <clust2sect>
 8003f90:	0003      	movs	r3, r0
 8003f92:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	2383      	movs	r3, #131	; 0x83
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	6979      	ldr	r1, [r7, #20]
 8003f9c:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <dir_sdi+0x120>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e016      	b.n	8003fd6 <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	091a      	lsrs	r2, r3, #4
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	18d1      	adds	r1, r2, r3
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	2384      	movs	r3, #132	; 0x84
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	58d3      	ldr	r3, [r2, r3]
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	220f      	movs	r2, #15
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	015b      	lsls	r3, r3, #5
 8003fca:	18c9      	adds	r1, r1, r3
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	2385      	movs	r3, #133	; 0x85
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b006      	add	sp, #24
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	00000206 	.word	0x00000206
 8003fe4:	00000202 	.word	0x00000202

08003fe8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a87      	ldr	r2, [pc, #540]	; (8004214 <dir_next+0x22c>)
 8003ff6:	5a9b      	ldrh	r3, [r3, r2]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	d005      	beq.n	8004010 <dir_next+0x28>
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	2384      	movs	r3, #132	; 0x84
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	58d3      	ldr	r3, [r2, r3]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <dir_next+0x2c>
		return FR_NO_FILE;
 8004010:	2304      	movs	r3, #4
 8004012:	e0fb      	b.n	800420c <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	220f      	movs	r2, #15
 8004018:	4013      	ands	r3, r2
 800401a:	d000      	beq.n	800401e <dir_next+0x36>
 800401c:	e0e2      	b.n	80041e4 <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	2384      	movs	r3, #132	; 0x84
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	58d3      	ldr	r3, [r2, r3]
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	2384      	movs	r3, #132	; 0x84
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	2383      	movs	r3, #131	; 0x83
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	58d3      	ldr	r3, [r2, r3]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10d      	bne.n	8004058 <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	58d2      	ldr	r2, [r2, r3]
 8004044:	2382      	movs	r3, #130	; 0x82
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	5ad3      	ldrh	r3, [r2, r3]
 800404a:	001a      	movs	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4293      	cmp	r3, r2
 8004050:	d200      	bcs.n	8004054 <dir_next+0x6c>
 8004052:	e0c7      	b.n	80041e4 <dir_next+0x1fc>
				return FR_NO_FILE;
 8004054:	2304      	movs	r3, #4
 8004056:	e0d9      	b.n	800420c <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	0092      	lsls	r2, r2, #2
 8004062:	588a      	ldr	r2, [r1, r2]
 8004064:	496c      	ldr	r1, [pc, #432]	; (8004218 <dir_next+0x230>)
 8004066:	5c52      	ldrb	r2, [r2, r1]
 8004068:	3a01      	subs	r2, #1
 800406a:	4013      	ands	r3, r2
 800406c:	d000      	beq.n	8004070 <dir_next+0x88>
 800406e:	e0b9      	b.n	80041e4 <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	58d0      	ldr	r0, [r2, r3]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	2383      	movs	r3, #131	; 0x83
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	58d3      	ldr	r3, [r2, r3]
 8004080:	0019      	movs	r1, r3
 8004082:	f7ff fc5f 	bl	8003944 <get_fat>
 8004086:	0003      	movs	r3, r0
 8004088:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d801      	bhi.n	8004094 <dir_next+0xac>
 8004090:	2302      	movs	r3, #2
 8004092:	e0bb      	b.n	800420c <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	3301      	adds	r3, #1
 8004098:	d101      	bne.n	800409e <dir_next+0xb6>
 800409a:	2301      	movs	r3, #1
 800409c:	e0b6      	b.n	800420c <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	58d2      	ldr	r2, [r2, r3]
 80040a6:	2385      	movs	r3, #133	; 0x85
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	58d3      	ldr	r3, [r2, r3]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d200      	bcs.n	80040b4 <dir_next+0xcc>
 80040b2:	e084      	b.n	80041be <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <dir_next+0xd6>
 80040ba:	2304      	movs	r3, #4
 80040bc:	e0a6      	b.n	800420c <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	58d0      	ldr	r0, [r2, r3]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	2383      	movs	r3, #131	; 0x83
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	58d3      	ldr	r3, [r2, r3]
 80040ce:	0019      	movs	r1, r3
 80040d0:	f7ff fe24 	bl	8003d1c <create_chain>
 80040d4:	0003      	movs	r3, r0
 80040d6:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <dir_next+0xfa>
 80040de:	2307      	movs	r3, #7
 80040e0:	e094      	b.n	800420c <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <dir_next+0x104>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e08f      	b.n	800420c <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3301      	adds	r3, #1
 80040f0:	d101      	bne.n	80040f6 <dir_next+0x10e>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e08a      	b.n	800420c <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	58d3      	ldr	r3, [r2, r3]
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff fb68 	bl	80037d4 <sync_window>
 8004104:	1e03      	subs	r3, r0, #0
 8004106:	d001      	beq.n	800410c <dir_next+0x124>
 8004108:	2301      	movs	r3, #1
 800410a:	e07f      	b.n	800420c <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	58d3      	ldr	r3, [r2, r3]
 8004114:	0018      	movs	r0, r3
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	001a      	movs	r2, r3
 800411c:	2100      	movs	r1, #0
 800411e:	f7ff f9cf 	bl	80034c0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	58d0      	ldr	r0, [r2, r3]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	58d4      	ldr	r4, [r2, r3]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	0019      	movs	r1, r3
 8004136:	f7ff fbe1 	bl	80038fc <clust2sect>
 800413a:	0002      	movs	r2, r0
 800413c:	238b      	movs	r3, #139	; 0x8b
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	e020      	b.n	800418a <dir_next+0x1a2>
						dp->fs->wflag = 1;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	58d2      	ldr	r2, [r2, r3]
 8004150:	2381      	movs	r3, #129	; 0x81
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	2101      	movs	r1, #1
 8004156:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	58d3      	ldr	r3, [r2, r3]
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff fb37 	bl	80037d4 <sync_window>
 8004166:	1e03      	subs	r3, r0, #0
 8004168:	d001      	beq.n	800416e <dir_next+0x186>
 800416a:	2301      	movs	r3, #1
 800416c:	e04e      	b.n	800420c <dir_next+0x224>
						dp->fs->winsect++;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	58d3      	ldr	r3, [r2, r3]
 8004176:	228b      	movs	r2, #139	; 0x8b
 8004178:	0092      	lsls	r2, r2, #2
 800417a:	589a      	ldr	r2, [r3, r2]
 800417c:	1c51      	adds	r1, r2, #1
 800417e:	228b      	movs	r2, #139	; 0x8b
 8004180:	0092      	lsls	r2, r2, #2
 8004182:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	3301      	adds	r3, #1
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	58d3      	ldr	r3, [r2, r3]
 8004192:	4a21      	ldr	r2, [pc, #132]	; (8004218 <dir_next+0x230>)
 8004194:	5c9b      	ldrb	r3, [r3, r2]
 8004196:	001a      	movs	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4293      	cmp	r3, r2
 800419c:	d3d4      	bcc.n	8004148 <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	58d2      	ldr	r2, [r2, r3]
 80041a6:	238b      	movs	r3, #139	; 0x8b
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	58d1      	ldr	r1, [r2, r3]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	58d2      	ldr	r2, [r2, r3]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ac9      	subs	r1, r1, r3
 80041b8:	238b      	movs	r3, #139	; 0x8b
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	2383      	movs	r3, #131	; 0x83
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	6979      	ldr	r1, [r7, #20]
 80041c6:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	58d3      	ldr	r3, [r2, r3]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	0011      	movs	r1, r2
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7ff fb91 	bl	80038fc <clust2sect>
 80041da:	0001      	movs	r1, r0
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	2384      	movs	r3, #132	; 0x84
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	b299      	uxth	r1, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <dir_next+0x22c>)
 80041ec:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	58d3      	ldr	r3, [r2, r3]
 80041f6:	0019      	movs	r1, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	220f      	movs	r2, #15
 80041fc:	4013      	ands	r3, r2
 80041fe:	015b      	lsls	r3, r3, #5
 8004200:	18c9      	adds	r1, r1, r3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	2385      	movs	r3, #133	; 0x85
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b007      	add	sp, #28
 8004212:	bd90      	pop	{r4, r7, pc}
 8004214:	00000206 	.word	0x00000206
 8004218:	00000202 	.word	0x00000202

0800421c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	331b      	adds	r3, #27
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	b21a      	sxth	r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	331a      	adds	r3, #26
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	b21b      	sxth	r3, r3
 8004238:	4313      	orrs	r3, r2
 800423a:	b21b      	sxth	r3, r3
 800423c:	b29b      	uxth	r3, r3
 800423e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	5cd3      	ldrb	r3, [r2, r3]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d10f      	bne.n	800426c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	3315      	adds	r3, #21
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	b21a      	sxth	r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	3314      	adds	r3, #20
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	b21b      	sxth	r3, r3
 800425e:	4313      	orrs	r3, r2
 8004260:	b21b      	sxth	r3, r3
 8004262:	b29b      	uxth	r3, r3
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

	return cl;
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b004      	add	sp, #16
 8004274:	bd80      	pop	{r7, pc}

08004276 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004276:	b5b0      	push	{r4, r5, r7, lr}
 8004278:	b086      	sub	sp, #24
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800427e:	2517      	movs	r5, #23
 8004280:	197c      	adds	r4, r7, r5
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2100      	movs	r1, #0
 8004286:	0018      	movs	r0, r3
 8004288:	f7ff fdfe 	bl	8003e88 <dir_sdi>
 800428c:	0003      	movs	r3, r0
 800428e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8004290:	197b      	adds	r3, r7, r5
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <dir_find+0x2a>
 8004298:	2317      	movs	r3, #23
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	e04b      	b.n	8004338 <dir_find+0xc2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	58d0      	ldr	r0, [r2, r3]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	2384      	movs	r3, #132	; 0x84
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	58d3      	ldr	r3, [r2, r3]
 80042b0:	2517      	movs	r5, #23
 80042b2:	197c      	adds	r4, r7, r5
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7ff fae5 	bl	8003884 <move_window>
 80042ba:	0003      	movs	r3, r0
 80042bc:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 80042be:	197b      	adds	r3, r7, r5
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d132      	bne.n	800432c <dir_find+0xb6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	2385      	movs	r3, #133	; 0x85
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	58d3      	ldr	r3, [r2, r3]
 80042ce:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80042d0:	210f      	movs	r1, #15
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <dir_find+0x76>
 80042e2:	2317      	movs	r3, #23
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	2204      	movs	r2, #4
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	e022      	b.n	8004332 <dir_find+0xbc>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	330b      	adds	r3, #11
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	001a      	movs	r2, r3
 80042f4:	2308      	movs	r3, #8
 80042f6:	4013      	ands	r3, r2
 80042f8:	d10a      	bne.n	8004310 <dir_find+0x9a>
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	2386      	movs	r3, #134	; 0x86
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	58d1      	ldr	r1, [r2, r3]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	220b      	movs	r2, #11
 8004306:	0018      	movs	r0, r3
 8004308:	f7ff f8f2 	bl	80034f0 <mem_cmp>
 800430c:	1e03      	subs	r3, r0, #0
 800430e:	d00f      	beq.n	8004330 <dir_find+0xba>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004310:	2517      	movs	r5, #23
 8004312:	197c      	adds	r4, r7, r5
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2100      	movs	r1, #0
 8004318:	0018      	movs	r0, r3
 800431a:	f7ff fe65 	bl	8003fe8 <dir_next>
 800431e:	0003      	movs	r3, r0
 8004320:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8004322:	197b      	adds	r3, r7, r5
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ba      	beq.n	80042a0 <dir_find+0x2a>
 800432a:	e002      	b.n	8004332 <dir_find+0xbc>
		if (res != FR_OK) break;
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	e000      	b.n	8004332 <dir_find+0xbc>
			break;
 8004330:	46c0      	nop			; (mov r8, r8)

	return res;
 8004332:	2317      	movs	r3, #23
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	781b      	ldrb	r3, [r3, #0]
}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b006      	add	sp, #24
 800433e:	bdb0      	pop	{r4, r5, r7, pc}

08004340 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8004340:	b5b0      	push	{r4, r5, r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800434a:	2317      	movs	r3, #23
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	2204      	movs	r2, #4
 8004350:	701a      	strb	r2, [r3, #0]
	while (dp->sect) {
 8004352:	e056      	b.n	8004402 <dir_read+0xc2>
		res = move_window(dp->fs, dp->sect);
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	58d0      	ldr	r0, [r2, r3]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	2384      	movs	r3, #132	; 0x84
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	58d3      	ldr	r3, [r2, r3]
 8004364:	2517      	movs	r5, #23
 8004366:	197c      	adds	r4, r7, r5
 8004368:	0019      	movs	r1, r3
 800436a:	f7ff fa8b 	bl	8003884 <move_window>
 800436e:	0003      	movs	r3, r0
 8004370:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8004372:	197b      	adds	r3, r7, r5
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d14a      	bne.n	8004410 <dir_read+0xd0>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	2385      	movs	r3, #133	; 0x85
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	58d3      	ldr	r3, [r2, r3]
 8004382:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004384:	210f      	movs	r1, #15
 8004386:	187b      	adds	r3, r7, r1
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800438e:	187b      	adds	r3, r7, r1
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d104      	bne.n	80043a0 <dir_read+0x60>
 8004396:	2317      	movs	r3, #23
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2204      	movs	r2, #4
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e03c      	b.n	800441a <dir_read+0xda>
		a = dir[DIR_Attr] & AM_MASK;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	330b      	adds	r3, #11
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	230e      	movs	r3, #14
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	213f      	movs	r1, #63	; 0x3f
 80043ac:	400a      	ands	r2, r1
 80043ae:	701a      	strb	r2, [r3, #0]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80043b0:	230f      	movs	r3, #15
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2be5      	cmp	r3, #229	; 0xe5
 80043b8:	d016      	beq.n	80043e8 <dir_read+0xa8>
 80043ba:	230f      	movs	r3, #15
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b2e      	cmp	r3, #46	; 0x2e
 80043c2:	d011      	beq.n	80043e8 <dir_read+0xa8>
 80043c4:	230e      	movs	r3, #14
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b0f      	cmp	r3, #15
 80043cc:	d00c      	beq.n	80043e8 <dir_read+0xa8>
 80043ce:	230e      	movs	r3, #14
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2220      	movs	r2, #32
 80043d6:	4393      	bics	r3, r2
 80043d8:	3b08      	subs	r3, #8
 80043da:	425a      	negs	r2, r3
 80043dc:	4153      	adcs	r3, r2
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	001a      	movs	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d015      	beq.n	8004414 <dir_read+0xd4>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80043e8:	2517      	movs	r5, #23
 80043ea:	197c      	adds	r4, r7, r5
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2100      	movs	r1, #0
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff fdf9 	bl	8003fe8 <dir_next>
 80043f6:	0003      	movs	r3, r0
 80043f8:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 80043fa:	197b      	adds	r3, r7, r5
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <dir_read+0xd8>
	while (dp->sect) {
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	2384      	movs	r3, #132	; 0x84
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	58d3      	ldr	r3, [r2, r3]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1a2      	bne.n	8004354 <dir_read+0x14>
 800440e:	e004      	b.n	800441a <dir_read+0xda>
		if (res != FR_OK) break;
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	e002      	b.n	800441a <dir_read+0xda>
			break;
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	e000      	b.n	800441a <dir_read+0xda>
		if (res != FR_OK) break;
 8004418:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dp->sect = 0;
 800441a:	2317      	movs	r3, #23
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d004      	beq.n	800442e <dir_read+0xee>
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	2384      	movs	r3, #132	; 0x84
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	2100      	movs	r1, #0
 800442c:	50d1      	str	r1, [r2, r3]

	return res;
 800442e:	2317      	movs	r3, #23
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	781b      	ldrb	r3, [r3, #0]
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b006      	add	sp, #24
 800443a:	bdb0      	pop	{r4, r5, r7, pc}

0800443c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	3309      	adds	r3, #9
 800444a:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	2384      	movs	r3, #132	; 0x84
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	58d3      	ldr	r3, [r2, r3]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d064      	beq.n	8004522 <get_fileinfo+0xe6>
		dir = dp->dir;
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	2385      	movs	r3, #133	; 0x85
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	58d3      	ldr	r3, [r2, r3]
 8004460:	60bb      	str	r3, [r7, #8]
		i = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8004466:	e025      	b.n	80044b4 <get_fileinfo+0x78>
			c = (TCHAR)dir[i++];
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	617a      	str	r2, [r7, #20]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	18d2      	adds	r2, r2, r3
 8004472:	210f      	movs	r1, #15
 8004474:	187b      	adds	r3, r7, r1
 8004476:	7812      	ldrb	r2, [r2, #0]
 8004478:	701a      	strb	r2, [r3, #0]
			if (c == ' ') continue;				/* Skip padding spaces */
 800447a:	187b      	adds	r3, r7, r1
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b20      	cmp	r3, #32
 8004480:	d100      	bne.n	8004484 <get_fileinfo+0x48>
 8004482:	e017      	b.n	80044b4 <get_fileinfo+0x78>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004484:	230f      	movs	r3, #15
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b05      	cmp	r3, #5
 800448c:	d103      	bne.n	8004496 <get_fileinfo+0x5a>
 800448e:	230f      	movs	r3, #15
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	22e5      	movs	r2, #229	; 0xe5
 8004494:	701a      	strb	r2, [r3, #0]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b09      	cmp	r3, #9
 800449a:	d104      	bne.n	80044a6 <get_fileinfo+0x6a>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	613a      	str	r2, [r7, #16]
 80044a2:	222e      	movs	r2, #46	; 0x2e
 80044a4:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	613a      	str	r2, [r7, #16]
 80044ac:	220f      	movs	r2, #15
 80044ae:	18ba      	adds	r2, r7, r2
 80044b0:	7812      	ldrb	r2, [r2, #0]
 80044b2:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b0a      	cmp	r3, #10
 80044b8:	d9d6      	bls.n	8004468 <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	7ada      	ldrb	r2, [r3, #11]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	331f      	adds	r3, #31
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	061a      	lsls	r2, r3, #24
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	331e      	adds	r3, #30
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	4313      	orrs	r3, r2
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	321d      	adds	r2, #29
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	0212      	lsls	r2, r2, #8
 80044dc:	4313      	orrs	r3, r2
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	321c      	adds	r2, #28
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	3319      	adds	r3, #25
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	b21a      	sxth	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	3318      	adds	r3, #24
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	b21b      	sxth	r3, r3
 80044fc:	4313      	orrs	r3, r2
 80044fe:	b21b      	sxth	r3, r3
 8004500:	b29a      	uxth	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3317      	adds	r3, #23
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	b21a      	sxth	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	3316      	adds	r3, #22
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b21b      	sxth	r3, r3
 8004518:	4313      	orrs	r3, r2
 800451a:	b21b      	sxth	r3, r3
 800451c:	b29a      	uxth	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b006      	add	sp, #24
 800452e:	bd80      	pop	{r7, pc}

08004530 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e002      	b.n	8004548 <create_name+0x18>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3301      	adds	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b2f      	cmp	r3, #47	; 0x2f
 800454e:	d0f8      	beq.n	8004542 <create_name+0x12>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b5c      	cmp	r3, #92	; 0x5c
 8004556:	d0f4      	beq.n	8004542 <create_name+0x12>
	sfn = dp->fn;
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	2386      	movs	r3, #134	; 0x86
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	58d3      	ldr	r3, [r2, r3]
 8004560:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	220b      	movs	r2, #11
 8004566:	2120      	movs	r1, #32
 8004568:	0018      	movs	r0, r3
 800456a:	f7fe ffa9 	bl	80034c0 <mem_set>
	si = i = b = 0; ni = 8;
 800456e:	231f      	movs	r3, #31
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	2308      	movs	r3, #8
 8004580:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	617a      	str	r2, [r7, #20]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	18d2      	adds	r2, r2, r3
 800458c:	211e      	movs	r1, #30
 800458e:	187b      	adds	r3, r7, r1
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004594:	187b      	adds	r3, r7, r1
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b20      	cmp	r3, #32
 800459a:	d800      	bhi.n	800459e <create_name+0x6e>
 800459c:	e07e      	b.n	800469c <create_name+0x16c>
 800459e:	231e      	movs	r3, #30
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b2f      	cmp	r3, #47	; 0x2f
 80045a6:	d100      	bne.n	80045aa <create_name+0x7a>
 80045a8:	e078      	b.n	800469c <create_name+0x16c>
 80045aa:	231e      	movs	r3, #30
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b5c      	cmp	r3, #92	; 0x5c
 80045b2:	d100      	bne.n	80045b6 <create_name+0x86>
 80045b4:	e072      	b.n	800469c <create_name+0x16c>
		if (c == '.' || i >= ni) {
 80045b6:	231e      	movs	r3, #30
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b2e      	cmp	r3, #46	; 0x2e
 80045be:	d003      	beq.n	80045c8 <create_name+0x98>
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d314      	bcc.n	80045f2 <create_name+0xc2>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d104      	bne.n	80045d8 <create_name+0xa8>
 80045ce:	231e      	movs	r3, #30
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b2e      	cmp	r3, #46	; 0x2e
 80045d6:	d001      	beq.n	80045dc <create_name+0xac>
 80045d8:	2306      	movs	r3, #6
 80045da:	e0a7      	b.n	800472c <create_name+0x1fc>
			i = 8; ni = 11;
 80045dc:	2308      	movs	r3, #8
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	230b      	movs	r3, #11
 80045e2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80045e4:	221f      	movs	r2, #31
 80045e6:	18bb      	adds	r3, r7, r2
 80045e8:	18ba      	adds	r2, r7, r2
 80045ea:	7812      	ldrb	r2, [r2, #0]
 80045ec:	0092      	lsls	r2, r2, #2
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	e053      	b.n	800469a <create_name+0x16a>
		}
		if (c >= 0x80) {				/* Extended character? */
 80045f2:	231e      	movs	r3, #30
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b25b      	sxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	da0f      	bge.n	800461e <create_name+0xee>
			b |= 3;						/* Eliminate NT flag */
 80045fe:	221f      	movs	r2, #31
 8004600:	18bb      	adds	r3, r7, r2
 8004602:	18ba      	adds	r2, r7, r2
 8004604:	7812      	ldrb	r2, [r2, #0]
 8004606:	2103      	movs	r1, #3
 8004608:	430a      	orrs	r2, r1
 800460a:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800460c:	211e      	movs	r1, #30
 800460e:	187b      	adds	r3, r7, r1
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	3b80      	subs	r3, #128	; 0x80
 8004614:	001a      	movs	r2, r3
 8004616:	187b      	adds	r3, r7, r1
 8004618:	4946      	ldr	r1, [pc, #280]	; (8004734 <create_name+0x204>)
 800461a:	5c8a      	ldrb	r2, [r1, r2]
 800461c:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800461e:	231e      	movs	r3, #30
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	4b44      	ldr	r3, [pc, #272]	; (8004738 <create_name+0x208>)
 8004626:	0011      	movs	r1, r2
 8004628:	0018      	movs	r0, r3
 800462a:	f7fe ff86 	bl	800353a <chk_chr>
 800462e:	1e03      	subs	r3, r0, #0
 8004630:	d001      	beq.n	8004636 <create_name+0x106>
				return FR_INVALID_NAME;
 8004632:	2306      	movs	r3, #6
 8004634:	e07a      	b.n	800472c <create_name+0x1fc>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004636:	231e      	movs	r3, #30
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d90c      	bls.n	800465a <create_name+0x12a>
 8004640:	231e      	movs	r3, #30
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b5a      	cmp	r3, #90	; 0x5a
 8004648:	d807      	bhi.n	800465a <create_name+0x12a>
				b |= 2;
 800464a:	221f      	movs	r2, #31
 800464c:	18bb      	adds	r3, r7, r2
 800464e:	18ba      	adds	r2, r7, r2
 8004650:	7812      	ldrb	r2, [r2, #0]
 8004652:	2102      	movs	r1, #2
 8004654:	430a      	orrs	r2, r1
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e016      	b.n	8004688 <create_name+0x158>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800465a:	231e      	movs	r3, #30
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b60      	cmp	r3, #96	; 0x60
 8004662:	d911      	bls.n	8004688 <create_name+0x158>
 8004664:	231e      	movs	r3, #30
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b7a      	cmp	r3, #122	; 0x7a
 800466c:	d80c      	bhi.n	8004688 <create_name+0x158>
					b |= 1; c -= 0x20;
 800466e:	221f      	movs	r2, #31
 8004670:	18bb      	adds	r3, r7, r2
 8004672:	18ba      	adds	r2, r7, r2
 8004674:	7812      	ldrb	r2, [r2, #0]
 8004676:	2101      	movs	r1, #1
 8004678:	430a      	orrs	r2, r1
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	221e      	movs	r2, #30
 800467e:	18bb      	adds	r3, r7, r2
 8004680:	18ba      	adds	r2, r7, r2
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	3a20      	subs	r2, #32
 8004686:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	613a      	str	r2, [r7, #16]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	221e      	movs	r2, #30
 8004694:	18ba      	adds	r2, r7, r2
 8004696:	7812      	ldrb	r2, [r2, #0]
 8004698:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800469a:	e772      	b.n	8004582 <create_name+0x52>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	18d2      	adds	r2, r2, r3
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80046a6:	231e      	movs	r3, #30
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d801      	bhi.n	80046b4 <create_name+0x184>
 80046b0:	2204      	movs	r2, #4
 80046b2:	e000      	b.n	80046b6 <create_name+0x186>
 80046b4:	2200      	movs	r2, #0
 80046b6:	231e      	movs	r3, #30
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <create_name+0x196>
 80046c2:	2306      	movs	r3, #6
 80046c4:	e032      	b.n	800472c <create_name+0x1fc>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2be5      	cmp	r3, #229	; 0xe5
 80046cc:	d102      	bne.n	80046d4 <create_name+0x1a4>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2205      	movs	r2, #5
 80046d2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d105      	bne.n	80046e6 <create_name+0x1b6>
 80046da:	221f      	movs	r2, #31
 80046dc:	18bb      	adds	r3, r7, r2
 80046de:	18ba      	adds	r2, r7, r2
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	0092      	lsls	r2, r2, #2
 80046e4:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80046e6:	231f      	movs	r3, #31
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2203      	movs	r2, #3
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d106      	bne.n	8004702 <create_name+0x1d2>
 80046f4:	221e      	movs	r2, #30
 80046f6:	18bb      	adds	r3, r7, r2
 80046f8:	18ba      	adds	r2, r7, r2
 80046fa:	7812      	ldrb	r2, [r2, #0]
 80046fc:	2110      	movs	r1, #16
 80046fe:	430a      	orrs	r2, r1
 8004700:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004702:	231f      	movs	r3, #31
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	220c      	movs	r2, #12
 800470a:	4013      	ands	r3, r2
 800470c:	2b04      	cmp	r3, #4
 800470e:	d106      	bne.n	800471e <create_name+0x1ee>
 8004710:	221e      	movs	r2, #30
 8004712:	18bb      	adds	r3, r7, r2
 8004714:	18ba      	adds	r2, r7, r2
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	2108      	movs	r1, #8
 800471a:	430a      	orrs	r2, r1
 800471c:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	330b      	adds	r3, #11
 8004722:	221e      	movs	r2, #30
 8004724:	18ba      	adds	r2, r7, r2
 8004726:	7812      	ldrb	r2, [r2, #0]
 8004728:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800472a:	2300      	movs	r3, #0
#endif
}
 800472c:	0018      	movs	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	b008      	add	sp, #32
 8004732:	bd80      	pop	{r7, pc}
 8004734:	080073d4 	.word	0x080073d4
 8004738:	080072c0 	.word	0x080072c0

0800473c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800473c:	b5b0      	push	{r4, r5, r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b2f      	cmp	r3, #47	; 0x2f
 800474c:	d003      	beq.n	8004756 <follow_path+0x1a>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b5c      	cmp	r3, #92	; 0x5c
 8004754:	d102      	bne.n	800475c <follow_path+0x20>
		path++;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	3301      	adds	r3, #1
 800475a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	2382      	movs	r3, #130	; 0x82
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	2100      	movs	r1, #0
 8004764:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b1f      	cmp	r3, #31
 800476c:	d80e      	bhi.n	800478c <follow_path+0x50>
		res = dir_sdi(dp, 0);
 800476e:	230f      	movs	r3, #15
 8004770:	18fc      	adds	r4, r7, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2100      	movs	r1, #0
 8004776:	0018      	movs	r0, r3
 8004778:	f7ff fb86 	bl	8003e88 <dir_sdi>
 800477c:	0003      	movs	r3, r0
 800477e:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	2385      	movs	r3, #133	; 0x85
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	2100      	movs	r1, #0
 8004788:	50d1      	str	r1, [r2, r3]
 800478a:	e05c      	b.n	8004846 <follow_path+0x10a>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800478c:	250f      	movs	r5, #15
 800478e:	197c      	adds	r4, r7, r5
 8004790:	003a      	movs	r2, r7
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f7ff feca 	bl	8004530 <create_name>
 800479c:	0003      	movs	r3, r0
 800479e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80047a0:	197b      	adds	r3, r7, r5
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d149      	bne.n	800483c <follow_path+0x100>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80047a8:	250f      	movs	r5, #15
 80047aa:	197c      	adds	r4, r7, r5
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f7ff fd61 	bl	8004276 <dir_find>
 80047b4:	0003      	movs	r3, r0
 80047b6:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	2386      	movs	r3, #134	; 0x86
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	58d2      	ldr	r2, [r2, r3]
 80047c0:	230e      	movs	r3, #14
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	7ad2      	ldrb	r2, [r2, #11]
 80047c6:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80047c8:	197b      	adds	r3, r7, r5
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00f      	beq.n	80047f0 <follow_path+0xb4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80047d0:	230f      	movs	r3, #15
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d132      	bne.n	8004840 <follow_path+0x104>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80047da:	230e      	movs	r3, #14
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2204      	movs	r2, #4
 80047e2:	4013      	ands	r3, r2
 80047e4:	d12c      	bne.n	8004840 <follow_path+0x104>
 80047e6:	230f      	movs	r3, #15
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	2205      	movs	r2, #5
 80047ec:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80047ee:	e027      	b.n	8004840 <follow_path+0x104>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80047f0:	230e      	movs	r3, #14
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2204      	movs	r2, #4
 80047f8:	4013      	ands	r3, r2
 80047fa:	d123      	bne.n	8004844 <follow_path+0x108>
			dir = dp->dir;						/* Follow the sub-directory */
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	2385      	movs	r3, #133	; 0x85
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	58d3      	ldr	r3, [r2, r3]
 8004804:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	330b      	adds	r3, #11
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	001a      	movs	r2, r3
 800480e:	2310      	movs	r3, #16
 8004810:	4013      	ands	r3, r2
 8004812:	d104      	bne.n	800481e <follow_path+0xe2>
				res = FR_NO_PATH; break;
 8004814:	230f      	movs	r3, #15
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	2205      	movs	r2, #5
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e013      	b.n	8004846 <follow_path+0x10a>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	58d3      	ldr	r3, [r2, r3]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	0011      	movs	r1, r2
 800482a:	0018      	movs	r0, r3
 800482c:	f7ff fcf6 	bl	800421c <ld_clust>
 8004830:	0001      	movs	r1, r0
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	2382      	movs	r3, #130	; 0x82
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800483a:	e7a7      	b.n	800478c <follow_path+0x50>
			if (res != FR_OK) break;
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	e002      	b.n	8004846 <follow_path+0x10a>
				break;
 8004840:	46c0      	nop			; (mov r8, r8)
 8004842:	e000      	b.n	8004846 <follow_path+0x10a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004844:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8004846:	230f      	movs	r3, #15
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	781b      	ldrb	r3, [r3, #0]
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	b004      	add	sp, #16
 8004852:	bdb0      	pop	{r4, r5, r7, pc}

08004854 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800485c:	2301      	movs	r3, #1
 800485e:	425b      	negs	r3, r3
 8004860:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d031      	beq.n	80048ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	e002      	b.n	8004878 <get_ldnumber+0x24>
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	3301      	adds	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b20      	cmp	r3, #32
 800487e:	d903      	bls.n	8004888 <get_ldnumber+0x34>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b3a      	cmp	r3, #58	; 0x3a
 8004886:	d1f4      	bne.n	8004872 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b3a      	cmp	r3, #58	; 0x3a
 800488e:	d11c      	bne.n	80048ca <get_ldnumber+0x76>
			tp = *path;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	60fa      	str	r2, [r7, #12]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	3b30      	subs	r3, #48	; 0x30
 80048a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b09      	cmp	r3, #9
 80048a6:	d80e      	bhi.n	80048c6 <get_ldnumber+0x72>
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d10a      	bne.n	80048c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <get_ldnumber+0x72>
					vol = (int)i;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	3301      	adds	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	e002      	b.n	80048d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80048ce:	693b      	ldr	r3, [r7, #16]
}
 80048d0:	0018      	movs	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b006      	add	sp, #24
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	2381      	movs	r3, #129	; 0x81
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	2100      	movs	r1, #0
 80048ea:	54d1      	strb	r1, [r2, r3]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	238b      	movs	r3, #139	; 0x8b
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	2101      	movs	r1, #1
 80048f4:	4249      	negs	r1, r1
 80048f6:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	0011      	movs	r1, r2
 80048fe:	0018      	movs	r0, r3
 8004900:	f7fe ffc0 	bl	8003884 <move_window>
 8004904:	1e03      	subs	r3, r0, #0
 8004906:	d001      	beq.n	800490c <check_fs+0x34>
		return 3;
 8004908:	2303      	movs	r3, #3
 800490a:	e04b      	b.n	80049a4 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	33ff      	adds	r3, #255	; 0xff
 8004910:	33ff      	adds	r3, #255	; 0xff
 8004912:	3301      	adds	r3, #1
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	b21a      	sxth	r2, r3
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	23ff      	movs	r3, #255	; 0xff
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	b21b      	sxth	r3, r3
 8004924:	4313      	orrs	r3, r2
 8004926:	b21b      	sxth	r3, r3
 8004928:	4a20      	ldr	r2, [pc, #128]	; (80049ac <check_fs+0xd4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d001      	beq.n	8004932 <check_fs+0x5a>
		return 2;
 800492e:	2302      	movs	r3, #2
 8004930:	e038      	b.n	80049a4 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3336      	adds	r3, #54	; 0x36
 8004936:	3303      	adds	r3, #3
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	061a      	lsls	r2, r3, #24
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3336      	adds	r3, #54	; 0x36
 8004940:	3302      	adds	r3, #2
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	4313      	orrs	r3, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	3236      	adds	r2, #54	; 0x36
 800494c:	3201      	adds	r2, #1
 800494e:	7812      	ldrb	r2, [r2, #0]
 8004950:	0212      	lsls	r2, r2, #8
 8004952:	4313      	orrs	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	2136      	movs	r1, #54	; 0x36
 8004958:	5c52      	ldrb	r2, [r2, r1]
 800495a:	4313      	orrs	r3, r2
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <check_fs+0xd8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d101      	bne.n	800496a <check_fs+0x92>
		return 0;
 8004966:	2300      	movs	r3, #0
 8004968:	e01c      	b.n	80049a4 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3352      	adds	r3, #82	; 0x52
 800496e:	3303      	adds	r3, #3
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	061a      	lsls	r2, r3, #24
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3352      	adds	r3, #82	; 0x52
 8004978:	3302      	adds	r3, #2
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	4313      	orrs	r3, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	3252      	adds	r2, #82	; 0x52
 8004984:	3201      	adds	r2, #1
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	0212      	lsls	r2, r2, #8
 800498a:	4313      	orrs	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	2152      	movs	r1, #82	; 0x52
 8004990:	5c52      	ldrb	r2, [r2, r1]
 8004992:	4313      	orrs	r3, r2
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	4a05      	ldr	r2, [pc, #20]	; (80049b0 <check_fs+0xd8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <check_fs+0xca>
		return 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <check_fs+0xcc>

	return 1;
 80049a2:	2301      	movs	r3, #1
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b002      	add	sp, #8
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	ffffaa55 	.word	0xffffaa55
 80049b0:	00544146 	.word	0x00544146

080049b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80049b4:	b5b0      	push	{r4, r5, r7, lr}
 80049b6:	b096      	sub	sp, #88	; 0x58
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	1dfb      	adds	r3, r7, #7
 80049c0:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7ff ff42 	bl	8004854 <get_ldnumber>
 80049d0:	0003      	movs	r3, r0
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da01      	bge.n	80049de <find_volume+0x2a>
 80049da:	230b      	movs	r3, #11
 80049dc:	e2f1      	b.n	8004fc2 <find_volume+0x60e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80049de:	4bce      	ldr	r3, [pc, #824]	; (8004d18 <find_volume+0x364>)
 80049e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049e2:	0092      	lsls	r2, r2, #2
 80049e4:	58d3      	ldr	r3, [r2, r3]
 80049e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <find_volume+0x3e>
 80049ee:	230c      	movs	r3, #12
 80049f0:	e2e7      	b.n	8004fc2 <find_volume+0x60e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80049f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	5cd3      	ldrb	r3, [r2, r3]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01c      	beq.n	8004a3e <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	4ac5      	ldr	r2, [pc, #788]	; (8004d1c <find_volume+0x368>)
 8004a08:	5c9b      	ldrb	r3, [r3, r2]
 8004a0a:	2537      	movs	r5, #55	; 0x37
 8004a0c:	197c      	adds	r4, r7, r5
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7fe fcb2 	bl	8003378 <disk_status>
 8004a14:	0003      	movs	r3, r0
 8004a16:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004a18:	197b      	adds	r3, r7, r5
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d10d      	bne.n	8004a3e <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004a22:	1dfb      	adds	r3, r7, #7
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <find_volume+0x86>
 8004a2a:	2337      	movs	r3, #55	; 0x37
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2204      	movs	r2, #4
 8004a32:	4013      	ands	r3, r2
 8004a34:	d001      	beq.n	8004a3a <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8004a36:	230a      	movs	r3, #10
 8004a38:	e2c3      	b.n	8004fc2 <find_volume+0x60e>
			return FR_OK;				/* The file system object is valid */
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e2c1      	b.n	8004fc2 <find_volume+0x60e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	2100      	movs	r1, #0
 8004a46:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4a:	b2d9      	uxtb	r1, r3
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	4ab3      	ldr	r2, [pc, #716]	; (8004d1c <find_volume+0x368>)
 8004a50:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	4ab1      	ldr	r2, [pc, #708]	; (8004d1c <find_volume+0x368>)
 8004a56:	5c9b      	ldrb	r3, [r3, r2]
 8004a58:	2537      	movs	r5, #55	; 0x37
 8004a5a:	197c      	adds	r4, r7, r5
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fe fcad 	bl	80033bc <disk_initialize>
 8004a62:	0003      	movs	r3, r0
 8004a64:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004a66:	197b      	adds	r3, r7, r5
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d001      	beq.n	8004a74 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004a70:	2303      	movs	r3, #3
 8004a72:	e2a6      	b.n	8004fc2 <find_volume+0x60e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004a74:	1dfb      	adds	r3, r7, #7
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <find_volume+0xd8>
 8004a7c:	2337      	movs	r3, #55	; 0x37
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2204      	movs	r2, #4
 8004a84:	4013      	ands	r3, r2
 8004a86:	d001      	beq.n	8004a8c <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8004a88:	230a      	movs	r3, #10
 8004a8a:	e29a      	b.n	8004fc2 <find_volume+0x60e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004a90:	2557      	movs	r5, #87	; 0x57
 8004a92:	197c      	adds	r4, r7, r5
 8004a94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	0011      	movs	r1, r2
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7ff ff1c 	bl	80048d8 <check_fs>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004aa4:	197b      	adds	r3, r7, r5
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d155      	bne.n	8004b58 <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004aac:	2300      	movs	r3, #0
 8004aae:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab0:	e027      	b.n	8004b02 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	33bf      	adds	r3, #191	; 0xbf
 8004aba:	33ff      	adds	r3, #255	; 0xff
 8004abc:	18d3      	adds	r3, r2, r3
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d012      	beq.n	8004af0 <find_volume+0x13c>
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	330b      	adds	r3, #11
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	061a      	lsls	r2, r3, #24
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	330a      	adds	r3, #10
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	4313      	orrs	r3, r2
 8004adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ade:	3209      	adds	r2, #9
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	0212      	lsls	r2, r2, #8
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae8:	3208      	adds	r2, #8
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	e000      	b.n	8004af2 <find_volume+0x13e>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2214      	movs	r2, #20
 8004af4:	18ba      	adds	r2, r7, r2
 8004af6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004af8:	0089      	lsls	r1, r1, #2
 8004afa:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004afe:	3301      	adds	r3, #1
 8004b00:	643b      	str	r3, [r7, #64]	; 0x40
 8004b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d9d4      	bls.n	8004ab2 <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004b08:	2300      	movs	r3, #0
 8004b0a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <find_volume+0x164>
 8004b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b14:	3b01      	subs	r3, #1
 8004b16:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004b18:	2314      	movs	r3, #20
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b1e:	0092      	lsls	r2, r2, #2
 8004b20:	58d3      	ldr	r3, [r2, r3]
 8004b22:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d008      	beq.n	8004b3c <find_volume+0x188>
 8004b2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	0011      	movs	r1, r2
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7ff fed1 	bl	80048d8 <check_fs>
 8004b36:	0003      	movs	r3, r0
 8004b38:	001a      	movs	r2, r3
 8004b3a:	e000      	b.n	8004b3e <find_volume+0x18a>
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	2157      	movs	r1, #87	; 0x57
 8004b40:	187b      	adds	r3, r7, r1
 8004b42:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004b44:	187b      	adds	r3, r7, r1
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <find_volume+0x1a4>
 8004b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4e:	3301      	adds	r3, #1
 8004b50:	643b      	str	r3, [r7, #64]	; 0x40
 8004b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d9df      	bls.n	8004b18 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004b58:	2357      	movs	r3, #87	; 0x57
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d101      	bne.n	8004b66 <find_volume+0x1b2>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e22d      	b.n	8004fc2 <find_volume+0x60e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004b66:	2357      	movs	r3, #87	; 0x57
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <find_volume+0x1c0>
 8004b70:	230d      	movs	r3, #13
 8004b72:	e226      	b.n	8004fc2 <find_volume+0x60e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	7b1b      	ldrb	r3, [r3, #12]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	b21a      	sxth	r2, r3
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	7adb      	ldrb	r3, [r3, #11]
 8004b80:	b21b      	sxth	r3, r3
 8004b82:	4313      	orrs	r3, r2
 8004b84:	b21a      	sxth	r2, r3
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d001      	beq.n	8004b92 <find_volume+0x1de>
		return FR_NO_FILESYSTEM;
 8004b8e:	230d      	movs	r3, #13
 8004b90:	e217      	b.n	8004fc2 <find_volume+0x60e>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	7ddb      	ldrb	r3, [r3, #23]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	b21a      	sxth	r2, r3
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	7d9b      	ldrb	r3, [r3, #22]
 8004b9e:	b21b      	sxth	r3, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b21b      	sxth	r3, r3
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d112      	bne.n	8004bd4 <find_volume+0x220>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2227      	movs	r2, #39	; 0x27
 8004bb2:	5c9b      	ldrb	r3, [r3, r2]
 8004bb4:	061a      	lsls	r2, r3, #24
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	2126      	movs	r1, #38	; 0x26
 8004bba:	5c5b      	ldrb	r3, [r3, r1]
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bc2:	2125      	movs	r1, #37	; 0x25
 8004bc4:	5c52      	ldrb	r2, [r2, r1]
 8004bc6:	0212      	lsls	r2, r2, #8
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bcc:	2124      	movs	r1, #36	; 0x24
 8004bce:	5c52      	ldrb	r2, [r2, r1]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8004bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bd6:	2386      	movs	r3, #134	; 0x86
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004bdc:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	7c19      	ldrb	r1, [r3, #16]
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	4a4e      	ldr	r2, [pc, #312]	; (8004d20 <find_volume+0x36c>)
 8004be6:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	4a4d      	ldr	r2, [pc, #308]	; (8004d20 <find_volume+0x36c>)
 8004bec:	5c9b      	ldrb	r3, [r3, r2]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d006      	beq.n	8004c00 <find_volume+0x24c>
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	4a4a      	ldr	r2, [pc, #296]	; (8004d20 <find_volume+0x36c>)
 8004bf6:	5c9b      	ldrb	r3, [r3, r2]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d001      	beq.n	8004c00 <find_volume+0x24c>
		return FR_NO_FILESYSTEM;
 8004bfc:	230d      	movs	r3, #13
 8004bfe:	e1e0      	b.n	8004fc2 <find_volume+0x60e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	4a47      	ldr	r2, [pc, #284]	; (8004d20 <find_volume+0x36c>)
 8004c04:	5c9b      	ldrb	r3, [r3, r2]
 8004c06:	001a      	movs	r2, r3
 8004c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c0a:	4353      	muls	r3, r2
 8004c0c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	7b59      	ldrb	r1, [r3, #13]
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	4a43      	ldr	r2, [pc, #268]	; (8004d24 <find_volume+0x370>)
 8004c16:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	4a42      	ldr	r2, [pc, #264]	; (8004d24 <find_volume+0x370>)
 8004c1c:	5c9b      	ldrb	r3, [r3, r2]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <find_volume+0x282>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	4a3f      	ldr	r2, [pc, #252]	; (8004d24 <find_volume+0x370>)
 8004c26:	5c9b      	ldrb	r3, [r3, r2]
 8004c28:	0019      	movs	r1, r3
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	4a3d      	ldr	r2, [pc, #244]	; (8004d24 <find_volume+0x370>)
 8004c2e:	5c9b      	ldrb	r3, [r3, r2]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	400b      	ands	r3, r1
 8004c34:	d001      	beq.n	8004c3a <find_volume+0x286>
		return FR_NO_FILESYSTEM;
 8004c36:	230d      	movs	r3, #13
 8004c38:	e1c3      	b.n	8004fc2 <find_volume+0x60e>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	7c9b      	ldrb	r3, [r3, #18]
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	b21a      	sxth	r2, r3
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	7c5b      	ldrb	r3, [r3, #17]
 8004c46:	b21b      	sxth	r3, r3
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	b21b      	sxth	r3, r3
 8004c4c:	b299      	uxth	r1, r3
 8004c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c50:	2382      	movs	r3, #130	; 0x82
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004c56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c58:	2382      	movs	r3, #130	; 0x82
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	5ad3      	ldrh	r3, [r2, r3]
 8004c5e:	220f      	movs	r2, #15
 8004c60:	4013      	ands	r3, r2
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <find_volume+0x2b8>
		return FR_NO_FILESYSTEM;
 8004c68:	230d      	movs	r3, #13
 8004c6a:	e1aa      	b.n	8004fc2 <find_volume+0x60e>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	7d1b      	ldrb	r3, [r3, #20]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	b21a      	sxth	r2, r3
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	7cdb      	ldrb	r3, [r3, #19]
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	b21b      	sxth	r3, r3
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d112      	bne.n	8004cae <find_volume+0x2fa>
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	2223      	movs	r2, #35	; 0x23
 8004c8c:	5c9b      	ldrb	r3, [r3, r2]
 8004c8e:	061a      	lsls	r2, r3, #24
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	2122      	movs	r1, #34	; 0x22
 8004c94:	5c5b      	ldrb	r3, [r3, r1]
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c9c:	2121      	movs	r1, #33	; 0x21
 8004c9e:	5c52      	ldrb	r2, [r2, r1]
 8004ca0:	0212      	lsls	r2, r2, #8
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca6:	2120      	movs	r1, #32
 8004ca8:	5c52      	ldrb	r2, [r2, r1]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	7bdb      	ldrb	r3, [r3, #15]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	b21a      	sxth	r2, r3
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	7b9b      	ldrb	r3, [r3, #14]
 8004cba:	b21b      	sxth	r3, r3
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	b21a      	sxth	r2, r3
 8004cc0:	212e      	movs	r1, #46	; 0x2e
 8004cc2:	187b      	adds	r3, r7, r1
 8004cc4:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004cc6:	187b      	adds	r3, r7, r1
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <find_volume+0x31e>
 8004cce:	230d      	movs	r3, #13
 8004cd0:	e177      	b.n	8004fc2 <find_volume+0x60e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004cd2:	232e      	movs	r3, #46	; 0x2e
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	881a      	ldrh	r2, [r3, #0]
 8004cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cda:	18d3      	adds	r3, r2, r3
 8004cdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cde:	2282      	movs	r2, #130	; 0x82
 8004ce0:	0092      	lsls	r2, r2, #2
 8004ce2:	5a8a      	ldrh	r2, [r1, r2]
 8004ce4:	0912      	lsrs	r2, r2, #4
 8004ce6:	b292      	uxth	r2, r2
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d201      	bcs.n	8004cf8 <find_volume+0x344>
 8004cf4:	230d      	movs	r3, #13
 8004cf6:	e164      	b.n	8004fc2 <find_volume+0x60e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	1ad0      	subs	r0, r2, r3
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	4a08      	ldr	r2, [pc, #32]	; (8004d24 <find_volume+0x370>)
 8004d02:	5c9b      	ldrb	r3, [r3, r2]
 8004d04:	0019      	movs	r1, r3
 8004d06:	f7fb fa07 	bl	8000118 <__udivsi3>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <find_volume+0x374>
 8004d14:	230d      	movs	r3, #13
 8004d16:	e154      	b.n	8004fc2 <find_volume+0x60e>
 8004d18:	2000009c 	.word	0x2000009c
 8004d1c:	00000201 	.word	0x00000201
 8004d20:	00000203 	.word	0x00000203
 8004d24:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 8004d28:	2357      	movs	r3, #87	; 0x57
 8004d2a:	18fb      	adds	r3, r7, r3
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	4aa6      	ldr	r2, [pc, #664]	; (8004fcc <find_volume+0x618>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d903      	bls.n	8004d40 <find_volume+0x38c>
 8004d38:	2357      	movs	r3, #87	; 0x57
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	4aa3      	ldr	r2, [pc, #652]	; (8004fd0 <find_volume+0x61c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d903      	bls.n	8004d50 <find_volume+0x39c>
 8004d48:	2357      	movs	r3, #87	; 0x57
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	1c99      	adds	r1, r3, #2
 8004d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d56:	2385      	movs	r3, #133	; 0x85
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8004d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d5e:	2387      	movs	r3, #135	; 0x87
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d64:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004d66:	232e      	movs	r3, #46	; 0x2e
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	881a      	ldrh	r2, [r3, #0]
 8004d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6e:	18d1      	adds	r1, r2, r3
 8004d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d72:	2388      	movs	r3, #136	; 0x88
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8004d78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	18d1      	adds	r1, r2, r3
 8004d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d80:	238a      	movs	r3, #138	; 0x8a
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 8004d86:	2357      	movs	r3, #87	; 0x57
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d125      	bne.n	8004ddc <find_volume+0x428>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d92:	2382      	movs	r3, #130	; 0x82
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	5ad3      	ldrh	r3, [r2, r3]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <find_volume+0x3ec>
 8004d9c:	230d      	movs	r3, #13
 8004d9e:	e110      	b.n	8004fc2 <find_volume+0x60e>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	222f      	movs	r2, #47	; 0x2f
 8004da4:	5c9b      	ldrb	r3, [r3, r2]
 8004da6:	061a      	lsls	r2, r3, #24
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	212e      	movs	r1, #46	; 0x2e
 8004dac:	5c5b      	ldrb	r3, [r3, r1]
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	4313      	orrs	r3, r2
 8004db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db4:	212d      	movs	r1, #45	; 0x2d
 8004db6:	5c52      	ldrb	r2, [r2, r1]
 8004db8:	0212      	lsls	r2, r2, #8
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	5c52      	ldrb	r2, [r2, r1]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc8:	2389      	movs	r3, #137	; 0x89
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dd0:	2385      	movs	r3, #133	; 0x85
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	58d3      	ldr	r3, [r2, r3]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dda:	e02c      	b.n	8004e36 <find_volume+0x482>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dde:	2382      	movs	r3, #130	; 0x82
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	5ad3      	ldrh	r3, [r2, r3]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <find_volume+0x438>
 8004de8:	230d      	movs	r3, #13
 8004dea:	e0ea      	b.n	8004fc2 <find_volume+0x60e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dee:	2388      	movs	r3, #136	; 0x88
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	58d2      	ldr	r2, [r2, r3]
 8004df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df6:	18d1      	adds	r1, r2, r3
 8004df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dfa:	2389      	movs	r3, #137	; 0x89
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004e00:	2357      	movs	r3, #87	; 0x57
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d105      	bne.n	8004e16 <find_volume+0x462>
 8004e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e0c:	2385      	movs	r3, #133	; 0x85
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	58d3      	ldr	r3, [r2, r3]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	e00e      	b.n	8004e34 <find_volume+0x480>
 8004e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e18:	2385      	movs	r3, #133	; 0x85
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	58d2      	ldr	r2, [r2, r3]
 8004e1e:	0013      	movs	r3, r2
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	189b      	adds	r3, r3, r2
 8004e24:	085a      	lsrs	r2, r3, #1
 8004e26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e28:	2385      	movs	r3, #133	; 0x85
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	58cb      	ldr	r3, [r1, r3]
 8004e2e:	2101      	movs	r1, #1
 8004e30:	400b      	ands	r3, r1
 8004e32:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004e34:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e38:	2386      	movs	r3, #134	; 0x86
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	58d2      	ldr	r2, [r2, r3]
 8004e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e40:	4964      	ldr	r1, [pc, #400]	; (8004fd4 <find_volume+0x620>)
 8004e42:	468c      	mov	ip, r1
 8004e44:	4463      	add	r3, ip
 8004e46:	0a5b      	lsrs	r3, r3, #9
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d201      	bcs.n	8004e50 <find_volume+0x49c>
		return FR_NO_FILESYSTEM;
 8004e4c:	230d      	movs	r3, #13
 8004e4e:	e0b8      	b.n	8004fc2 <find_volume+0x60e>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e52:	2384      	movs	r3, #132	; 0x84
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	2101      	movs	r1, #1
 8004e58:	4249      	negs	r1, r1
 8004e5a:	50d1      	str	r1, [r2, r3]
 8004e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e5e:	2384      	movs	r3, #132	; 0x84
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	58d1      	ldr	r1, [r2, r3]
 8004e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e66:	2383      	movs	r3, #131	; 0x83
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	4a5a      	ldr	r2, [pc, #360]	; (8004fd8 <find_volume+0x624>)
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004e74:	2357      	movs	r3, #87	; 0x57
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d000      	beq.n	8004e80 <find_volume+0x4cc>
 8004e7e:	e089      	b.n	8004f94 <find_volume+0x5e0>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2231      	movs	r2, #49	; 0x31
 8004e84:	5c9b      	ldrb	r3, [r3, r2]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	b21a      	sxth	r2, r3
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	2130      	movs	r1, #48	; 0x30
 8004e8e:	5c5b      	ldrb	r3, [r3, r1]
 8004e90:	b21b      	sxth	r3, r3
 8004e92:	4313      	orrs	r3, r2
 8004e94:	b21b      	sxth	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d000      	beq.n	8004e9c <find_volume+0x4e8>
 8004e9a:	e07b      	b.n	8004f94 <find_volume+0x5e0>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	0011      	movs	r1, r2
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7fe fced 	bl	8003884 <move_window>
 8004eaa:	1e03      	subs	r3, r0, #0
 8004eac:	d172      	bne.n	8004f94 <find_volume+0x5e0>
	{
		fs->fsi_flag = 0;
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	4a49      	ldr	r2, [pc, #292]	; (8004fd8 <find_volume+0x624>)
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	4a46      	ldr	r2, [pc, #280]	; (8004fd4 <find_volume+0x620>)
 8004eba:	5c9b      	ldrb	r3, [r3, r2]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	b21a      	sxth	r2, r3
 8004ec0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ec2:	23ff      	movs	r3, #255	; 0xff
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	b21b      	sxth	r3, r3
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	b21b      	sxth	r3, r3
 8004ece:	4a43      	ldr	r2, [pc, #268]	; (8004fdc <find_volume+0x628>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d15f      	bne.n	8004f94 <find_volume+0x5e0>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	78db      	ldrb	r3, [r3, #3]
 8004ed8:	061a      	lsls	r2, r3, #24
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	789b      	ldrb	r3, [r3, #2]
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee4:	7852      	ldrb	r2, [r2, #1]
 8004ee6:	0212      	lsls	r2, r2, #8
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eec:	7812      	ldrb	r2, [r2, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	4a3b      	ldr	r2, [pc, #236]	; (8004fe0 <find_volume+0x62c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d14e      	bne.n	8004f94 <find_volume+0x5e0>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ef8:	23e8      	movs	r3, #232	; 0xe8
 8004efa:	33ff      	adds	r3, #255	; 0xff
 8004efc:	5cd3      	ldrb	r3, [r2, r3]
 8004efe:	061a      	lsls	r2, r3, #24
 8004f00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f02:	23f3      	movs	r3, #243	; 0xf3
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f0e:	22e6      	movs	r2, #230	; 0xe6
 8004f10:	32ff      	adds	r2, #255	; 0xff
 8004f12:	5c8a      	ldrb	r2, [r1, r2]
 8004f14:	0212      	lsls	r2, r2, #8
 8004f16:	4313      	orrs	r3, r2
 8004f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f1a:	22f2      	movs	r2, #242	; 0xf2
 8004f1c:	0052      	lsls	r2, r2, #1
 8004f1e:	5c8a      	ldrb	r2, [r1, r2]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	4a30      	ldr	r2, [pc, #192]	; (8004fe4 <find_volume+0x630>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d135      	bne.n	8004f94 <find_volume+0x5e0>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f2a:	23ec      	movs	r3, #236	; 0xec
 8004f2c:	33ff      	adds	r3, #255	; 0xff
 8004f2e:	5cd3      	ldrb	r3, [r2, r3]
 8004f30:	061a      	lsls	r2, r3, #24
 8004f32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f34:	23f5      	movs	r3, #245	; 0xf5
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	5ccb      	ldrb	r3, [r1, r3]
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f40:	22ea      	movs	r2, #234	; 0xea
 8004f42:	32ff      	adds	r2, #255	; 0xff
 8004f44:	5c8a      	ldrb	r2, [r1, r2]
 8004f46:	0212      	lsls	r2, r2, #8
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f4c:	22f4      	movs	r2, #244	; 0xf4
 8004f4e:	0052      	lsls	r2, r2, #1
 8004f50:	5c8a      	ldrb	r2, [r1, r2]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	0019      	movs	r1, r3
 8004f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f58:	2384      	movs	r3, #132	; 0x84
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f60:	23f0      	movs	r3, #240	; 0xf0
 8004f62:	33ff      	adds	r3, #255	; 0xff
 8004f64:	5cd3      	ldrb	r3, [r2, r3]
 8004f66:	061a      	lsls	r2, r3, #24
 8004f68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f6a:	23f7      	movs	r3, #247	; 0xf7
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	5ccb      	ldrb	r3, [r1, r3]
 8004f70:	041b      	lsls	r3, r3, #16
 8004f72:	4313      	orrs	r3, r2
 8004f74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f76:	22ee      	movs	r2, #238	; 0xee
 8004f78:	32ff      	adds	r2, #255	; 0xff
 8004f7a:	5c8a      	ldrb	r2, [r1, r2]
 8004f7c:	0212      	lsls	r2, r2, #8
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f82:	22f6      	movs	r2, #246	; 0xf6
 8004f84:	0052      	lsls	r2, r2, #1
 8004f86:	5c8a      	ldrb	r2, [r1, r2]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f8e:	2383      	movs	r3, #131	; 0x83
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f96:	2357      	movs	r3, #87	; 0x57
 8004f98:	18f9      	adds	r1, r7, r3
 8004f9a:	2380      	movs	r3, #128	; 0x80
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	7809      	ldrb	r1, [r1, #0]
 8004fa0:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <find_volume+0x634>)
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <find_volume+0x634>)
 8004fac:	801a      	strh	r2, [r3, #0]
 8004fae:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <find_volume+0x634>)
 8004fb0:	8819      	ldrh	r1, [r3, #0]
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <find_volume+0x638>)
 8004fb6:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7fe fbe4 	bl	8003788 <clear_lock>
#endif

	return FR_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b016      	add	sp, #88	; 0x58
 8004fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	00000ff5 	.word	0x00000ff5
 8004fd0:	0000fff5 	.word	0x0000fff5
 8004fd4:	000001ff 	.word	0x000001ff
 8004fd8:	00000205 	.word	0x00000205
 8004fdc:	ffffaa55 	.word	0xffffaa55
 8004fe0:	41615252 	.word	0x41615252
 8004fe4:	61417272 	.word	0x61417272
 8004fe8:	200000a0 	.word	0x200000a0
 8004fec:	00000206 	.word	0x00000206

08004ff0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d028      	beq.n	8005054 <validate+0x64>
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	58d3      	ldr	r3, [r2, r3]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d022      	beq.n	8005054 <validate+0x64>
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	58d2      	ldr	r2, [r2, r3]
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	5cd3      	ldrb	r3, [r2, r3]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d019      	beq.n	8005054 <validate+0x64>
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	58d3      	ldr	r3, [r2, r3]
 8005028:	4a0e      	ldr	r2, [pc, #56]	; (8005064 <validate+0x74>)
 800502a:	5a9a      	ldrh	r2, [r3, r2]
 800502c:	68f9      	ldr	r1, [r7, #12]
 800502e:	2381      	movs	r3, #129	; 0x81
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	5acb      	ldrh	r3, [r1, r3]
 8005034:	429a      	cmp	r2, r3
 8005036:	d10d      	bne.n	8005054 <validate+0x64>
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	2380      	movs	r3, #128	; 0x80
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	58d3      	ldr	r3, [r2, r3]
 8005040:	4a09      	ldr	r2, [pc, #36]	; (8005068 <validate+0x78>)
 8005042:	5c9b      	ldrb	r3, [r3, r2]
 8005044:	0018      	movs	r0, r3
 8005046:	f7fe f997 	bl	8003378 <disk_status>
 800504a:	0003      	movs	r3, r0
 800504c:	001a      	movs	r2, r3
 800504e:	2301      	movs	r3, #1
 8005050:	4013      	ands	r3, r2
 8005052:	d001      	beq.n	8005058 <validate+0x68>
		return FR_INVALID_OBJECT;
 8005054:	2309      	movs	r3, #9
 8005056:	e000      	b.n	800505a <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	0018      	movs	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	b004      	add	sp, #16
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	00000206 	.word	0x00000206
 8005068:	00000201 	.word	0x00000201

0800506c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800506c:	b5b0      	push	{r4, r5, r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	1dfb      	adds	r3, r7, #7
 8005078:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800507e:	2310      	movs	r3, #16
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	0018      	movs	r0, r3
 8005084:	f7ff fbe6 	bl	8004854 <get_ldnumber>
 8005088:	0003      	movs	r3, r0
 800508a:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	da01      	bge.n	8005096 <f_mount+0x2a>
 8005092:	230b      	movs	r3, #11
 8005094:	e034      	b.n	8005100 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005096:	4b1c      	ldr	r3, [pc, #112]	; (8005108 <f_mount+0x9c>)
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	0092      	lsls	r2, r2, #2
 800509c:	58d3      	ldr	r3, [r2, r3]
 800509e:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	0018      	movs	r0, r3
 80050aa:	f7fe fb6d 	bl	8003788 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	2100      	movs	r1, #0
 80050b6:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	2100      	movs	r1, #0
 80050c6:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <f_mount+0x9c>)
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	0092      	lsls	r2, r2, #2
 80050d0:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <f_mount+0x74>
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d001      	beq.n	80050e4 <f_mount+0x78>
 80050e0:	2300      	movs	r3, #0
 80050e2:	e00d      	b.n	8005100 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80050e4:	2517      	movs	r5, #23
 80050e6:	197c      	adds	r4, r7, r5
 80050e8:	2308      	movs	r3, #8
 80050ea:	18f9      	adds	r1, r7, r3
 80050ec:	230c      	movs	r3, #12
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	2200      	movs	r2, #0
 80050f2:	0018      	movs	r0, r3
 80050f4:	f7ff fc5e 	bl	80049b4 <find_volume>
 80050f8:	0003      	movs	r3, r0
 80050fa:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80050fc:	197b      	adds	r3, r7, r5
 80050fe:	781b      	ldrb	r3, [r3, #0]
}
 8005100:	0018      	movs	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	b008      	add	sp, #32
 8005106:	bdb0      	pop	{r4, r5, r7, pc}
 8005108:	2000009c 	.word	0x2000009c

0800510c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800510c:	b5b0      	push	{r4, r5, r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <f_opendir+0x14>
 800511c:	2309      	movs	r3, #9
 800511e:	e099      	b.n	8005254 <f_opendir+0x148>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8005120:	251f      	movs	r5, #31
 8005122:	197c      	adds	r4, r7, r5
 8005124:	0039      	movs	r1, r7
 8005126:	2318      	movs	r3, #24
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	2200      	movs	r2, #0
 800512c:	0018      	movs	r0, r3
 800512e:	f7ff fc41 	bl	80049b4 <find_volume>
 8005132:	0003      	movs	r3, r0
 8005134:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005136:	197b      	adds	r3, r7, r5
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d000      	beq.n	8005140 <f_opendir+0x34>
 800513e:	e07c      	b.n	800523a <f_opendir+0x12e>
		dp->fs = fs;
 8005140:	69b9      	ldr	r1, [r7, #24]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	2380      	movs	r3, #128	; 0x80
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	50d1      	str	r1, [r2, r3]
		INIT_BUF(*dp);
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	2386      	movs	r3, #134	; 0x86
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	210c      	movs	r1, #12
 8005152:	1879      	adds	r1, r7, r1
 8005154:	50d1      	str	r1, [r2, r3]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	251f      	movs	r5, #31
 800515a:	197c      	adds	r4, r7, r5
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0011      	movs	r1, r2
 8005160:	0018      	movs	r0, r3
 8005162:	f7ff faeb 	bl	800473c <follow_path>
 8005166:	0003      	movs	r3, r0
 8005168:	7023      	strb	r3, [r4, #0]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800516a:	197b      	adds	r3, r7, r5
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d15a      	bne.n	8005228 <f_opendir+0x11c>
			if (dp->dir) {						/* It is not the origin directory itself */
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	2385      	movs	r3, #133	; 0x85
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	58d3      	ldr	r3, [r2, r3]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01b      	beq.n	80051b6 <f_opendir+0xaa>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	2385      	movs	r3, #133	; 0x85
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	58d3      	ldr	r3, [r2, r3]
 8005186:	330b      	adds	r3, #11
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	001a      	movs	r2, r3
 800518c:	2310      	movs	r3, #16
 800518e:	4013      	ands	r3, r2
 8005190:	d00d      	beq.n	80051ae <f_opendir+0xa2>
					dp->sclust = ld_clust(fs, dp->dir);
 8005192:	69b8      	ldr	r0, [r7, #24]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	2385      	movs	r3, #133	; 0x85
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	58d3      	ldr	r3, [r2, r3]
 800519c:	0019      	movs	r1, r3
 800519e:	f7ff f83d 	bl	800421c <ld_clust>
 80051a2:	0001      	movs	r1, r0
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	2382      	movs	r3, #130	; 0x82
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	50d1      	str	r1, [r2, r3]
 80051ac:	e003      	b.n	80051b6 <f_opendir+0xaa>
				else							/* The object is a file */
					res = FR_NO_PATH;
 80051ae:	231f      	movs	r3, #31
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	2205      	movs	r2, #5
 80051b4:	701a      	strb	r2, [r3, #0]
			}
			if (res == FR_OK) {
 80051b6:	231f      	movs	r3, #31
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d133      	bne.n	8005228 <f_opendir+0x11c>
				dp->id = fs->id;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	4a26      	ldr	r2, [pc, #152]	; (800525c <f_opendir+0x150>)
 80051c4:	5a99      	ldrh	r1, [r3, r2]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	2381      	movs	r3, #129	; 0x81
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	52d1      	strh	r1, [r2, r3]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80051ce:	251f      	movs	r5, #31
 80051d0:	197c      	adds	r4, r7, r5
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2100      	movs	r1, #0
 80051d6:	0018      	movs	r0, r3
 80051d8:	f7fe fe56 	bl	8003e88 <dir_sdi>
 80051dc:	0003      	movs	r3, r0
 80051de:	7023      	strb	r3, [r4, #0]
#if _FS_LOCK
				if (res == FR_OK) {
 80051e0:	197b      	adds	r3, r7, r5
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d11f      	bne.n	8005228 <f_opendir+0x11c>
					if (dp->sclust) {
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	2382      	movs	r3, #130	; 0x82
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	58d3      	ldr	r3, [r2, r3]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d014      	beq.n	800521e <f_opendir+0x112>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2100      	movs	r1, #0
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7fe f9b7 	bl	800356c <inc_lock>
 80051fe:	0001      	movs	r1, r0
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	2387      	movs	r3, #135	; 0x87
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	50d1      	str	r1, [r2, r3]
						if (!dp->lockid)
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	2387      	movs	r3, #135	; 0x87
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	58d3      	ldr	r3, [r2, r3]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <f_opendir+0x11c>
							res = FR_TOO_MANY_OPEN_FILES;
 8005214:	231f      	movs	r3, #31
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2212      	movs	r2, #18
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e004      	b.n	8005228 <f_opendir+0x11c>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	2387      	movs	r3, #135	; 0x87
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	2100      	movs	r1, #0
 8005226:	50d1      	str	r1, [r2, r3]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005228:	231f      	movs	r3, #31
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b04      	cmp	r3, #4
 8005230:	d103      	bne.n	800523a <f_opendir+0x12e>
 8005232:	231f      	movs	r3, #31
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	2205      	movs	r2, #5
 8005238:	701a      	strb	r2, [r3, #0]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800523a:	231f      	movs	r3, #31
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <f_opendir+0x142>
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	2380      	movs	r3, #128	; 0x80
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	2100      	movs	r1, #0
 800524c:	50d1      	str	r1, [r2, r3]

	LEAVE_FF(fs, res);
 800524e:	231f      	movs	r3, #31
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	781b      	ldrb	r3, [r3, #0]
}
 8005254:	0018      	movs	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	b008      	add	sp, #32
 800525a:	bdb0      	pop	{r4, r5, r7, pc}
 800525c:	00000206 	.word	0x00000206

08005260 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8005260:	b5b0      	push	{r4, r5, r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8005268:	250f      	movs	r5, #15
 800526a:	197c      	adds	r4, r7, r5
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	0018      	movs	r0, r3
 8005270:	f7ff febe 	bl	8004ff0 <validate>
 8005274:	0003      	movs	r3, r0
 8005276:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005278:	197b      	adds	r3, r7, r5
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d11a      	bne.n	80052b6 <f_closedir+0x56>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	2387      	movs	r3, #135	; 0x87
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	58d3      	ldr	r3, [r2, r3]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <f_closedir+0x42>
			res = dec_lock(dp->lockid);
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	2387      	movs	r3, #135	; 0x87
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	58d3      	ldr	r3, [r2, r3]
 8005294:	220f      	movs	r2, #15
 8005296:	18bc      	adds	r4, r7, r2
 8005298:	0018      	movs	r0, r3
 800529a:	f7fe fa1f 	bl	80036dc <dec_lock>
 800529e:	0003      	movs	r3, r0
 80052a0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK)
 80052a2:	230f      	movs	r3, #15
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d104      	bne.n	80052b6 <f_closedir+0x56>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	2380      	movs	r3, #128	; 0x80
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	2100      	movs	r1, #0
 80052b4:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80052b6:	230f      	movs	r3, #15
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	781b      	ldrb	r3, [r3, #0]
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b004      	add	sp, #16
 80052c2:	bdb0      	pop	{r4, r5, r7, pc}

080052c4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80052c4:	b5b0      	push	{r4, r5, r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 80052ce:	2517      	movs	r5, #23
 80052d0:	197c      	adds	r4, r7, r5
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7ff fe8b 	bl	8004ff0 <validate>
 80052da:	0003      	movs	r3, r0
 80052dc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80052de:	197b      	adds	r3, r7, r5
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d149      	bne.n	800537a <f_readdir+0xb6>
		if (!fno) {
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <f_readdir+0x3c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80052ec:	2317      	movs	r3, #23
 80052ee:	18fc      	adds	r4, r7, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2100      	movs	r1, #0
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7fe fdc7 	bl	8003e88 <dir_sdi>
 80052fa:	0003      	movs	r3, r0
 80052fc:	7023      	strb	r3, [r4, #0]
 80052fe:	e03c      	b.n	800537a <f_readdir+0xb6>
		} else {
			INIT_BUF(*dp);
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	2386      	movs	r3, #134	; 0x86
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	2108      	movs	r1, #8
 8005308:	1879      	adds	r1, r7, r1
 800530a:	50d1      	str	r1, [r2, r3]
			res = dir_read(dp, 0);			/* Read an item */
 800530c:	2517      	movs	r5, #23
 800530e:	197c      	adds	r4, r7, r5
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2100      	movs	r1, #0
 8005314:	0018      	movs	r0, r3
 8005316:	f7ff f813 	bl	8004340 <dir_read>
 800531a:	0003      	movs	r3, r0
 800531c:	7023      	strb	r3, [r4, #0]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800531e:	197b      	adds	r3, r7, r5
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b04      	cmp	r3, #4
 8005324:	d108      	bne.n	8005338 <f_readdir+0x74>
				dp->sect = 0;
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	2384      	movs	r3, #132	; 0x84
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	2100      	movs	r1, #0
 800532e:	50d1      	str	r1, [r2, r3]
				res = FR_OK;
 8005330:	2317      	movs	r3, #23
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8005338:	2317      	movs	r3, #23
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d11b      	bne.n	800537a <f_readdir+0xb6>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	0011      	movs	r1, r2
 8005348:	0018      	movs	r0, r3
 800534a:	f7ff f877 	bl	800443c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800534e:	2517      	movs	r5, #23
 8005350:	197c      	adds	r4, r7, r5
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2100      	movs	r1, #0
 8005356:	0018      	movs	r0, r3
 8005358:	f7fe fe46 	bl	8003fe8 <dir_next>
 800535c:	0003      	movs	r3, r0
 800535e:	7023      	strb	r3, [r4, #0]
				if (res == FR_NO_FILE) {
 8005360:	197b      	adds	r3, r7, r5
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b04      	cmp	r3, #4
 8005366:	d108      	bne.n	800537a <f_readdir+0xb6>
					dp->sect = 0;
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	2384      	movs	r3, #132	; 0x84
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	2100      	movs	r1, #0
 8005370:	50d1      	str	r1, [r2, r3]
					res = FR_OK;
 8005372:	2317      	movs	r3, #23
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	2200      	movs	r2, #0
 8005378:	701a      	strb	r2, [r3, #0]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800537a:	2317      	movs	r3, #23
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	781b      	ldrb	r3, [r3, #0]
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b006      	add	sp, #24
 8005386:	bdb0      	pop	{r4, r5, r7, pc}

08005388 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005388:	b5b0      	push	{r4, r5, r7, lr}
 800538a:	b08e      	sub	sp, #56	; 0x38
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8005394:	2537      	movs	r5, #55	; 0x37
 8005396:	197c      	adds	r4, r7, r5
 8005398:	230c      	movs	r3, #12
 800539a:	18f9      	adds	r1, r7, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	0018      	movs	r0, r3
 80053a2:	f7ff fb07 	bl	80049b4 <find_volume>
 80053a6:	0003      	movs	r3, r0
 80053a8:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80053b0:	197b      	adds	r3, r7, r5
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d000      	beq.n	80053ba <f_getfree+0x32>
 80053b8:	e0c0      	b.n	800553c <f_getfree+0x1b4>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	2384      	movs	r3, #132	; 0x84
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	58d2      	ldr	r2, [r2, r3]
 80053c2:	69f9      	ldr	r1, [r7, #28]
 80053c4:	2385      	movs	r3, #133	; 0x85
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	58cb      	ldr	r3, [r1, r3]
 80053ca:	3b02      	subs	r3, #2
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d806      	bhi.n	80053de <f_getfree+0x56>
			*nclst = fs->free_clust;
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	2384      	movs	r3, #132	; 0x84
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	58d2      	ldr	r2, [r2, r3]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e0ae      	b.n	800553c <f_getfree+0x1b4>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80053de:	201b      	movs	r0, #27
 80053e0:	183b      	adds	r3, r7, r0
 80053e2:	69f9      	ldr	r1, [r7, #28]
 80053e4:	2280      	movs	r2, #128	; 0x80
 80053e6:	0092      	lsls	r2, r2, #2
 80053e8:	5c8a      	ldrb	r2, [r1, r2]
 80053ea:	701a      	strb	r2, [r3, #0]
			n = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80053f0:	183b      	adds	r3, r7, r0
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d12a      	bne.n	800544e <f_getfree+0xc6>
				clst = 2;
 80053f8:	2302      	movs	r3, #2
 80053fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80053fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	0011      	movs	r1, r2
 8005402:	0018      	movs	r0, r3
 8005404:	f7fe fa9e 	bl	8003944 <get_fat>
 8005408:	0003      	movs	r3, r0
 800540a:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3301      	adds	r3, #1
 8005410:	d104      	bne.n	800541c <f_getfree+0x94>
 8005412:	2337      	movs	r3, #55	; 0x37
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2201      	movs	r2, #1
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	e07e      	b.n	800551a <f_getfree+0x192>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d104      	bne.n	800542c <f_getfree+0xa4>
 8005422:	2337      	movs	r3, #55	; 0x37
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	2202      	movs	r2, #2
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e076      	b.n	800551a <f_getfree+0x192>
					if (stat == 0) n++;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <f_getfree+0xb0>
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	3301      	adds	r3, #1
 8005436:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	3301      	adds	r3, #1
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	2385      	movs	r3, #133	; 0x85
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	58d3      	ldr	r3, [r2, r3]
 8005446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005448:	429a      	cmp	r2, r3
 800544a:	d3d7      	bcc.n	80053fc <f_getfree+0x74>
 800544c:	e065      	b.n	800551a <f_getfree+0x192>
			} else {
				clst = fs->n_fatent;
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	2385      	movs	r3, #133	; 0x85
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	58d3      	ldr	r3, [r2, r3]
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	2388      	movs	r3, #136	; 0x88
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	58d3      	ldr	r3, [r2, r3]
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
 8005466:	2300      	movs	r3, #0
 8005468:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	2b00      	cmp	r3, #0
 800546e:	d114      	bne.n	800549a <f_getfree+0x112>
						res = move_window(fs, sect++);
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	62ba      	str	r2, [r7, #40]	; 0x28
 8005476:	2537      	movs	r5, #55	; 0x37
 8005478:	197c      	adds	r4, r7, r5
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	0019      	movs	r1, r3
 800547e:	0010      	movs	r0, r2
 8005480:	f7fe fa00 	bl	8003884 <move_window>
 8005484:	0003      	movs	r3, r0
 8005486:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 8005488:	197b      	adds	r3, r7, r5
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d143      	bne.n	8005518 <f_getfree+0x190>
						p = fs->win.d8;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800549a:	231b      	movs	r3, #27
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d115      	bne.n	80054d0 <f_getfree+0x148>
						if (LD_WORD(p) == 0) n++;
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	3301      	adds	r3, #1
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	b21a      	sxth	r2, r3
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	b21b      	sxth	r3, r3
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b21b      	sxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <f_getfree+0x13a>
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	3301      	adds	r3, #1
 80054c0:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	3302      	adds	r3, #2
 80054c6:	623b      	str	r3, [r7, #32]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	3b02      	subs	r3, #2
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
 80054ce:	e01c      	b.n	800550a <f_getfree+0x182>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	3303      	adds	r3, #3
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	061a      	lsls	r2, r3, #24
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	3302      	adds	r3, #2
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	4313      	orrs	r3, r2
 80054e2:	6a3a      	ldr	r2, [r7, #32]
 80054e4:	3201      	adds	r2, #1
 80054e6:	7812      	ldrb	r2, [r2, #0]
 80054e8:	0212      	lsls	r2, r2, #8
 80054ea:	4313      	orrs	r3, r2
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	7812      	ldrb	r2, [r2, #0]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	d102      	bne.n	80054fe <f_getfree+0x176>
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	3301      	adds	r3, #1
 80054fc:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	3304      	adds	r3, #4
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	3b04      	subs	r3, #4
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	3b01      	subs	r3, #1
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1a9      	bne.n	800546a <f_getfree+0xe2>
 8005516:	e000      	b.n	800551a <f_getfree+0x192>
						if (res != FR_OK) break;
 8005518:	46c0      	nop			; (mov r8, r8)
			}
			fs->free_clust = n;
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	2384      	movs	r3, #132	; 0x84
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005522:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <f_getfree+0x1c4>)
 8005528:	5c9b      	ldrb	r3, [r3, r2]
 800552a:	2201      	movs	r2, #1
 800552c:	4313      	orrs	r3, r2
 800552e:	b2d9      	uxtb	r1, r3
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4a06      	ldr	r2, [pc, #24]	; (800554c <f_getfree+0x1c4>)
 8005534:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800553c:	2337      	movs	r3, #55	; 0x37
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	781b      	ldrb	r3, [r3, #0]
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b00e      	add	sp, #56	; 0x38
 8005548:	bdb0      	pop	{r4, r5, r7, pc}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	00000205 	.word	0x00000205

08005550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	1dfb      	adds	r3, r7, #7
 800555c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800555e:	2317      	movs	r3, #23
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8005566:	2316      	movs	r3, #22
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 800556e:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <FATFS_LinkDriverEx+0xa8>)
 8005570:	7a5b      	ldrb	r3, [r3, #9]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d838      	bhi.n	80055ea <FATFS_LinkDriverEx+0x9a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005578:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <FATFS_LinkDriverEx+0xa8>)
 800557a:	7a5b      	ldrb	r3, [r3, #9]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	001a      	movs	r2, r3
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <FATFS_LinkDriverEx+0xa8>)
 8005582:	2100      	movs	r1, #0
 8005584:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005586:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <FATFS_LinkDriverEx+0xa8>)
 8005588:	7a5b      	ldrb	r3, [r3, #9]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <FATFS_LinkDriverEx+0xa8>)
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	18d3      	adds	r3, r2, r3
 8005592:	3304      	adds	r3, #4
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8005598:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <FATFS_LinkDriverEx+0xa8>)
 800559a:	7a5b      	ldrb	r3, [r3, #9]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	001a      	movs	r2, r3
 80055a0:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <FATFS_LinkDriverEx+0xa8>)
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	1dfa      	adds	r2, r7, #7
 80055a6:	7812      	ldrb	r2, [r2, #0]
 80055a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80055aa:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <FATFS_LinkDriverEx+0xa8>)
 80055ac:	7a5b      	ldrb	r3, [r3, #9]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	b2d1      	uxtb	r1, r2
 80055b4:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <FATFS_LinkDriverEx+0xa8>)
 80055b6:	7251      	strb	r1, [r2, #9]
 80055b8:	2116      	movs	r1, #22
 80055ba:	187a      	adds	r2, r7, r1
 80055bc:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 80055be:	187b      	adds	r3, r7, r1
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	3330      	adds	r3, #48	; 0x30
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3301      	adds	r3, #1
 80055ce:	223a      	movs	r2, #58	; 0x3a
 80055d0:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3302      	adds	r3, #2
 80055d6:	222f      	movs	r2, #47	; 0x2f
 80055d8:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	3303      	adds	r3, #3
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80055e2:	2317      	movs	r3, #23
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80055ea:	2317      	movs	r3, #23
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	781b      	ldrb	r3, [r3, #0]
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b006      	add	sp, #24
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	200000bc 	.word	0x200000bc

080055fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	0018      	movs	r0, r3
 800560e:	f7ff ff9f 	bl	8005550 <FATFS_LinkDriverEx>
 8005612:	0003      	movs	r3, r0
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b002      	add	sp, #8
 800561a:	bd80      	pop	{r7, pc}

0800561c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005620:	4a06      	ldr	r2, [pc, #24]	; (800563c <MX_FATFS_Init+0x20>)
 8005622:	4b07      	ldr	r3, [pc, #28]	; (8005640 <MX_FATFS_Init+0x24>)
 8005624:	0011      	movs	r1, r2
 8005626:	0018      	movs	r0, r3
 8005628:	f7ff ffe8 	bl	80055fc <FATFS_LinkDriver>
 800562c:	0003      	movs	r3, r0
 800562e:	001a      	movs	r2, r3
 8005630:	4b04      	ldr	r3, [pc, #16]	; (8005644 <MX_FATFS_Init+0x28>)
 8005632:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	200000f8 	.word	0x200000f8
 8005640:	20000008 	.word	0x20000008
 8005644:	200000fc 	.word	0x200000fc

08005648 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800564c:	4b04      	ldr	r3, [pc, #16]	; (8005660 <SELECT+0x18>)
 800564e:	2200      	movs	r2, #0
 8005650:	2110      	movs	r1, #16
 8005652:	0018      	movs	r0, r3
 8005654:	f7fc f81c 	bl	8001690 <HAL_GPIO_WritePin>
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	48000800 	.word	0x48000800

08005664 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <DESELECT+0x18>)
 800566a:	2201      	movs	r2, #1
 800566c:	2110      	movs	r1, #16
 800566e:	0018      	movs	r0, r3
 8005670:	f7fc f80e 	bl	8001690 <HAL_GPIO_WritePin>
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	48000800 	.word	0x48000800

08005680 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	0002      	movs	r2, r0
 8005688:	1dfb      	adds	r3, r7, #7
 800568a:	701a      	strb	r2, [r3, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800568c:	46c0      	nop			; (mov r8, r8)
 800568e:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <SPI_TxByte+0x34>)
 8005690:	0018      	movs	r0, r3
 8005692:	f7fd f973 	bl	800297c <HAL_SPI_GetState>
 8005696:	0003      	movs	r3, r0
 8005698:	2b01      	cmp	r3, #1
 800569a:	d1f8      	bne.n	800568e <SPI_TxByte+0xe>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800569c:	23fa      	movs	r3, #250	; 0xfa
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	1df9      	adds	r1, r7, #7
 80056a2:	4804      	ldr	r0, [pc, #16]	; (80056b4 <SPI_TxByte+0x34>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	f7fc fde9 	bl	800227c <HAL_SPI_Transmit>
}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b002      	add	sp, #8
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	20000c14 	.word	0x20000c14

080056b8 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80056be:	1dfb      	adds	r3, r7, #7
 80056c0:	22ff      	movs	r2, #255	; 0xff
 80056c2:	701a      	strb	r2, [r3, #0]
  data = 0;
 80056c4:	1dbb      	adds	r3, r7, #6
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <SPI_RxByte+0x40>)
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7fd f954 	bl	800297c <HAL_SPI_GetState>
 80056d4:	0003      	movs	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d1f8      	bne.n	80056cc <SPI_RxByte+0x14>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80056da:	1dba      	adds	r2, r7, #6
 80056dc:	1df9      	adds	r1, r7, #7
 80056de:	4806      	ldr	r0, [pc, #24]	; (80056f8 <SPI_RxByte+0x40>)
 80056e0:	23fa      	movs	r3, #250	; 0xfa
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	2301      	movs	r3, #1
 80056e8:	f7fc ff32 	bl	8002550 <HAL_SPI_TransmitReceive>
  
  return data;
 80056ec:	1dbb      	adds	r3, r7, #6
 80056ee:	781b      	ldrb	r3, [r3, #0]
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b002      	add	sp, #8
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000c14 	.word	0x20000c14

080056fc <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8005704:	f7ff ffd8 	bl	80056b8 <SPI_RxByte>
 8005708:	0003      	movs	r3, r0
 800570a:	001a      	movs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	701a      	strb	r2, [r3, #0]
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}

08005718 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800571e:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <SD_ReadyWait+0x38>)
 8005720:	2232      	movs	r2, #50	; 0x32
 8005722:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8005724:	f7ff ffc8 	bl	80056b8 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8005728:	1dfc      	adds	r4, r7, #7
 800572a:	f7ff ffc5 	bl	80056b8 <SPI_RxByte>
 800572e:	0003      	movs	r3, r0
 8005730:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 8005732:	1dfb      	adds	r3, r7, #7
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2bff      	cmp	r3, #255	; 0xff
 8005738:	d004      	beq.n	8005744 <SD_ReadyWait+0x2c>
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <SD_ReadyWait+0x38>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f1      	bne.n	8005728 <SD_ReadyWait+0x10>
  
  return res;
 8005744:	1dfb      	adds	r3, r7, #7
 8005746:	781b      	ldrb	r3, [r3, #0]
}
 8005748:	0018      	movs	r0, r3
 800574a:	46bd      	mov	sp, r7
 800574c:	b003      	add	sp, #12
 800574e:	bd90      	pop	{r4, r7, pc}
 8005750:	20000eac 	.word	0x20000eac

08005754 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <SD_PowerOn+0xa0>)
 800575c:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800575e:	f7ff ff81 	bl	8005664 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	e005      	b.n	8005774 <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8005768:	20ff      	movs	r0, #255	; 0xff
 800576a:	f7ff ff89 	bl	8005680 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	3301      	adds	r3, #1
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b09      	cmp	r3, #9
 8005778:	ddf6      	ble.n	8005768 <SD_PowerOn+0x14>
  }
  
  /* SPI Chips Select */
  SELECT();
 800577a:	f7ff ff65 	bl	8005648 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	2240      	movs	r2, #64	; 0x40
 8005782:	701a      	strb	r2, [r3, #0]
  cmd_arg[1] = 0;
 8005784:	1d3b      	adds	r3, r7, #4
 8005786:	2200      	movs	r2, #0
 8005788:	705a      	strb	r2, [r3, #1]
  cmd_arg[2] = 0;
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	2200      	movs	r2, #0
 800578e:	709a      	strb	r2, [r3, #2]
  cmd_arg[3] = 0;
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	2200      	movs	r2, #0
 8005794:	70da      	strb	r2, [r3, #3]
  cmd_arg[4] = 0;
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	2200      	movs	r2, #0
 800579a:	711a      	strb	r2, [r3, #4]
  cmd_arg[5] = 0x95;
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	2295      	movs	r2, #149	; 0x95
 80057a0:	715a      	strb	r2, [r3, #5]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e009      	b.n	80057bc <SD_PowerOn+0x68>
  {
    SPI_TxByte(cmd_arg[i]);
 80057a8:	1d3a      	adds	r2, r7, #4
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	18d3      	adds	r3, r2, r3
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff ff65 	bl	8005680 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3301      	adds	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b05      	cmp	r3, #5
 80057c0:	ddf2      	ble.n	80057a8 <SD_PowerOn+0x54>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80057c2:	e002      	b.n	80057ca <SD_PowerOn+0x76>
  {
    Count--;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80057ca:	f7ff ff75 	bl	80056b8 <SPI_RxByte>
 80057ce:	0003      	movs	r3, r0
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d002      	beq.n	80057da <SD_PowerOn+0x86>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f4      	bne.n	80057c4 <SD_PowerOn+0x70>
  }
  
  DESELECT();
 80057da:	f7ff ff43 	bl	8005664 <DESELECT>
  SPI_TxByte(0XFF);
 80057de:	20ff      	movs	r0, #255	; 0xff
 80057e0:	f7ff ff4e 	bl	8005680 <SPI_TxByte>
  
  PowerFlag = 1;
 80057e4:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <SD_PowerOn+0xa4>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b006      	add	sp, #24
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	00001fff 	.word	0x00001fff
 80057f8:	200000c9 	.word	0x200000c9

080057fc <SD_PowerOff>:

/* Power off*/
static void SD_PowerOff(void) 
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8005800:	4b02      	ldr	r3, [pc, #8]	; (800580c <SD_PowerOff+0x10>)
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	200000c9 	.word	0x200000c9

08005810 <SD_CheckPower>:

/* Check power status*/
static uint8_t SD_CheckPower(void) 
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8005814:	4b02      	ldr	r3, [pc, #8]	; (8005820 <SD_CheckPower+0x10>)
 8005816:	781b      	ldrb	r3, [r3, #0]
}
 8005818:	0018      	movs	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	200000c9 	.word	0x200000c9

08005824 <SD_RxDataBlock>:

/* Receive data packet */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8005824:	b5b0      	push	{r4, r5, r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* Receive data packet */
  Timer1 = 10;
 800582e:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <SD_RxDataBlock+0x74>)
 8005830:	220a      	movs	r2, #10
 8005832:	701a      	strb	r2, [r3, #0]

  /* Waiting for a response*/		
  do 
  {    
    token = SPI_RxByte();
 8005834:	250f      	movs	r5, #15
 8005836:	197c      	adds	r4, r7, r5
 8005838:	f7ff ff3e 	bl	80056b8 <SPI_RxByte>
 800583c:	0003      	movs	r3, r0
 800583e:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8005840:	197b      	adds	r3, r7, r5
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2bff      	cmp	r3, #255	; 0xff
 8005846:	d104      	bne.n	8005852 <SD_RxDataBlock+0x2e>
 8005848:	4b13      	ldr	r3, [pc, #76]	; (8005898 <SD_RxDataBlock+0x74>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <SD_RxDataBlock+0x10>
  
  /*Error handling when receiving a token other than 0xFE*/
  if(token != 0xFE)
 8005852:	230f      	movs	r3, #15
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2bfe      	cmp	r3, #254	; 0xfe
 800585a:	d001      	beq.n	8005860 <SD_RxDataBlock+0x3c>
    return FALSE;
 800585c:	2300      	movs	r3, #0
 800585e:	e016      	b.n	800588e <SD_RxDataBlock+0x6a>
  
  /* Receive data in buffer*/
  do 
  {     
    SPI_RxBytePtr(buff++);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	607a      	str	r2, [r7, #4]
 8005866:	0018      	movs	r0, r3
 8005868:	f7ff ff48 	bl	80056fc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	0018      	movs	r0, r3
 8005874:	f7ff ff42 	bl	80056fc <SPI_RxBytePtr>
  } while(btr -= 2);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	3b02      	subs	r3, #2
 800587c:	603b      	str	r3, [r7, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1ed      	bne.n	8005860 <SD_RxDataBlock+0x3c>
  
  SPI_RxByte(); /* CRC Ignore */
 8005884:	f7ff ff18 	bl	80056b8 <SPI_RxByte>
  SPI_RxByte();
 8005888:	f7ff ff16 	bl	80056b8 <SPI_RxByte>
  
  return TRUE;
 800588c:	2301      	movs	r3, #1
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b004      	add	sp, #16
 8005894:	bdb0      	pop	{r4, r5, r7, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	20000ead 	.word	0x20000ead

0800589c <SD_TxDataBlock>:

/* Data transfer packet */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800589c:	b5b0      	push	{r4, r5, r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	000a      	movs	r2, r1
 80058a6:	1cfb      	adds	r3, r7, #3
 80058a8:	701a      	strb	r2, [r3, #0]
  uint8_t resp, wc;
  uint8_t i = 0;
 80058aa:	230d      	movs	r3, #13
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
    
  /* Waiting card ready*/
  if (SD_ReadyWait() != 0xFF)
 80058b2:	f7ff ff31 	bl	8005718 <SD_ReadyWait>
 80058b6:	0003      	movs	r3, r0
 80058b8:	2bff      	cmp	r3, #255	; 0xff
 80058ba:	d001      	beq.n	80058c0 <SD_TxDataBlock+0x24>
    return FALSE;
 80058bc:	2300      	movs	r3, #0
 80058be:	e051      	b.n	8005964 <SD_TxDataBlock+0xc8>
  
  /* Send token */
  SPI_TxByte(token);      
 80058c0:	1cfb      	adds	r3, r7, #3
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7ff fedb 	bl	8005680 <SPI_TxByte>
  
  /* If it is a data token */
  if (token != 0xFD) 
 80058ca:	1cfb      	adds	r3, r7, #3
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2bfd      	cmp	r3, #253	; 0xfd
 80058d0:	d03e      	beq.n	8005950 <SD_TxDataBlock+0xb4>
  { 
    wc = 0;
 80058d2:	230e      	movs	r3, #14
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
    
    /* 512 byte data transfer */
    do 
    { 
      SPI_TxByte(*buff++);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7ff fecc 	bl	8005680 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7ff fec5 	bl	8005680 <SPI_TxByte>
    } while (--wc);
 80058f6:	210e      	movs	r1, #14
 80058f8:	187b      	adds	r3, r7, r1
 80058fa:	187a      	adds	r2, r7, r1
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	3a01      	subs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	187b      	adds	r3, r7, r1
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e7      	bne.n	80058da <SD_TxDataBlock+0x3e>
    
    SPI_RxByte();       /* CRC Ignore */
 800590a:	f7ff fed5 	bl	80056b8 <SPI_RxByte>
    SPI_RxByte();
 800590e:	f7ff fed3 	bl	80056b8 <SPI_RxByte>
    
    /* Receive a date response */        
    while (i <= 64) 
 8005912:	e011      	b.n	8005938 <SD_TxDataBlock+0x9c>
    {			
      resp = SPI_RxByte();
 8005914:	250f      	movs	r5, #15
 8005916:	197c      	adds	r4, r7, r5
 8005918:	f7ff fece 	bl	80056b8 <SPI_RxByte>
 800591c:	0003      	movs	r3, r0
 800591e:	7023      	strb	r3, [r4, #0]
      
      /* Error response processing*/
      if ((resp & 0x1F) == 0x05) 
 8005920:	197b      	adds	r3, r7, r5
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	221f      	movs	r2, #31
 8005926:	4013      	ands	r3, r2
 8005928:	2b05      	cmp	r3, #5
 800592a:	d00b      	beq.n	8005944 <SD_TxDataBlock+0xa8>
        break;
      
      i++;
 800592c:	210d      	movs	r1, #13
 800592e:	187b      	adds	r3, r7, r1
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	187b      	adds	r3, r7, r1
 8005934:	3201      	adds	r2, #1
 8005936:	701a      	strb	r2, [r3, #0]
    while (i <= 64) 
 8005938:	230d      	movs	r3, #13
 800593a:	18fb      	adds	r3, r7, r3
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d9e8      	bls.n	8005914 <SD_TxDataBlock+0x78>
 8005942:	e000      	b.n	8005946 <SD_TxDataBlock+0xaa>
        break;
 8005944:	46c0      	nop			; (mov r8, r8)
    }
    
    /* SPI Receive Buffer Clear */
    while (SPI_RxByte() == 0);
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	f7ff feb6 	bl	80056b8 <SPI_RxByte>
 800594c:	1e03      	subs	r3, r0, #0
 800594e:	d0fb      	beq.n	8005948 <SD_TxDataBlock+0xac>
  }
  
  if ((resp & 0x1F) == 0x05)
 8005950:	230f      	movs	r3, #15
 8005952:	18fb      	adds	r3, r7, r3
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	221f      	movs	r2, #31
 8005958:	4013      	ands	r3, r2
 800595a:	2b05      	cmp	r3, #5
 800595c:	d101      	bne.n	8005962 <SD_TxDataBlock+0xc6>
    return TRUE;
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <SD_TxDataBlock+0xc8>
  else
    return FALSE;
 8005962:	2300      	movs	r3, #0
}
 8005964:	0018      	movs	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	b004      	add	sp, #16
 800596a:	bdb0      	pop	{r4, r5, r7, pc}

0800596c <SD_SendCmd>:
#endif /* _READONLY */

/* Send CMD Packet */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800596c:	b5b0      	push	{r4, r5, r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	0002      	movs	r2, r0
 8005974:	6039      	str	r1, [r7, #0]
 8005976:	1dfb      	adds	r3, r7, #7
 8005978:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  
  /* SD card standby */
  if (SD_ReadyWait() != 0xFF)
 800597a:	f7ff fecd 	bl	8005718 <SD_ReadyWait>
 800597e:	0003      	movs	r3, r0
 8005980:	2bff      	cmp	r3, #255	; 0xff
 8005982:	d001      	beq.n	8005988 <SD_SendCmd+0x1c>
    return 0xFF;
 8005984:	23ff      	movs	r3, #255	; 0xff
 8005986:	e057      	b.n	8005a38 <SD_SendCmd+0xcc>
  
  /* Send command packet*/
  SPI_TxByte(cmd); 			/* Command */
 8005988:	1dfb      	adds	r3, r7, #7
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	0018      	movs	r0, r3
 800598e:	f7ff fe77 	bl	8005680 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	0e1b      	lsrs	r3, r3, #24
 8005996:	b2db      	uxtb	r3, r3
 8005998:	0018      	movs	r0, r3
 800599a:	f7ff fe71 	bl	8005680 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7ff fe6b 	bl	8005680 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	0018      	movs	r0, r3
 80059b2:	f7ff fe65 	bl	8005680 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	0018      	movs	r0, r3
 80059bc:	f7ff fe60 	bl	8005680 <SPI_TxByte>
  
  /* CRC Preparation by Command */
  crc = 0;  
 80059c0:	230f      	movs	r3, #15
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD0)
 80059c8:	1dfb      	adds	r3, r7, #7
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d103      	bne.n	80059d8 <SD_SendCmd+0x6c>
    crc = 0x95; /* CRC for CMD0(0) */
 80059d0:	230f      	movs	r3, #15
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	2295      	movs	r2, #149	; 0x95
 80059d6:	701a      	strb	r2, [r3, #0]
  
  if (cmd == CMD8)
 80059d8:	1dfb      	adds	r3, r7, #7
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b48      	cmp	r3, #72	; 0x48
 80059de:	d103      	bne.n	80059e8 <SD_SendCmd+0x7c>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80059e0:	230f      	movs	r3, #15
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	2287      	movs	r2, #135	; 0x87
 80059e6:	701a      	strb	r2, [r3, #0]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80059e8:	230f      	movs	r3, #15
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7ff fe46 	bl	8005680 <SPI_TxByte>
  
  /* In case of CMD12 Stop Reading command, one response byte is discarded. */
  if (cmd == CMD12)
 80059f4:	1dfb      	adds	r3, r7, #7
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b4c      	cmp	r3, #76	; 0x4c
 80059fa:	d101      	bne.n	8005a00 <SD_SendCmd+0x94>
    SPI_RxByte();
 80059fc:	f7ff fe5c 	bl	80056b8 <SPI_RxByte>
  
  /* Receive normal data within 10 times. */
  uint8_t n = 10; 
 8005a00:	230e      	movs	r3, #14
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	220a      	movs	r2, #10
 8005a06:	701a      	strb	r2, [r3, #0]
  do
  {
    res = SPI_RxByte();
 8005a08:	250d      	movs	r5, #13
 8005a0a:	197c      	adds	r4, r7, r5
 8005a0c:	f7ff fe54 	bl	80056b8 <SPI_RxByte>
 8005a10:	0003      	movs	r3, r0
 8005a12:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 8005a14:	197b      	adds	r3, r7, r5
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	b25b      	sxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	da09      	bge.n	8005a32 <SD_SendCmd+0xc6>
 8005a1e:	210e      	movs	r1, #14
 8005a20:	187b      	adds	r3, r7, r1
 8005a22:	187a      	adds	r2, r7, r1
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	3a01      	subs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	187b      	adds	r3, r7, r1
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1ea      	bne.n	8005a08 <SD_SendCmd+0x9c>
  
  return res;
 8005a32:	230d      	movs	r3, #13
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	781b      	ldrb	r3, [r3, #0]
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b004      	add	sp, #16
 8005a3e:	bdb0      	pop	{r4, r5, r7, pc}

08005a40 <SD_disk_initialize>:
Used in the user_diskio.c file.
-----------------------------------------------------------------------*/

/* SD card initialization */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8005a40:	b5b0      	push	{r4, r5, r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	0002      	movs	r2, r0
 8005a48:	1dfb      	adds	r3, r7, #7
 8005a4a:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  
  /* Only one drive supported */
  if(drv)
 8005a4c:	1dfb      	adds	r3, r7, #7
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <SD_disk_initialize+0x18>
    return STA_NOINIT;  
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0f6      	b.n	8005c46 <SD_disk_initialize+0x206>
  
  /* SD card not inserted */
  if(Stat & STA_NODISK)
 8005a58:	4b7d      	ldr	r3, [pc, #500]	; (8005c50 <SD_disk_initialize+0x210>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	001a      	movs	r2, r3
 8005a60:	2302      	movs	r3, #2
 8005a62:	4013      	ands	r3, r2
 8005a64:	d003      	beq.n	8005a6e <SD_disk_initialize+0x2e>
    return Stat;        
 8005a66:	4b7a      	ldr	r3, [pc, #488]	; (8005c50 <SD_disk_initialize+0x210>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	e0eb      	b.n	8005c46 <SD_disk_initialize+0x206>
  
  /* SD Card Power On*/
  SD_PowerOn();         
 8005a6e:	f7ff fe71 	bl	8005754 <SD_PowerOn>
  
  /*Chip Select for SPI Communication */
  SELECT();             
 8005a72:	f7ff fde9 	bl	8005648 <SELECT>
  
  /* SD card type variable initialization */
  type = 0;
 8005a76:	230e      	movs	r3, #14
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
  
  /* Enter Idle state */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8005a7e:	2100      	movs	r1, #0
 8005a80:	2040      	movs	r0, #64	; 0x40
 8005a82:	f7ff ff73 	bl	800596c <SD_SendCmd>
 8005a86:	0003      	movs	r3, r0
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d000      	beq.n	8005a8e <SD_disk_initialize+0x4e>
 8005a8c:	e0c0      	b.n	8005c10 <SD_disk_initialize+0x1d0>
  { 
    /* Set timer 1 second */
    Timer1 = 100;
 8005a8e:	4b71      	ldr	r3, [pc, #452]	; (8005c54 <SD_disk_initialize+0x214>)
 8005a90:	2264      	movs	r2, #100	; 0x64
 8005a92:	701a      	strb	r2, [r3, #0]
    
    /*Check the SD interface operating condition */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8005a94:	23d5      	movs	r3, #213	; 0xd5
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	0019      	movs	r1, r3
 8005a9a:	2048      	movs	r0, #72	; 0x48
 8005a9c:	f7ff ff66 	bl	800596c <SD_SendCmd>
 8005aa0:	0003      	movs	r3, r0
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d000      	beq.n	8005aa8 <SD_disk_initialize+0x68>
 8005aa6:	e06e      	b.n	8005b86 <SD_disk_initialize+0x146>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8005aa8:	230f      	movs	r3, #15
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e00e      	b.n	8005ad0 <SD_disk_initialize+0x90>
      {
        ocr[n] = SPI_RxByte();
 8005ab2:	250f      	movs	r5, #15
 8005ab4:	197b      	adds	r3, r7, r5
 8005ab6:	781c      	ldrb	r4, [r3, #0]
 8005ab8:	f7ff fdfe 	bl	80056b8 <SPI_RxByte>
 8005abc:	0003      	movs	r3, r0
 8005abe:	001a      	movs	r2, r3
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 8005ac6:	197b      	adds	r3, r7, r5
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	197b      	adds	r3, r7, r5
 8005acc:	3201      	adds	r2, #1
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	230f      	movs	r3, #15
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d9eb      	bls.n	8005ab2 <SD_disk_initialize+0x72>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8005ada:	2308      	movs	r3, #8
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	789b      	ldrb	r3, [r3, #2]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d000      	beq.n	8005ae6 <SD_disk_initialize+0xa6>
 8005ae4:	e094      	b.n	8005c10 <SD_disk_initialize+0x1d0>
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	78db      	ldrb	r3, [r3, #3]
 8005aec:	2baa      	cmp	r3, #170	; 0xaa
 8005aee:	d000      	beq.n	8005af2 <SD_disk_initialize+0xb2>
 8005af0:	e08e      	b.n	8005c10 <SD_disk_initialize+0x1d0>
      { 
        /* 2.7-3.6V voltage range operation */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8005af2:	2100      	movs	r1, #0
 8005af4:	2077      	movs	r0, #119	; 0x77
 8005af6:	f7ff ff39 	bl	800596c <SD_SendCmd>
 8005afa:	0003      	movs	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d807      	bhi.n	8005b10 <SD_disk_initialize+0xd0>
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	05db      	lsls	r3, r3, #23
 8005b04:	0019      	movs	r1, r3
 8005b06:	2069      	movs	r0, #105	; 0x69
 8005b08:	f7ff ff30 	bl	800596c <SD_SendCmd>
 8005b0c:	1e03      	subs	r3, r0, #0
 8005b0e:	d005      	beq.n	8005b1c <SD_disk_initialize+0xdc>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8005b10:	4b50      	ldr	r3, [pc, #320]	; (8005c54 <SD_disk_initialize+0x214>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1eb      	bne.n	8005af2 <SD_disk_initialize+0xb2>
 8005b1a:	e000      	b.n	8005b1e <SD_disk_initialize+0xde>
            break; /* ACMD41 with HCS bit */
 8005b1c:	46c0      	nop			; (mov r8, r8)
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8005b1e:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <SD_disk_initialize+0x214>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d100      	bne.n	8005b2a <SD_disk_initialize+0xea>
 8005b28:	e072      	b.n	8005c10 <SD_disk_initialize+0x1d0>
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	207a      	movs	r0, #122	; 0x7a
 8005b2e:	f7ff ff1d 	bl	800596c <SD_SendCmd>
 8005b32:	1e03      	subs	r3, r0, #0
 8005b34:	d000      	beq.n	8005b38 <SD_disk_initialize+0xf8>
 8005b36:	e06b      	b.n	8005c10 <SD_disk_initialize+0x1d0>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8005b38:	230f      	movs	r3, #15
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e00e      	b.n	8005b60 <SD_disk_initialize+0x120>
          {
            ocr[n] = SPI_RxByte();
 8005b42:	250f      	movs	r5, #15
 8005b44:	197b      	adds	r3, r7, r5
 8005b46:	781c      	ldrb	r4, [r3, #0]
 8005b48:	f7ff fdb6 	bl	80056b8 <SPI_RxByte>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	001a      	movs	r2, r3
 8005b50:	2308      	movs	r3, #8
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 8005b56:	197b      	adds	r3, r7, r5
 8005b58:	781a      	ldrb	r2, [r3, #0]
 8005b5a:	197b      	adds	r3, r7, r5
 8005b5c:	3201      	adds	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	230f      	movs	r3, #15
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d9eb      	bls.n	8005b42 <SD_disk_initialize+0x102>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	001a      	movs	r2, r3
 8005b72:	2340      	movs	r3, #64	; 0x40
 8005b74:	4013      	ands	r3, r2
 8005b76:	d001      	beq.n	8005b7c <SD_disk_initialize+0x13c>
 8005b78:	2206      	movs	r2, #6
 8005b7a:	e000      	b.n	8005b7e <SD_disk_initialize+0x13e>
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	230e      	movs	r3, #14
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	e044      	b.n	8005c10 <SD_disk_initialize+0x1d0>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8005b86:	2100      	movs	r1, #0
 8005b88:	2077      	movs	r0, #119	; 0x77
 8005b8a:	f7ff feef 	bl	800596c <SD_SendCmd>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d808      	bhi.n	8005ba6 <SD_disk_initialize+0x166>
 8005b94:	2100      	movs	r1, #0
 8005b96:	2069      	movs	r0, #105	; 0x69
 8005b98:	f7ff fee8 	bl	800596c <SD_SendCmd>
 8005b9c:	0003      	movs	r3, r0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d801      	bhi.n	8005ba6 <SD_disk_initialize+0x166>
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	e000      	b.n	8005ba8 <SD_disk_initialize+0x168>
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	230e      	movs	r3, #14
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	701a      	strb	r2, [r3, #0]
      
      do {
        if (type == 2) 
 8005bae:	230e      	movs	r3, #14
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d10d      	bne.n	8005bd4 <SD_disk_initialize+0x194>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8005bb8:	2100      	movs	r1, #0
 8005bba:	2077      	movs	r0, #119	; 0x77
 8005bbc:	f7ff fed6 	bl	800596c <SD_SendCmd>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d80c      	bhi.n	8005be0 <SD_disk_initialize+0x1a0>
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	2069      	movs	r0, #105	; 0x69
 8005bca:	f7ff fecf 	bl	800596c <SD_SendCmd>
 8005bce:	1e03      	subs	r3, r0, #0
 8005bd0:	d106      	bne.n	8005be0 <SD_disk_initialize+0x1a0>
            break; /* ACMD41 */
 8005bd2:	e00c      	b.n	8005bee <SD_disk_initialize+0x1ae>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	2041      	movs	r0, #65	; 0x41
 8005bd8:	f7ff fec8 	bl	800596c <SD_SendCmd>
 8005bdc:	1e03      	subs	r3, r0, #0
 8005bde:	d005      	beq.n	8005bec <SD_disk_initialize+0x1ac>
            break; /* CMD1 */
        }
      } while (Timer1);
 8005be0:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <SD_disk_initialize+0x214>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e1      	bne.n	8005bae <SD_disk_initialize+0x16e>
 8005bea:	e000      	b.n	8005bee <SD_disk_initialize+0x1ae>
            break; /* CMD1 */
 8005bec:	46c0      	nop			; (mov r8, r8)
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8005bee:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <SD_disk_initialize+0x214>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d007      	beq.n	8005c08 <SD_disk_initialize+0x1c8>
 8005bf8:	2380      	movs	r3, #128	; 0x80
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	2050      	movs	r0, #80	; 0x50
 8005c00:	f7ff feb4 	bl	800596c <SD_SendCmd>
 8005c04:	1e03      	subs	r3, r0, #0
 8005c06:	d003      	beq.n	8005c10 <SD_disk_initialize+0x1d0>
      {
        /* Select block length */
        type = 0;
 8005c08:	230e      	movs	r3, #14
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  
  CardType = type;
 8005c10:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <SD_disk_initialize+0x218>)
 8005c12:	240e      	movs	r4, #14
 8005c14:	193a      	adds	r2, r7, r4
 8005c16:	7812      	ldrb	r2, [r2, #0]
 8005c18:	701a      	strb	r2, [r3, #0]
  
  DESELECT();
 8005c1a:	f7ff fd23 	bl	8005664 <DESELECT>
  
  SPI_RxByte(); /* Idle State Transition (Release DO) */
 8005c1e:	f7ff fd4b 	bl	80056b8 <SPI_RxByte>
  
  if (type) 
 8005c22:	193b      	adds	r3, r7, r4
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <SD_disk_initialize+0x1fc>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8005c2a:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <SD_disk_initialize+0x210>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2201      	movs	r2, #1
 8005c32:	4393      	bics	r3, r2
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <SD_disk_initialize+0x210>)
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	e001      	b.n	8005c40 <SD_disk_initialize+0x200>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8005c3c:	f7ff fdde 	bl	80057fc <SD_PowerOff>
  }
  
  return Stat;
 8005c40:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <SD_disk_initialize+0x210>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	b2db      	uxtb	r3, r3
}
 8005c46:	0018      	movs	r0, r3
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b004      	add	sp, #16
 8005c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	20000000 	.word	0x20000000
 8005c54:	20000ead 	.word	0x20000ead
 8005c58:	200000c8 	.word	0x200000c8

08005c5c <SD_disk_status>:

/* Check disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	0002      	movs	r2, r0
 8005c64:	1dfb      	adds	r3, r7, #7
 8005c66:	701a      	strb	r2, [r3, #0]
  if (drv)
 8005c68:	1dfb      	adds	r3, r7, #7
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <SD_disk_status+0x18>
    return STA_NOINIT; 
 8005c70:	2301      	movs	r3, #1
 8005c72:	e002      	b.n	8005c7a <SD_disk_status+0x1e>
  
  return Stat;
 8005c74:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <SD_disk_status+0x28>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b2db      	uxtb	r3, r3
}
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b002      	add	sp, #8
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	20000000 	.word	0x20000000

08005c88 <SD_disk_read>:

/* Sector read */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	210f      	movs	r1, #15
 8005c96:	187b      	adds	r3, r7, r1
 8005c98:	1c02      	adds	r2, r0, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 8005c9c:	187b      	adds	r3, r7, r1
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <SD_disk_read+0x22>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <SD_disk_read+0x26>
    return RES_PARERR;
 8005caa:	2304      	movs	r3, #4
 8005cac:	e053      	b.n	8005d56 <SD_disk_read+0xce>
  
  if (Stat & STA_NOINIT)
 8005cae:	4b2c      	ldr	r3, [pc, #176]	; (8005d60 <SD_disk_read+0xd8>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	001a      	movs	r2, r3
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d001      	beq.n	8005cc0 <SD_disk_read+0x38>
    return RES_NOTRDY;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e04a      	b.n	8005d56 <SD_disk_read+0xce>
  
  if (!(CardType & 4))
 8005cc0:	4b28      	ldr	r3, [pc, #160]	; (8005d64 <SD_disk_read+0xdc>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	001a      	movs	r2, r3
 8005cc6:	2304      	movs	r3, #4
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d102      	bne.n	8005cd2 <SD_disk_read+0x4a>
    sector *= 512;      /* Change the designated sector to byte addressing unit */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	025b      	lsls	r3, r3, #9
 8005cd0:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8005cd2:	f7ff fcb9 	bl	8005648 <SELECT>
  
  if (count == 1) 
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d112      	bne.n	8005d02 <SD_disk_read+0x7a>
  { 
    /* Single block read */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	0019      	movs	r1, r3
 8005ce0:	2051      	movs	r0, #81	; 0x51
 8005ce2:	f7ff fe43 	bl	800596c <SD_SendCmd>
 8005ce6:	1e03      	subs	r3, r0, #0
 8005ce8:	d12d      	bne.n	8005d46 <SD_disk_read+0xbe>
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	009a      	lsls	r2, r3, #2
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	0011      	movs	r1, r2
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f7ff fd96 	bl	8005824 <SD_RxDataBlock>
 8005cf8:	1e03      	subs	r3, r0, #0
 8005cfa:	d024      	beq.n	8005d46 <SD_disk_read+0xbe>
      count = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	e021      	b.n	8005d46 <SD_disk_read+0xbe>
  } 
  else 
  { 
    /*Multi block read */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	0019      	movs	r1, r3
 8005d06:	2052      	movs	r0, #82	; 0x52
 8005d08:	f7ff fe30 	bl	800596c <SD_SendCmd>
 8005d0c:	1e03      	subs	r3, r0, #0
 8005d0e:	d11a      	bne.n	8005d46 <SD_disk_read+0xbe>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8005d10:	2380      	movs	r3, #128	; 0x80
 8005d12:	009a      	lsls	r2, r3, #2
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	0011      	movs	r1, r2
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7ff fd83 	bl	8005824 <SD_RxDataBlock>
 8005d1e:	1e03      	subs	r3, r0, #0
 8005d20:	d00c      	beq.n	8005d3c <SD_disk_read+0xb4>
          break;
        
        buff += 512;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2280      	movs	r2, #128	; 0x80
 8005d26:	0092      	lsls	r2, r2, #2
 8005d28:	4694      	mov	ip, r2
 8005d2a:	4463      	add	r3, ip
 8005d2c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1ea      	bne.n	8005d10 <SD_disk_read+0x88>
 8005d3a:	e000      	b.n	8005d3e <SD_disk_read+0xb6>
          break;
 8005d3c:	46c0      	nop			; (mov r8, r8)
      
      /* STOP_TRANSMISSION, read all blocks, then stop sending */
      SD_SendCmd(CMD12, 0); 
 8005d3e:	2100      	movs	r1, #0
 8005d40:	204c      	movs	r0, #76	; 0x4c
 8005d42:	f7ff fe13 	bl	800596c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8005d46:	f7ff fc8d 	bl	8005664 <DESELECT>
  SPI_RxByte(); /* Idle State (Release DO) */
 8005d4a:	f7ff fcb5 	bl	80056b8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	1e5a      	subs	r2, r3, #1
 8005d52:	4193      	sbcs	r3, r2
 8005d54:	b2db      	uxtb	r3, r3
}
 8005d56:	0018      	movs	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b004      	add	sp, #16
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	20000000 	.word	0x20000000
 8005d64:	200000c8 	.word	0x200000c8

08005d68 <SD_disk_write>:

/* Sector write */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	210f      	movs	r1, #15
 8005d76:	187b      	adds	r3, r7, r1
 8005d78:	1c02      	adds	r2, r0, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 8005d7c:	187b      	adds	r3, r7, r1
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <SD_disk_write+0x22>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <SD_disk_write+0x26>
    return RES_PARERR;
 8005d8a:	2304      	movs	r3, #4
 8005d8c:	e06b      	b.n	8005e66 <SD_disk_write+0xfe>
  
  if (Stat & STA_NOINIT)
 8005d8e:	4b38      	ldr	r3, [pc, #224]	; (8005e70 <SD_disk_write+0x108>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	001a      	movs	r2, r3
 8005d96:	2301      	movs	r3, #1
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d001      	beq.n	8005da0 <SD_disk_write+0x38>
    return RES_NOTRDY;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e062      	b.n	8005e66 <SD_disk_write+0xfe>
  
  if (Stat & STA_PROTECT)
 8005da0:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <SD_disk_write+0x108>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	001a      	movs	r2, r3
 8005da8:	2304      	movs	r3, #4
 8005daa:	4013      	ands	r3, r2
 8005dac:	d001      	beq.n	8005db2 <SD_disk_write+0x4a>
    return RES_WRPRT;
 8005dae:	2302      	movs	r3, #2
 8005db0:	e059      	b.n	8005e66 <SD_disk_write+0xfe>
  
  if (!(CardType & 4))
 8005db2:	4b30      	ldr	r3, [pc, #192]	; (8005e74 <SD_disk_write+0x10c>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	001a      	movs	r2, r3
 8005db8:	2304      	movs	r3, #4
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d102      	bne.n	8005dc4 <SD_disk_write+0x5c>
    sector *= 512; /* Change the designated sector to byte addressing unit */
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	025b      	lsls	r3, r3, #9
 8005dc2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8005dc4:	f7ff fc40 	bl	8005648 <SELECT>
  
  if (count == 1) 
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d110      	bne.n	8005df0 <SD_disk_write+0x88>
  { 
    /* Single block write */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	0019      	movs	r1, r3
 8005dd2:	2058      	movs	r0, #88	; 0x58
 8005dd4:	f7ff fdca 	bl	800596c <SD_SendCmd>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d13c      	bne.n	8005e56 <SD_disk_write+0xee>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	21fe      	movs	r1, #254	; 0xfe
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff fd5b 	bl	800589c <SD_TxDataBlock>
 8005de6:	1e03      	subs	r3, r0, #0
 8005de8:	d035      	beq.n	8005e56 <SD_disk_write+0xee>
      count = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	e032      	b.n	8005e56 <SD_disk_write+0xee>
  } 
  else 
  { 
    /* Multi block write */
    if (CardType & 2) 
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <SD_disk_write+0x10c>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	001a      	movs	r2, r3
 8005df6:	2302      	movs	r3, #2
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d008      	beq.n	8005e0e <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2077      	movs	r0, #119	; 0x77
 8005e00:	f7ff fdb4 	bl	800596c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	0019      	movs	r1, r3
 8005e08:	2057      	movs	r0, #87	; 0x57
 8005e0a:	f7ff fdaf 	bl	800596c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	0019      	movs	r1, r3
 8005e12:	2059      	movs	r0, #89	; 0x59
 8005e14:	f7ff fdaa 	bl	800596c <SD_SendCmd>
 8005e18:	1e03      	subs	r3, r0, #0
 8005e1a:	d11c      	bne.n	8005e56 <SD_disk_write+0xee>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	21fc      	movs	r1, #252	; 0xfc
 8005e20:	0018      	movs	r0, r3
 8005e22:	f7ff fd3b 	bl	800589c <SD_TxDataBlock>
 8005e26:	1e03      	subs	r3, r0, #0
 8005e28:	d00c      	beq.n	8005e44 <SD_disk_write+0xdc>
          break;
        
        buff += 512;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2280      	movs	r2, #128	; 0x80
 8005e2e:	0092      	lsls	r2, r2, #2
 8005e30:	4694      	mov	ip, r2
 8005e32:	4463      	add	r3, ip
 8005e34:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1ec      	bne.n	8005e1c <SD_disk_write+0xb4>
 8005e42:	e000      	b.n	8005e46 <SD_disk_write+0xde>
          break;
 8005e44:	46c0      	nop			; (mov r8, r8)
      
      if(!SD_TxDataBlock(0, 0xFD))
 8005e46:	21fd      	movs	r1, #253	; 0xfd
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f7ff fd27 	bl	800589c <SD_TxDataBlock>
 8005e4e:	1e03      	subs	r3, r0, #0
 8005e50:	d101      	bne.n	8005e56 <SD_disk_write+0xee>
      {        
        count = 1;
 8005e52:	2301      	movs	r3, #1
 8005e54:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8005e56:	f7ff fc05 	bl	8005664 <DESELECT>
  SPI_RxByte();
 8005e5a:	f7ff fc2d 	bl	80056b8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	1e5a      	subs	r2, r3, #1
 8005e62:	4193      	sbcs	r3, r2
 8005e64:	b2db      	uxtb	r3, r3
}
 8005e66:	0018      	movs	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b004      	add	sp, #16
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	20000000 	.word	0x20000000
 8005e74:	200000c8 	.word	0x200000c8

08005e78 <SD_disk_ioctl>:
#endif /* _READONLY */

/* Other functions */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b08b      	sub	sp, #44	; 0x2c
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	603a      	str	r2, [r7, #0]
 8005e80:	1dfb      	adds	r3, r7, #7
 8005e82:	1c02      	adds	r2, r0, #0
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	1dbb      	adds	r3, r7, #6
 8005e88:	1c0a      	adds	r2, r1, #0
 8005e8a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8005e90:	1dfb      	adds	r3, r7, #7
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <SD_disk_ioctl+0x24>
    return RES_PARERR;
 8005e98:	2304      	movs	r3, #4
 8005e9a:	e11d      	b.n	80060d8 <SD_disk_ioctl+0x260>
  
  res = RES_ERROR;
 8005e9c:	2327      	movs	r3, #39	; 0x27
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
  
  if (ctrl == CTRL_POWER) 
 8005ea4:	1dbb      	adds	r3, r7, #6
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d129      	bne.n	8005f00 <SD_disk_ioctl+0x88>
  {
    switch (*ptr) 
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d00e      	beq.n	8005ed2 <SD_disk_ioctl+0x5a>
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d013      	beq.n	8005ee0 <SD_disk_ioctl+0x68>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d11c      	bne.n	8005ef6 <SD_disk_ioctl+0x7e>
    {
    case 0:
      if (SD_CheckPower())
 8005ebc:	f7ff fca8 	bl	8005810 <SD_CheckPower>
 8005ec0:	1e03      	subs	r3, r0, #0
 8005ec2:	d001      	beq.n	8005ec8 <SD_disk_ioctl+0x50>
        SD_PowerOff();          /* Power Off */
 8005ec4:	f7ff fc9a 	bl	80057fc <SD_PowerOff>
      res = RES_OK;
 8005ec8:	2327      	movs	r3, #39	; 0x27
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
      break;
 8005ed0:	e0ff      	b.n	80060d2 <SD_disk_ioctl+0x25a>
    case 1:
      SD_PowerOn();             /* Power On */
 8005ed2:	f7ff fc3f 	bl	8005754 <SD_PowerOn>
      res = RES_OK;
 8005ed6:	2327      	movs	r3, #39	; 0x27
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
      break;
 8005ede:	e0f8      	b.n	80060d2 <SD_disk_ioctl+0x25a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	1c5c      	adds	r4, r3, #1
 8005ee4:	f7ff fc94 	bl	8005810 <SD_CheckPower>
 8005ee8:	0003      	movs	r3, r0
 8005eea:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8005eec:	2327      	movs	r3, #39	; 0x27
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
      break;
 8005ef4:	e0ed      	b.n	80060d2 <SD_disk_ioctl+0x25a>
    default:
      res = RES_PARERR;
 8005ef6:	2327      	movs	r3, #39	; 0x27
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	2204      	movs	r2, #4
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	e0e8      	b.n	80060d2 <SD_disk_ioctl+0x25a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8005f00:	4b77      	ldr	r3, [pc, #476]	; (80060e0 <SD_disk_ioctl+0x268>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	001a      	movs	r2, r3
 8005f08:	2301      	movs	r3, #1
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d001      	beq.n	8005f12 <SD_disk_ioctl+0x9a>
      return RES_NOTRDY;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e0e2      	b.n	80060d8 <SD_disk_ioctl+0x260>
    
    SELECT();
 8005f12:	f7ff fb99 	bl	8005648 <SELECT>
    
    switch (ctrl) 
 8005f16:	1dbb      	adds	r3, r7, #6
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b0d      	cmp	r3, #13
 8005f1c:	d900      	bls.n	8005f20 <SD_disk_ioctl+0xa8>
 8005f1e:	e0c8      	b.n	80060b2 <SD_disk_ioctl+0x23a>
 8005f20:	009a      	lsls	r2, r3, #2
 8005f22:	4b70      	ldr	r3, [pc, #448]	; (80060e4 <SD_disk_ioctl+0x26c>)
 8005f24:	18d3      	adds	r3, r2, r3
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT: 
      /* Number of Sectors in D Card (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	2049      	movs	r0, #73	; 0x49
 8005f2e:	f7ff fd1d 	bl	800596c <SD_SendCmd>
 8005f32:	1e03      	subs	r3, r0, #0
 8005f34:	d000      	beq.n	8005f38 <SD_disk_ioctl+0xc0>
 8005f36:	e0c1      	b.n	80060bc <SD_disk_ioctl+0x244>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	2110      	movs	r1, #16
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f7ff fc70 	bl	8005824 <SD_RxDataBlock>
 8005f44:	1e03      	subs	r3, r0, #0
 8005f46:	d100      	bne.n	8005f4a <SD_disk_ioctl+0xd2>
 8005f48:	e0b8      	b.n	80060bc <SD_disk_ioctl+0x244>
      {
        if ((csd[0] >> 6) == 1) 
 8005f4a:	230c      	movs	r3, #12
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	099b      	lsrs	r3, r3, #6
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d114      	bne.n	8005f82 <SD_disk_ioctl+0x10a>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8005f58:	210c      	movs	r1, #12
 8005f5a:	187b      	adds	r3, r7, r1
 8005f5c:	7a5b      	ldrb	r3, [r3, #9]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	187b      	adds	r3, r7, r1
 8005f62:	7a1b      	ldrb	r3, [r3, #8]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	18d3      	adds	r3, r2, r3
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	211e      	movs	r1, #30
 8005f70:	187b      	adds	r3, r7, r1
 8005f72:	3201      	adds	r2, #1
 8005f74:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	029a      	lsls	r2, r3, #10
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	e03a      	b.n	8005ff8 <SD_disk_ioctl+0x180>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005f82:	200c      	movs	r0, #12
 8005f84:	183b      	adds	r3, r7, r0
 8005f86:	795b      	ldrb	r3, [r3, #5]
 8005f88:	220f      	movs	r2, #15
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	183b      	adds	r3, r7, r0
 8005f90:	7a9b      	ldrb	r3, [r3, #10]
 8005f92:	09db      	lsrs	r3, r3, #7
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	18d3      	adds	r3, r2, r3
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	183b      	adds	r3, r7, r0
 8005f9c:	7a5b      	ldrb	r3, [r3, #9]
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2106      	movs	r1, #6
 8005fa4:	400b      	ands	r3, r1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	18d3      	adds	r3, r2, r3
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	2426      	movs	r4, #38	; 0x26
 8005fae:	193b      	adds	r3, r7, r4
 8005fb0:	3202      	adds	r2, #2
 8005fb2:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005fb4:	183b      	adds	r3, r7, r0
 8005fb6:	7a1b      	ldrb	r3, [r3, #8]
 8005fb8:	099b      	lsrs	r3, r3, #6
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	183b      	adds	r3, r7, r0
 8005fc0:	79db      	ldrb	r3, [r3, #7]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	18d3      	adds	r3, r2, r3
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	183b      	adds	r3, r7, r0
 8005fce:	799b      	ldrb	r3, [r3, #6]
 8005fd0:	029b      	lsls	r3, r3, #10
 8005fd2:	b299      	uxth	r1, r3
 8005fd4:	23c0      	movs	r3, #192	; 0xc0
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	400b      	ands	r3, r1
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	18d3      	adds	r3, r2, r3
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	211e      	movs	r1, #30
 8005fe2:	187b      	adds	r3, r7, r1
 8005fe4:	3201      	adds	r2, #1
 8005fe6:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8005fe8:	187b      	adds	r3, r7, r1
 8005fea:	881a      	ldrh	r2, [r3, #0]
 8005fec:	193b      	adds	r3, r7, r4
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	3b09      	subs	r3, #9
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8005ff8:	2327      	movs	r3, #39	; 0x27
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006000:	e05c      	b.n	80060bc <SD_disk_ioctl+0x244>
      
    case GET_SECTOR_SIZE: 
      /* Unit size of sector (WORD) */
      *(WORD*) buff = 512;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2280      	movs	r2, #128	; 0x80
 8006006:	0092      	lsls	r2, r2, #2
 8006008:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800600a:	2327      	movs	r3, #39	; 0x27
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	2200      	movs	r2, #0
 8006010:	701a      	strb	r2, [r3, #0]
      break;
 8006012:	e05a      	b.n	80060ca <SD_disk_ioctl+0x252>
      
    case CTRL_SYNC: 
      /* Write synchronization */
      if (SD_ReadyWait() == 0xFF)
 8006014:	f7ff fb80 	bl	8005718 <SD_ReadyWait>
 8006018:	0003      	movs	r3, r0
 800601a:	2bff      	cmp	r3, #255	; 0xff
 800601c:	d150      	bne.n	80060c0 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800601e:	2327      	movs	r3, #39	; 0x27
 8006020:	18fb      	adds	r3, r7, r3
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
      break;
 8006026:	e04b      	b.n	80060c0 <SD_disk_ioctl+0x248>
      
    case MMC_GET_CSD: 
      /* Receive CSD Information (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8006028:	2100      	movs	r1, #0
 800602a:	2049      	movs	r0, #73	; 0x49
 800602c:	f7ff fc9e 	bl	800596c <SD_SendCmd>
 8006030:	1e03      	subs	r3, r0, #0
 8006032:	d147      	bne.n	80060c4 <SD_disk_ioctl+0x24c>
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	2110      	movs	r1, #16
 8006038:	0018      	movs	r0, r3
 800603a:	f7ff fbf3 	bl	8005824 <SD_RxDataBlock>
 800603e:	1e03      	subs	r3, r0, #0
 8006040:	d040      	beq.n	80060c4 <SD_disk_ioctl+0x24c>
        res = RES_OK;
 8006042:	2327      	movs	r3, #39	; 0x27
 8006044:	18fb      	adds	r3, r7, r3
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
      break;
 800604a:	e03b      	b.n	80060c4 <SD_disk_ioctl+0x24c>
      
    case MMC_GET_CID: 
      /* Receive CID information (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800604c:	2100      	movs	r1, #0
 800604e:	204a      	movs	r0, #74	; 0x4a
 8006050:	f7ff fc8c 	bl	800596c <SD_SendCmd>
 8006054:	1e03      	subs	r3, r0, #0
 8006056:	d137      	bne.n	80060c8 <SD_disk_ioctl+0x250>
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	2110      	movs	r1, #16
 800605c:	0018      	movs	r0, r3
 800605e:	f7ff fbe1 	bl	8005824 <SD_RxDataBlock>
 8006062:	1e03      	subs	r3, r0, #0
 8006064:	d030      	beq.n	80060c8 <SD_disk_ioctl+0x250>
        res = RES_OK;
 8006066:	2327      	movs	r3, #39	; 0x27
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
      break;
 800606e:	e02b      	b.n	80060c8 <SD_disk_ioctl+0x250>
      
    case MMC_GET_OCR: 
      /* Receive OCR Information (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8006070:	2100      	movs	r1, #0
 8006072:	207a      	movs	r0, #122	; 0x7a
 8006074:	f7ff fc7a 	bl	800596c <SD_SendCmd>
 8006078:	1e03      	subs	r3, r0, #0
 800607a:	d11a      	bne.n	80060b2 <SD_disk_ioctl+0x23a>
      {         
        for (n = 0; n < 4; n++)
 800607c:	2326      	movs	r3, #38	; 0x26
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e00c      	b.n	80060a0 <SD_disk_ioctl+0x228>
        {
          *ptr++ = SPI_RxByte();
 8006086:	6a3c      	ldr	r4, [r7, #32]
 8006088:	1c63      	adds	r3, r4, #1
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	f7ff fb14 	bl	80056b8 <SPI_RxByte>
 8006090:	0003      	movs	r3, r0
 8006092:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8006094:	2126      	movs	r1, #38	; 0x26
 8006096:	187b      	adds	r3, r7, r1
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	187b      	adds	r3, r7, r1
 800609c:	3201      	adds	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	2326      	movs	r3, #38	; 0x26
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d9ed      	bls.n	8006086 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80060aa:	2327      	movs	r3, #39	; 0x27
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
      }     
      
    default:
      res = RES_PARERR;
 80060b2:	2327      	movs	r3, #39	; 0x27
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	2204      	movs	r2, #4
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e006      	b.n	80060ca <SD_disk_ioctl+0x252>
      break;
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	e004      	b.n	80060ca <SD_disk_ioctl+0x252>
      break;
 80060c0:	46c0      	nop			; (mov r8, r8)
 80060c2:	e002      	b.n	80060ca <SD_disk_ioctl+0x252>
      break;
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	e000      	b.n	80060ca <SD_disk_ioctl+0x252>
      break;
 80060c8:	46c0      	nop			; (mov r8, r8)
    }
    
    DESELECT();
 80060ca:	f7ff facb 	bl	8005664 <DESELECT>
    SPI_RxByte();
 80060ce:	f7ff faf3 	bl	80056b8 <SPI_RxByte>
  }
  
  return res;
 80060d2:	2327      	movs	r3, #39	; 0x27
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	781b      	ldrb	r3, [r3, #0]
}
 80060d8:	0018      	movs	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	b00b      	add	sp, #44	; 0x2c
 80060de:	bd90      	pop	{r4, r7, pc}
 80060e0:	20000000 	.word	0x20000000
 80060e4:	08007454 	.word	0x08007454

080060e8 <send_uart>:
uint32_t total, free_space;


/* to send the data to the uart */
void send_uart (char *string)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	0018      	movs	r0, r3
 80060f4:	f7fa f808 	bl	8000108 <strlen>
 80060f8:	0002      	movs	r2, r0
 80060fa:	210f      	movs	r1, #15
 80060fc:	187b      	adds	r3, r7, r1
 80060fe:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);  // transmit in blocking mode
 8006100:	187b      	adds	r3, r7, r1
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	b29a      	uxth	r2, r3
 8006106:	23fa      	movs	r3, #250	; 0xfa
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4803      	ldr	r0, [pc, #12]	; (800611c <send_uart+0x34>)
 800610e:	f7fc fdc7 	bl	8002ca0 <HAL_UART_Transmit>
}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	46bd      	mov	sp, r7
 8006116:	b004      	add	sp, #16
 8006118:	bd80      	pop	{r7, pc}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	20000798 	.word	0x20000798

08006120 <bufclear>:
	while (*buf++ != '\0') i++;
	return i;
}

void bufclear (void)  // clear buffer
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
	for (int i=0; i<1024; i++)
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	e007      	b.n	800613c <bufclear+0x1c>
	{
		buffer[i] = '\0';
 800612c:	4a07      	ldr	r2, [pc, #28]	; (800614c <bufclear+0x2c>)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	18d3      	adds	r3, r2, r3
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<1024; i++)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3301      	adds	r3, #1
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a04      	ldr	r2, [pc, #16]	; (8006150 <bufclear+0x30>)
 8006140:	4293      	cmp	r3, r2
 8006142:	ddf3      	ble.n	800612c <bufclear+0xc>
	}
}
 8006144:	46c0      	nop			; (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b002      	add	sp, #8
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000808 	.word	0x20000808
 8006150:	000003ff 	.word	0x000003ff

08006154 <scan_files>:

/* scan all the files in the directory (*path)*/
FRESULT scan_files (
    char* path        /* Start node to be scanned (***also used as work area***) */
)
{
 8006154:	b5b0      	push	{r4, r5, r7, lr}
 8006156:	4c3b      	ldr	r4, [pc, #236]	; (8006244 <scan_files+0xf0>)
 8006158:	44a5      	add	sp, r4
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       /* Open the directory */
 800615e:	4d3a      	ldr	r5, [pc, #232]	; (8006248 <scan_files+0xf4>)
 8006160:	197c      	adds	r4, r7, r5
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	2308      	movs	r3, #8
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	0011      	movs	r1, r2
 800616a:	0018      	movs	r0, r3
 800616c:	f7fe ffce 	bl	800510c <f_opendir>
 8006170:	0003      	movs	r3, r0
 8006172:	7023      	strb	r3, [r4, #0]
    if (res == FR_OK) {
 8006174:	197b      	adds	r3, r7, r5
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d159      	bne.n	8006230 <scan_files+0xdc>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800617c:	4d32      	ldr	r5, [pc, #200]	; (8006248 <scan_files+0xf4>)
 800617e:	197c      	adds	r4, r7, r5
 8006180:	4a32      	ldr	r2, [pc, #200]	; (800624c <scan_files+0xf8>)
 8006182:	2308      	movs	r3, #8
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	0011      	movs	r1, r2
 8006188:	0018      	movs	r0, r3
 800618a:	f7ff f89b 	bl	80052c4 <f_readdir>
 800618e:	0003      	movs	r3, r0
 8006190:	7023      	strb	r3, [r4, #0]
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8006192:	197b      	adds	r3, r7, r5
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d145      	bne.n	8006226 <scan_files+0xd2>
 800619a:	4b2c      	ldr	r3, [pc, #176]	; (800624c <scan_files+0xf8>)
 800619c:	7a5b      	ldrb	r3, [r3, #9]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d041      	beq.n	8006226 <scan_files+0xd2>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 80061a2:	4b2a      	ldr	r3, [pc, #168]	; (800624c <scan_files+0xf8>)
 80061a4:	7a1b      	ldrb	r3, [r3, #8]
 80061a6:	001a      	movs	r2, r3
 80061a8:	2310      	movs	r3, #16
 80061aa:	4013      	ands	r3, r2
 80061ac:	d02d      	beq.n	800620a <scan_files+0xb6>
                i = strlen(path);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	0018      	movs	r0, r3
 80061b2:	f7f9 ffa9 	bl	8000108 <strlen>
 80061b6:	0003      	movs	r3, r0
 80061b8:	248a      	movs	r4, #138	; 0x8a
 80061ba:	00a4      	lsls	r4, r4, #2
 80061bc:	193a      	adds	r2, r7, r4
 80061be:	6013      	str	r3, [r2, #0]
                sprintf(&path[i], "/%s", fno.fname);
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	193b      	adds	r3, r7, r4
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	18d3      	adds	r3, r2, r3
 80061c8:	4a21      	ldr	r2, [pc, #132]	; (8006250 <scan_files+0xfc>)
 80061ca:	4922      	ldr	r1, [pc, #136]	; (8006254 <scan_files+0x100>)
 80061cc:	0018      	movs	r0, r3
 80061ce:	f000 fc53 	bl	8006a78 <siprintf>
                send_uart(&path[i]);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	193b      	adds	r3, r7, r4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	18d3      	adds	r3, r2, r3
 80061da:	0018      	movs	r0, r3
 80061dc:	f7ff ff84 	bl	80060e8 <send_uart>
                res = scan_files(path);                    /* Enter the directory */
 80061e0:	4d19      	ldr	r5, [pc, #100]	; (8006248 <scan_files+0xf4>)
 80061e2:	197c      	adds	r4, r7, r5
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	0018      	movs	r0, r3
 80061e8:	f7ff ffb4 	bl	8006154 <scan_files>
 80061ec:	0003      	movs	r3, r0
 80061ee:	7023      	strb	r3, [r4, #0]
                if (res != FR_OK) break;
 80061f0:	197b      	adds	r3, r7, r5
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d115      	bne.n	8006224 <scan_files+0xd0>
                path[i] = 0;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	238a      	movs	r3, #138	; 0x8a
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	18d3      	adds	r3, r2, r3
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e7b8      	b.n	800617c <scan_files+0x28>
            } else {                                       /* It is a file. */
                sprintf(buffer,"%s/%s\n", path, fno.fname);
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <scan_files+0xfc>)
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	4912      	ldr	r1, [pc, #72]	; (8006258 <scan_files+0x104>)
 8006210:	4812      	ldr	r0, [pc, #72]	; (800625c <scan_files+0x108>)
 8006212:	f000 fc31 	bl	8006a78 <siprintf>
                send_uart(buffer);
 8006216:	4b11      	ldr	r3, [pc, #68]	; (800625c <scan_files+0x108>)
 8006218:	0018      	movs	r0, r3
 800621a:	f7ff ff65 	bl	80060e8 <send_uart>
                bufclear();
 800621e:	f7ff ff7f 	bl	8006120 <bufclear>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006222:	e7ab      	b.n	800617c <scan_files+0x28>
                if (res != FR_OK) break;
 8006224:	46c0      	nop			; (mov r8, r8)
            }
        }
        f_closedir(&dir);
 8006226:	2308      	movs	r3, #8
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	0018      	movs	r0, r3
 800622c:	f7ff f818 	bl	8005260 <f_closedir>
    }

    return res;
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <scan_files+0xf4>)
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	781b      	ldrb	r3, [r3, #0]
}
 8006236:	0018      	movs	r0, r3
 8006238:	46bd      	mov	sp, r7
 800623a:	238c      	movs	r3, #140	; 0x8c
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	449d      	add	sp, r3
 8006240:	bdb0      	pop	{r4, r5, r7, pc}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	fffffdd0 	.word	0xfffffdd0
 8006248:	0000022f 	.word	0x0000022f
 800624c:	200000cc 	.word	0x200000cc
 8006250:	200000d5 	.word	0x200000d5
 8006254:	08007304 	.word	0x08007304
 8006258:	08007308 	.word	0x08007308
 800625c:	20000808 	.word	0x20000808

08006260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006260:	b5b0      	push	{r4, r5, r7, lr}
 8006262:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006264:	f7fa ff88 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006268:	f000 f89e 	bl	80063a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800626c:	f000 f96a 	bl	8006544 <MX_GPIO_Init>
  MX_SPI1_Init();
 8006270:	f000 f8fa 	bl	8006468 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8006274:	f000 f936 	bl	80064e4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8006278:	f7ff f9d0 	bl	800561c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	/* Wait for SD module reset */
	HAL_Delay(500);
 800627c:	23fa      	movs	r3, #250	; 0xfa
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	0018      	movs	r0, r3
 8006282:	f7fa ffbf 	bl	8001204 <HAL_Delay>
//	if (my_status == STA_PROTECT){
//		send_uart (" Write protected...\n");
//	}

  /* Mount SD Card */
 	    fresult = f_mount(&fs, "", 0);
 8006286:	4938      	ldr	r1, [pc, #224]	; (8006368 <main+0x108>)
 8006288:	4b38      	ldr	r3, [pc, #224]	; (800636c <main+0x10c>)
 800628a:	2200      	movs	r2, #0
 800628c:	0018      	movs	r0, r3
 800628e:	f7fe feed 	bl	800506c <f_mount>
 8006292:	0003      	movs	r3, r0
 8006294:	001a      	movs	r2, r3
 8006296:	4b36      	ldr	r3, [pc, #216]	; (8006370 <main+0x110>)
 8006298:	701a      	strb	r2, [r3, #0]

 	    if (fresult != FR_OK) {
 800629a:	4b35      	ldr	r3, [pc, #212]	; (8006370 <main+0x110>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <main+0x4c>
 	    	send_uart ("error in mounting SD CARD...\n");
 80062a2:	4b34      	ldr	r3, [pc, #208]	; (8006374 <main+0x114>)
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7ff ff1f 	bl	80060e8 <send_uart>
 80062aa:	e003      	b.n	80062b4 <main+0x54>
 	    }
 	    else send_uart("SD CARD mounted successfully...\n");
 80062ac:	4b32      	ldr	r3, [pc, #200]	; (8006378 <main+0x118>)
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7ff ff1a 	bl	80060e8 <send_uart>


 	    /*************** Card capacity details ********************/

 	        /* Check free space */
 	        f_getfree("", &fre_clust, &pfs);
 80062b4:	4a31      	ldr	r2, [pc, #196]	; (800637c <main+0x11c>)
 80062b6:	4932      	ldr	r1, [pc, #200]	; (8006380 <main+0x120>)
 80062b8:	4b2b      	ldr	r3, [pc, #172]	; (8006368 <main+0x108>)
 80062ba:	0018      	movs	r0, r3
 80062bc:	f7ff f864 	bl	8005388 <f_getfree>

 	        total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80062c0:	4b2e      	ldr	r3, [pc, #184]	; (800637c <main+0x11c>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	2385      	movs	r3, #133	; 0x85
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	58d3      	ldr	r3, [r2, r3]
 80062ca:	1e9a      	subs	r2, r3, #2
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <main+0x11c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	492c      	ldr	r1, [pc, #176]	; (8006384 <main+0x124>)
 80062d2:	5c5b      	ldrb	r3, [r3, r1]
 80062d4:	4353      	muls	r3, r2
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7fa fdb8 	bl	8000e4c <__aeabi_ui2d>
 80062dc:	2200      	movs	r2, #0
 80062de:	4b2a      	ldr	r3, [pc, #168]	; (8006388 <main+0x128>)
 80062e0:	f7f9 ffc4 	bl	800026c <__aeabi_dmul>
 80062e4:	0003      	movs	r3, r0
 80062e6:	000c      	movs	r4, r1
 80062e8:	0018      	movs	r0, r3
 80062ea:	0021      	movs	r1, r4
 80062ec:	f7f9 ffa0 	bl	8000230 <__aeabi_d2uiz>
 80062f0:	0002      	movs	r2, r0
 80062f2:	4b26      	ldr	r3, [pc, #152]	; (800638c <main+0x12c>)
 80062f4:	601a      	str	r2, [r3, #0]
 	        sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 80062f6:	4b25      	ldr	r3, [pc, #148]	; (800638c <main+0x12c>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4925      	ldr	r1, [pc, #148]	; (8006390 <main+0x130>)
 80062fc:	4b25      	ldr	r3, [pc, #148]	; (8006394 <main+0x134>)
 80062fe:	0018      	movs	r0, r3
 8006300:	f000 fbba 	bl	8006a78 <siprintf>
 	        send_uart(buffer);
 8006304:	4b23      	ldr	r3, [pc, #140]	; (8006394 <main+0x134>)
 8006306:	0018      	movs	r0, r3
 8006308:	f7ff feee 	bl	80060e8 <send_uart>
 	        bufclear();
 800630c:	f7ff ff08 	bl	8006120 <bufclear>
 	        free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <main+0x11c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1b      	ldr	r2, [pc, #108]	; (8006384 <main+0x124>)
 8006316:	5c9b      	ldrb	r3, [r3, r2]
 8006318:	001a      	movs	r2, r3
 800631a:	4b19      	ldr	r3, [pc, #100]	; (8006380 <main+0x120>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4353      	muls	r3, r2
 8006320:	0018      	movs	r0, r3
 8006322:	f7fa fd93 	bl	8000e4c <__aeabi_ui2d>
 8006326:	2200      	movs	r2, #0
 8006328:	4b17      	ldr	r3, [pc, #92]	; (8006388 <main+0x128>)
 800632a:	f7f9 ff9f 	bl	800026c <__aeabi_dmul>
 800632e:	0003      	movs	r3, r0
 8006330:	000c      	movs	r4, r1
 8006332:	0018      	movs	r0, r3
 8006334:	0021      	movs	r1, r4
 8006336:	f7f9 ff7b 	bl	8000230 <__aeabi_d2uiz>
 800633a:	0002      	movs	r2, r0
 800633c:	4b16      	ldr	r3, [pc, #88]	; (8006398 <main+0x138>)
 800633e:	601a      	str	r2, [r3, #0]
 	        sprintf (buffer, "SD CARD Free Space: \t%lu\n",free_space);
 8006340:	4b15      	ldr	r3, [pc, #84]	; (8006398 <main+0x138>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	4915      	ldr	r1, [pc, #84]	; (800639c <main+0x13c>)
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <main+0x134>)
 8006348:	0018      	movs	r0, r3
 800634a:	f000 fb95 	bl	8006a78 <siprintf>
 	        send_uart(buffer);
 800634e:	4b11      	ldr	r3, [pc, #68]	; (8006394 <main+0x134>)
 8006350:	0018      	movs	r0, r3
 8006352:	f7ff fec9 	bl	80060e8 <send_uart>
//
// 	        send_uart ("FILE2.txt created and the data is written \n");

 	        // read directory

 	       res = scan_files ("/");
 8006356:	4b12      	ldr	r3, [pc, #72]	; (80063a0 <main+0x140>)
 8006358:	0018      	movs	r0, r3
 800635a:	f7ff fefb 	bl	8006154 <scan_files>
 800635e:	0003      	movs	r3, r0
 8006360:	001a      	movs	r2, r3
 8006362:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <main+0x144>)
 8006364:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006366:	e7fe      	b.n	8006366 <main+0x106>
 8006368:	08007310 	.word	0x08007310
 800636c:	20000560 	.word	0x20000560
 8006370:	20000c10 	.word	0x20000c10
 8006374:	08007314 	.word	0x08007314
 8006378:	08007334 	.word	0x08007334
 800637c:	20000c0c 	.word	0x20000c0c
 8006380:	2000055c 	.word	0x2000055c
 8006384:	00000202 	.word	0x00000202
 8006388:	3fe00000 	.word	0x3fe00000
 800638c:	20000c78 	.word	0x20000c78
 8006390:	08007358 	.word	0x08007358
 8006394:	20000808 	.word	0x20000808
 8006398:	20000794 	.word	0x20000794
 800639c:	08007374 	.word	0x08007374
 80063a0:	08007390 	.word	0x08007390
 80063a4:	20000c7c 	.word	0x20000c7c

080063a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b097      	sub	sp, #92	; 0x5c
 80063ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063ae:	2428      	movs	r4, #40	; 0x28
 80063b0:	193b      	adds	r3, r7, r4
 80063b2:	0018      	movs	r0, r3
 80063b4:	2330      	movs	r3, #48	; 0x30
 80063b6:	001a      	movs	r2, r3
 80063b8:	2100      	movs	r1, #0
 80063ba:	f000 fb55 	bl	8006a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063be:	2318      	movs	r3, #24
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	0018      	movs	r0, r3
 80063c4:	2310      	movs	r3, #16
 80063c6:	001a      	movs	r2, r3
 80063c8:	2100      	movs	r1, #0
 80063ca:	f000 fb4d 	bl	8006a68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	0018      	movs	r0, r3
 80063d2:	2314      	movs	r3, #20
 80063d4:	001a      	movs	r2, r3
 80063d6:	2100      	movs	r1, #0
 80063d8:	f000 fb46 	bl	8006a68 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80063dc:	0021      	movs	r1, r4
 80063de:	187b      	adds	r3, r7, r1
 80063e0:	2201      	movs	r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80063e4:	187b      	adds	r3, r7, r1
 80063e6:	2201      	movs	r2, #1
 80063e8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80063ea:	187b      	adds	r3, r7, r1
 80063ec:	2202      	movs	r2, #2
 80063ee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80063f0:	187b      	adds	r3, r7, r1
 80063f2:	2280      	movs	r2, #128	; 0x80
 80063f4:	0252      	lsls	r2, r2, #9
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80063f8:	187b      	adds	r3, r7, r1
 80063fa:	2280      	movs	r2, #128	; 0x80
 80063fc:	0352      	lsls	r2, r2, #13
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8006400:	187b      	adds	r3, r7, r1
 8006402:	2200      	movs	r2, #0
 8006404:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006406:	187b      	adds	r3, r7, r1
 8006408:	0018      	movs	r0, r3
 800640a:	f7fb f95f 	bl	80016cc <HAL_RCC_OscConfig>
 800640e:	1e03      	subs	r3, r0, #0
 8006410:	d001      	beq.n	8006416 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8006412:	f000 f8ed 	bl	80065f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006416:	2118      	movs	r1, #24
 8006418:	187b      	adds	r3, r7, r1
 800641a:	2207      	movs	r2, #7
 800641c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800641e:	187b      	adds	r3, r7, r1
 8006420:	2202      	movs	r2, #2
 8006422:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006424:	187b      	adds	r3, r7, r1
 8006426:	2200      	movs	r2, #0
 8006428:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800642a:	187b      	adds	r3, r7, r1
 800642c:	2200      	movs	r2, #0
 800642e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006430:	187b      	adds	r3, r7, r1
 8006432:	2101      	movs	r1, #1
 8006434:	0018      	movs	r0, r3
 8006436:	f7fb fc3d 	bl	8001cb4 <HAL_RCC_ClockConfig>
 800643a:	1e03      	subs	r3, r0, #0
 800643c:	d001      	beq.n	8006442 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800643e:	f000 f8d7 	bl	80065f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8006448:	1d3b      	adds	r3, r7, #4
 800644a:	2200      	movs	r2, #0
 800644c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800644e:	1d3b      	adds	r3, r7, #4
 8006450:	0018      	movs	r0, r3
 8006452:	f7fb fd9b 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
 8006456:	1e03      	subs	r3, r0, #0
 8006458:	d001      	beq.n	800645e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800645a:	f000 f8c9 	bl	80065f0 <Error_Handler>
  }
}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	46bd      	mov	sp, r7
 8006462:	b017      	add	sp, #92	; 0x5c
 8006464:	bd90      	pop	{r4, r7, pc}
	...

08006468 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800646c:	4b1b      	ldr	r3, [pc, #108]	; (80064dc <MX_SPI1_Init+0x74>)
 800646e:	4a1c      	ldr	r2, [pc, #112]	; (80064e0 <MX_SPI1_Init+0x78>)
 8006470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006472:	4b1a      	ldr	r3, [pc, #104]	; (80064dc <MX_SPI1_Init+0x74>)
 8006474:	2282      	movs	r2, #130	; 0x82
 8006476:	0052      	lsls	r2, r2, #1
 8006478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800647a:	4b18      	ldr	r3, [pc, #96]	; (80064dc <MX_SPI1_Init+0x74>)
 800647c:	2200      	movs	r2, #0
 800647e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006480:	4b16      	ldr	r3, [pc, #88]	; (80064dc <MX_SPI1_Init+0x74>)
 8006482:	22e0      	movs	r2, #224	; 0xe0
 8006484:	00d2      	lsls	r2, r2, #3
 8006486:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006488:	4b14      	ldr	r3, [pc, #80]	; (80064dc <MX_SPI1_Init+0x74>)
 800648a:	2200      	movs	r2, #0
 800648c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800648e:	4b13      	ldr	r3, [pc, #76]	; (80064dc <MX_SPI1_Init+0x74>)
 8006490:	2200      	movs	r2, #0
 8006492:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006494:	4b11      	ldr	r3, [pc, #68]	; (80064dc <MX_SPI1_Init+0x74>)
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	0092      	lsls	r2, r2, #2
 800649a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800649c:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <MX_SPI1_Init+0x74>)
 800649e:	2210      	movs	r2, #16
 80064a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064a2:	4b0e      	ldr	r3, [pc, #56]	; (80064dc <MX_SPI1_Init+0x74>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <MX_SPI1_Init+0x74>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ae:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <MX_SPI1_Init+0x74>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80064b4:	4b09      	ldr	r3, [pc, #36]	; (80064dc <MX_SPI1_Init+0x74>)
 80064b6:	2207      	movs	r2, #7
 80064b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80064ba:	4b08      	ldr	r3, [pc, #32]	; (80064dc <MX_SPI1_Init+0x74>)
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <MX_SPI1_Init+0x74>)
 80064c2:	2208      	movs	r2, #8
 80064c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80064c6:	4b05      	ldr	r3, [pc, #20]	; (80064dc <MX_SPI1_Init+0x74>)
 80064c8:	0018      	movs	r0, r3
 80064ca:	f7fb fe3d 	bl	8002148 <HAL_SPI_Init>
 80064ce:	1e03      	subs	r3, r0, #0
 80064d0:	d001      	beq.n	80064d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80064d2:	f000 f88d 	bl	80065f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000c14 	.word	0x20000c14
 80064e0:	40013000 	.word	0x40013000

080064e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80064e8:	4b14      	ldr	r3, [pc, #80]	; (800653c <MX_USART1_UART_Init+0x58>)
 80064ea:	4a15      	ldr	r2, [pc, #84]	; (8006540 <MX_USART1_UART_Init+0x5c>)
 80064ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <MX_USART1_UART_Init+0x58>)
 80064f0:	22e1      	movs	r2, #225	; 0xe1
 80064f2:	0252      	lsls	r2, r2, #9
 80064f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80064f6:	4b11      	ldr	r3, [pc, #68]	; (800653c <MX_USART1_UART_Init+0x58>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <MX_USART1_UART_Init+0x58>)
 80064fe:	2200      	movs	r2, #0
 8006500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006502:	4b0e      	ldr	r3, [pc, #56]	; (800653c <MX_USART1_UART_Init+0x58>)
 8006504:	2200      	movs	r2, #0
 8006506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <MX_USART1_UART_Init+0x58>)
 800650a:	220c      	movs	r2, #12
 800650c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <MX_USART1_UART_Init+0x58>)
 8006510:	2200      	movs	r2, #0
 8006512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <MX_USART1_UART_Init+0x58>)
 8006516:	2200      	movs	r2, #0
 8006518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <MX_USART1_UART_Init+0x58>)
 800651c:	2200      	movs	r2, #0
 800651e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <MX_USART1_UART_Init+0x58>)
 8006522:	2200      	movs	r2, #0
 8006524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <MX_USART1_UART_Init+0x58>)
 8006528:	0018      	movs	r0, r3
 800652a:	f7fc fb61 	bl	8002bf0 <HAL_UART_Init>
 800652e:	1e03      	subs	r3, r0, #0
 8006530:	d001      	beq.n	8006536 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006532:	f000 f85d 	bl	80065f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20000798 	.word	0x20000798
 8006540:	40013800 	.word	0x40013800

08006544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b089      	sub	sp, #36	; 0x24
 8006548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800654a:	240c      	movs	r4, #12
 800654c:	193b      	adds	r3, r7, r4
 800654e:	0018      	movs	r0, r3
 8006550:	2314      	movs	r3, #20
 8006552:	001a      	movs	r2, r3
 8006554:	2100      	movs	r1, #0
 8006556:	f000 fa87 	bl	8006a68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800655a:	4b23      	ldr	r3, [pc, #140]	; (80065e8 <MX_GPIO_Init+0xa4>)
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	4b22      	ldr	r3, [pc, #136]	; (80065e8 <MX_GPIO_Init+0xa4>)
 8006560:	2180      	movs	r1, #128	; 0x80
 8006562:	03c9      	lsls	r1, r1, #15
 8006564:	430a      	orrs	r2, r1
 8006566:	615a      	str	r2, [r3, #20]
 8006568:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <MX_GPIO_Init+0xa4>)
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	2380      	movs	r3, #128	; 0x80
 800656e:	03db      	lsls	r3, r3, #15
 8006570:	4013      	ands	r3, r2
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006576:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <MX_GPIO_Init+0xa4>)
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <MX_GPIO_Init+0xa4>)
 800657c:	2180      	movs	r1, #128	; 0x80
 800657e:	0289      	lsls	r1, r1, #10
 8006580:	430a      	orrs	r2, r1
 8006582:	615a      	str	r2, [r3, #20]
 8006584:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <MX_GPIO_Init+0xa4>)
 8006586:	695a      	ldr	r2, [r3, #20]
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	029b      	lsls	r3, r3, #10
 800658c:	4013      	ands	r3, r2
 800658e:	607b      	str	r3, [r7, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <MX_GPIO_Init+0xa4>)
 8006594:	695a      	ldr	r2, [r3, #20]
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <MX_GPIO_Init+0xa4>)
 8006598:	2180      	movs	r1, #128	; 0x80
 800659a:	0309      	lsls	r1, r1, #12
 800659c:	430a      	orrs	r2, r1
 800659e:	615a      	str	r2, [r3, #20]
 80065a0:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <MX_GPIO_Init+0xa4>)
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	031b      	lsls	r3, r3, #12
 80065a8:	4013      	ands	r3, r2
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <MX_GPIO_Init+0xa8>)
 80065b0:	2201      	movs	r2, #1
 80065b2:	2110      	movs	r1, #16
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7fb f86b 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80065ba:	0021      	movs	r1, r4
 80065bc:	187b      	adds	r3, r7, r1
 80065be:	2210      	movs	r2, #16
 80065c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065c2:	187b      	adds	r3, r7, r1
 80065c4:	2201      	movs	r2, #1
 80065c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c8:	187b      	adds	r3, r7, r1
 80065ca:	2200      	movs	r2, #0
 80065cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80065ce:	187b      	adds	r3, r7, r1
 80065d0:	2201      	movs	r2, #1
 80065d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80065d4:	187b      	adds	r3, r7, r1
 80065d6:	4a05      	ldr	r2, [pc, #20]	; (80065ec <MX_GPIO_Init+0xa8>)
 80065d8:	0019      	movs	r1, r3
 80065da:	0010      	movs	r0, r2
 80065dc:	f7fa fee4 	bl	80013a8 <HAL_GPIO_Init>

}
 80065e0:	46c0      	nop			; (mov r8, r8)
 80065e2:	46bd      	mov	sp, r7
 80065e4:	b009      	add	sp, #36	; 0x24
 80065e6:	bd90      	pop	{r4, r7, pc}
 80065e8:	40021000 	.word	0x40021000
 80065ec:	48000800 	.word	0x48000800

080065f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80065f4:	46c0      	nop			; (mov r8, r8)
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006602:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <HAL_MspInit+0x44>)
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <HAL_MspInit+0x44>)
 8006608:	2101      	movs	r1, #1
 800660a:	430a      	orrs	r2, r1
 800660c:	619a      	str	r2, [r3, #24]
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <HAL_MspInit+0x44>)
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	2201      	movs	r2, #1
 8006614:	4013      	ands	r3, r2
 8006616:	607b      	str	r3, [r7, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_MspInit+0x44>)
 800661c:	69da      	ldr	r2, [r3, #28]
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <HAL_MspInit+0x44>)
 8006620:	2180      	movs	r1, #128	; 0x80
 8006622:	0549      	lsls	r1, r1, #21
 8006624:	430a      	orrs	r2, r1
 8006626:	61da      	str	r2, [r3, #28]
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <HAL_MspInit+0x44>)
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	055b      	lsls	r3, r3, #21
 8006630:	4013      	ands	r3, r2
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	46bd      	mov	sp, r7
 800663a:	b002      	add	sp, #8
 800663c:	bd80      	pop	{r7, pc}
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	40021000 	.word	0x40021000

08006644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800664c:	2314      	movs	r3, #20
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	0018      	movs	r0, r3
 8006652:	2314      	movs	r3, #20
 8006654:	001a      	movs	r2, r3
 8006656:	2100      	movs	r1, #0
 8006658:	f000 fa06 	bl	8006a68 <memset>
  if(hspi->Instance==SPI1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1c      	ldr	r2, [pc, #112]	; (80066d4 <HAL_SPI_MspInit+0x90>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d132      	bne.n	80066cc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006666:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <HAL_SPI_MspInit+0x94>)
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	4b1b      	ldr	r3, [pc, #108]	; (80066d8 <HAL_SPI_MspInit+0x94>)
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	0149      	lsls	r1, r1, #5
 8006670:	430a      	orrs	r2, r1
 8006672:	619a      	str	r2, [r3, #24]
 8006674:	4b18      	ldr	r3, [pc, #96]	; (80066d8 <HAL_SPI_MspInit+0x94>)
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	2380      	movs	r3, #128	; 0x80
 800667a:	015b      	lsls	r3, r3, #5
 800667c:	4013      	ands	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006682:	4b15      	ldr	r3, [pc, #84]	; (80066d8 <HAL_SPI_MspInit+0x94>)
 8006684:	695a      	ldr	r2, [r3, #20]
 8006686:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <HAL_SPI_MspInit+0x94>)
 8006688:	2180      	movs	r1, #128	; 0x80
 800668a:	0289      	lsls	r1, r1, #10
 800668c:	430a      	orrs	r2, r1
 800668e:	615a      	str	r2, [r3, #20]
 8006690:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <HAL_SPI_MspInit+0x94>)
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	2380      	movs	r3, #128	; 0x80
 8006696:	029b      	lsls	r3, r3, #10
 8006698:	4013      	ands	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800669e:	2114      	movs	r1, #20
 80066a0:	187b      	adds	r3, r7, r1
 80066a2:	22e0      	movs	r2, #224	; 0xe0
 80066a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a6:	187b      	adds	r3, r7, r1
 80066a8:	2202      	movs	r2, #2
 80066aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ac:	187b      	adds	r3, r7, r1
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066b2:	187b      	adds	r3, r7, r1
 80066b4:	2203      	movs	r2, #3
 80066b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80066b8:	187b      	adds	r3, r7, r1
 80066ba:	2200      	movs	r2, #0
 80066bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066be:	187a      	adds	r2, r7, r1
 80066c0:	2390      	movs	r3, #144	; 0x90
 80066c2:	05db      	lsls	r3, r3, #23
 80066c4:	0011      	movs	r1, r2
 80066c6:	0018      	movs	r0, r3
 80066c8:	f7fa fe6e 	bl	80013a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80066cc:	46c0      	nop			; (mov r8, r8)
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b00a      	add	sp, #40	; 0x28
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40013000 	.word	0x40013000
 80066d8:	40021000 	.word	0x40021000

080066dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e4:	2314      	movs	r3, #20
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	0018      	movs	r0, r3
 80066ea:	2314      	movs	r3, #20
 80066ec:	001a      	movs	r2, r3
 80066ee:	2100      	movs	r1, #0
 80066f0:	f000 f9ba 	bl	8006a68 <memset>
  if(huart->Instance==USART1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <HAL_UART_MspInit+0x94>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d133      	bne.n	8006766 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80066fe:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <HAL_UART_MspInit+0x98>)
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <HAL_UART_MspInit+0x98>)
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	01c9      	lsls	r1, r1, #7
 8006708:	430a      	orrs	r2, r1
 800670a:	619a      	str	r2, [r3, #24]
 800670c:	4b19      	ldr	r3, [pc, #100]	; (8006774 <HAL_UART_MspInit+0x98>)
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	01db      	lsls	r3, r3, #7
 8006714:	4013      	ands	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <HAL_UART_MspInit+0x98>)
 800671c:	695a      	ldr	r2, [r3, #20]
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <HAL_UART_MspInit+0x98>)
 8006720:	2180      	movs	r1, #128	; 0x80
 8006722:	0289      	lsls	r1, r1, #10
 8006724:	430a      	orrs	r2, r1
 8006726:	615a      	str	r2, [r3, #20]
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_UART_MspInit+0x98>)
 800672a:	695a      	ldr	r2, [r3, #20]
 800672c:	2380      	movs	r3, #128	; 0x80
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	4013      	ands	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006736:	2114      	movs	r1, #20
 8006738:	187b      	adds	r3, r7, r1
 800673a:	22c0      	movs	r2, #192	; 0xc0
 800673c:	00d2      	lsls	r2, r2, #3
 800673e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006740:	187b      	adds	r3, r7, r1
 8006742:	2202      	movs	r2, #2
 8006744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006746:	187b      	adds	r3, r7, r1
 8006748:	2200      	movs	r2, #0
 800674a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800674c:	187b      	adds	r3, r7, r1
 800674e:	2203      	movs	r2, #3
 8006750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006752:	187b      	adds	r3, r7, r1
 8006754:	2201      	movs	r2, #1
 8006756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006758:	187a      	adds	r2, r7, r1
 800675a:	2390      	movs	r3, #144	; 0x90
 800675c:	05db      	lsls	r3, r3, #23
 800675e:	0011      	movs	r1, r2
 8006760:	0018      	movs	r0, r3
 8006762:	f7fa fe21 	bl	80013a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	46bd      	mov	sp, r7
 800676a:	b00a      	add	sp, #40	; 0x28
 800676c:	bd80      	pop	{r7, pc}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	40013800 	.word	0x40013800
 8006774:	40021000 	.word	0x40021000

08006778 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800677c:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <SDTimer_Handler+0x3c>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d006      	beq.n	8006794 <SDTimer_Handler+0x1c>
    Timer1--;
 8006786:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <SDTimer_Handler+0x3c>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <SDTimer_Handler+0x3c>)
 8006792:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8006794:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <SDTimer_Handler+0x40>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d006      	beq.n	80067ac <SDTimer_Handler+0x34>
    Timer2--;
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <SDTimer_Handler+0x40>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <SDTimer_Handler+0x40>)
 80067aa:	701a      	strb	r2, [r3, #0]
}
 80067ac:	46c0      	nop			; (mov r8, r8)
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	20000ead 	.word	0x20000ead
 80067b8:	20000eac 	.word	0x20000eac

080067bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80067c0:	46c0      	nop			; (mov r8, r8)
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067ca:	e7fe      	b.n	80067ca <HardFault_Handler+0x4>

080067cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80067d0:	46c0      	nop			; (mov r8, r8)
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80067e4:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <SysTick_Handler+0x30>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	3301      	adds	r3, #1
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	4b08      	ldr	r3, [pc, #32]	; (8006810 <SysTick_Handler+0x30>)
 80067f0:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 80067f2:	4b07      	ldr	r3, [pc, #28]	; (8006810 <SysTick_Handler+0x30>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b09      	cmp	r3, #9
 80067fa:	d904      	bls.n	8006806 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 80067fc:	4b04      	ldr	r3, [pc, #16]	; (8006810 <SysTick_Handler+0x30>)
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8006802:	f7ff ffb9 	bl	8006778 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006806:	f7fa fce7 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	200000e4 	.word	0x200000e4

08006814 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800681c:	4b11      	ldr	r3, [pc, #68]	; (8006864 <_sbrk+0x50>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d102      	bne.n	800682a <_sbrk+0x16>
		heap_end = &end;
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <_sbrk+0x50>)
 8006826:	4a10      	ldr	r2, [pc, #64]	; (8006868 <_sbrk+0x54>)
 8006828:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800682a:	4b0e      	ldr	r3, [pc, #56]	; (8006864 <_sbrk+0x50>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <_sbrk+0x50>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	18d3      	adds	r3, r2, r3
 8006838:	466a      	mov	r2, sp
 800683a:	4293      	cmp	r3, r2
 800683c:	d907      	bls.n	800684e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800683e:	f000 f8e9 	bl	8006a14 <__errno>
 8006842:	0003      	movs	r3, r0
 8006844:	220c      	movs	r2, #12
 8006846:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006848:	2301      	movs	r3, #1
 800684a:	425b      	negs	r3, r3
 800684c:	e006      	b.n	800685c <_sbrk+0x48>
	}

	heap_end += incr;
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <_sbrk+0x50>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	18d2      	adds	r2, r2, r3
 8006856:	4b03      	ldr	r3, [pc, #12]	; (8006864 <_sbrk+0x50>)
 8006858:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800685a:	68fb      	ldr	r3, [r7, #12]
}
 800685c:	0018      	movs	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	b004      	add	sp, #16
 8006862:	bd80      	pop	{r7, pc}
 8006864:	200000e8 	.word	0x200000e8
 8006868:	20000eb8 	.word	0x20000eb8

0800686c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8006870:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <SystemInit+0x70>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b19      	ldr	r3, [pc, #100]	; (80068dc <SystemInit+0x70>)
 8006876:	2101      	movs	r1, #1
 8006878:	430a      	orrs	r2, r1
 800687a:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 800687c:	4b17      	ldr	r3, [pc, #92]	; (80068dc <SystemInit+0x70>)
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	4b16      	ldr	r3, [pc, #88]	; (80068dc <SystemInit+0x70>)
 8006882:	4917      	ldr	r1, [pc, #92]	; (80068e0 <SystemInit+0x74>)
 8006884:	400a      	ands	r2, r1
 8006886:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8006888:	4b14      	ldr	r3, [pc, #80]	; (80068dc <SystemInit+0x70>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	4b13      	ldr	r3, [pc, #76]	; (80068dc <SystemInit+0x70>)
 800688e:	4915      	ldr	r1, [pc, #84]	; (80068e4 <SystemInit+0x78>)
 8006890:	400a      	ands	r2, r1
 8006892:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006894:	4b11      	ldr	r3, [pc, #68]	; (80068dc <SystemInit+0x70>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <SystemInit+0x70>)
 800689a:	4913      	ldr	r1, [pc, #76]	; (80068e8 <SystemInit+0x7c>)
 800689c:	400a      	ands	r2, r1
 800689e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80068a0:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <SystemInit+0x70>)
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <SystemInit+0x70>)
 80068a6:	4911      	ldr	r1, [pc, #68]	; (80068ec <SystemInit+0x80>)
 80068a8:	400a      	ands	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <SystemInit+0x70>)
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <SystemInit+0x70>)
 80068b2:	210f      	movs	r1, #15
 80068b4:	438a      	bics	r2, r1
 80068b6:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80068b8:	4b08      	ldr	r3, [pc, #32]	; (80068dc <SystemInit+0x70>)
 80068ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068bc:	4b07      	ldr	r3, [pc, #28]	; (80068dc <SystemInit+0x70>)
 80068be:	490c      	ldr	r1, [pc, #48]	; (80068f0 <SystemInit+0x84>)
 80068c0:	400a      	ands	r2, r1
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <SystemInit+0x70>)
 80068c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c8:	4b04      	ldr	r3, [pc, #16]	; (80068dc <SystemInit+0x70>)
 80068ca:	2101      	movs	r1, #1
 80068cc:	438a      	bics	r2, r1
 80068ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <SystemInit+0x70>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	609a      	str	r2, [r3, #8]

}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40021000 	.word	0x40021000
 80068e0:	f8ffb80c 	.word	0xf8ffb80c
 80068e4:	fef6ffff 	.word	0xfef6ffff
 80068e8:	fffbffff 	.word	0xfffbffff
 80068ec:	ffc0ffff 	.word	0xffc0ffff
 80068f0:	fffffeac 	.word	0xfffffeac

080068f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	0002      	movs	r2, r0
 80068fc:	1dfb      	adds	r3, r7, #7
 80068fe:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	 return SD_disk_initialize (pdrv);
 8006900:	1dfb      	adds	r3, r7, #7
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	0018      	movs	r0, r3
 8006906:	f7ff f89b 	bl	8005a40 <SD_disk_initialize>
 800690a:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 800690c:	0018      	movs	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	b002      	add	sp, #8
 8006912:	bd80      	pop	{r7, pc}

08006914 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	0002      	movs	r2, r0
 800691c:	1dfb      	adds	r3, r7, #7
 800691e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8006920:	1dfb      	adds	r3, r7, #7
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	0018      	movs	r0, r3
 8006926:	f7ff f999 	bl	8005c5c <SD_disk_status>
 800692a:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}

08006934 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006934:	b5b0      	push	{r4, r5, r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	250f      	movs	r5, #15
 8006942:	197b      	adds	r3, r7, r5
 8006944:	1c02      	adds	r2, r0, #0
 8006946:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	   return SD_disk_read(pdrv, buff, sector, count);
 8006948:	683c      	ldr	r4, [r7, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	197b      	adds	r3, r7, r5
 8006950:	7818      	ldrb	r0, [r3, #0]
 8006952:	0023      	movs	r3, r4
 8006954:	f7ff f998 	bl	8005c88 <SD_disk_read>
 8006958:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800695a:	0018      	movs	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	b004      	add	sp, #16
 8006960:	bdb0      	pop	{r4, r5, r7, pc}

08006962 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006962:	b5b0      	push	{r4, r5, r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
 800696e:	250f      	movs	r5, #15
 8006970:	197b      	adds	r3, r7, r5
 8006972:	1c02      	adds	r2, r0, #0
 8006974:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	 return SD_disk_write(pdrv, buff, sector, count);
 8006976:	683c      	ldr	r4, [r7, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	197b      	adds	r3, r7, r5
 800697e:	7818      	ldrb	r0, [r3, #0]
 8006980:	0023      	movs	r3, r4
 8006982:	f7ff f9f1 	bl	8005d68 <SD_disk_write>
 8006986:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	b004      	add	sp, #16
 800698e:	bdb0      	pop	{r4, r5, r7, pc}

08006990 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	603a      	str	r2, [r7, #0]
 8006998:	1dfb      	adds	r3, r7, #7
 800699a:	1c02      	adds	r2, r0, #0
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	1dbb      	adds	r3, r7, #6
 80069a0:	1c0a      	adds	r2, r1, #0
 80069a2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	1dbb      	adds	r3, r7, #6
 80069a8:	7819      	ldrb	r1, [r3, #0]
 80069aa:	1dfb      	adds	r3, r7, #7
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	0018      	movs	r0, r3
 80069b0:	f7ff fa62 	bl	8005e78 <SD_disk_ioctl>
 80069b4:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 80069b6:	0018      	movs	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	b002      	add	sp, #8
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80069c0:	480d      	ldr	r0, [pc, #52]	; (80069f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80069c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069c4:	480d      	ldr	r0, [pc, #52]	; (80069fc <LoopForever+0x6>)
  ldr r1, =_edata
 80069c6:	490e      	ldr	r1, [pc, #56]	; (8006a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80069c8:	4a0e      	ldr	r2, [pc, #56]	; (8006a04 <LoopForever+0xe>)
  movs r3, #0
 80069ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069cc:	e002      	b.n	80069d4 <LoopCopyDataInit>

080069ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069d2:	3304      	adds	r3, #4

080069d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069d8:	d3f9      	bcc.n	80069ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069da:	4a0b      	ldr	r2, [pc, #44]	; (8006a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80069dc:	4c0b      	ldr	r4, [pc, #44]	; (8006a0c <LoopForever+0x16>)
  movs r3, #0
 80069de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069e0:	e001      	b.n	80069e6 <LoopFillZerobss>

080069e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069e4:	3204      	adds	r2, #4

080069e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069e8:	d3fb      	bcc.n	80069e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80069ea:	f7ff ff3f 	bl	800686c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80069ee:	f000 f817 	bl	8006a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80069f2:	f7ff fc35 	bl	8006260 <main>

080069f6 <LoopForever>:

LoopForever:
    b LoopForever
 80069f6:	e7fe      	b.n	80069f6 <LoopForever>
  ldr   r0, =_estack
 80069f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80069fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a00:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8006a04:	080074e0 	.word	0x080074e0
  ldr r2, =_sbss
 8006a08:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8006a0c:	20000eb4 	.word	0x20000eb4

08006a10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a10:	e7fe      	b.n	8006a10 <ADC1_COMP_IRQHandler>
	...

08006a14 <__errno>:
 8006a14:	4b01      	ldr	r3, [pc, #4]	; (8006a1c <__errno+0x8>)
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	4770      	bx	lr
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	2000001c 	.word	0x2000001c

08006a20 <__libc_init_array>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	2600      	movs	r6, #0
 8006a24:	4d0c      	ldr	r5, [pc, #48]	; (8006a58 <__libc_init_array+0x38>)
 8006a26:	4c0d      	ldr	r4, [pc, #52]	; (8006a5c <__libc_init_array+0x3c>)
 8006a28:	1b64      	subs	r4, r4, r5
 8006a2a:	10a4      	asrs	r4, r4, #2
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	d109      	bne.n	8006a44 <__libc_init_array+0x24>
 8006a30:	2600      	movs	r6, #0
 8006a32:	f000 fc29 	bl	8007288 <_init>
 8006a36:	4d0a      	ldr	r5, [pc, #40]	; (8006a60 <__libc_init_array+0x40>)
 8006a38:	4c0a      	ldr	r4, [pc, #40]	; (8006a64 <__libc_init_array+0x44>)
 8006a3a:	1b64      	subs	r4, r4, r5
 8006a3c:	10a4      	asrs	r4, r4, #2
 8006a3e:	42a6      	cmp	r6, r4
 8006a40:	d105      	bne.n	8006a4e <__libc_init_array+0x2e>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	00b3      	lsls	r3, r6, #2
 8006a46:	58eb      	ldr	r3, [r5, r3]
 8006a48:	4798      	blx	r3
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7ee      	b.n	8006a2c <__libc_init_array+0xc>
 8006a4e:	00b3      	lsls	r3, r6, #2
 8006a50:	58eb      	ldr	r3, [r5, r3]
 8006a52:	4798      	blx	r3
 8006a54:	3601      	adds	r6, #1
 8006a56:	e7f2      	b.n	8006a3e <__libc_init_array+0x1e>
 8006a58:	080074d8 	.word	0x080074d8
 8006a5c:	080074d8 	.word	0x080074d8
 8006a60:	080074d8 	.word	0x080074d8
 8006a64:	080074dc 	.word	0x080074dc

08006a68 <memset>:
 8006a68:	0003      	movs	r3, r0
 8006a6a:	1812      	adds	r2, r2, r0
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d100      	bne.n	8006a72 <memset+0xa>
 8006a70:	4770      	bx	lr
 8006a72:	7019      	strb	r1, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	e7f9      	b.n	8006a6c <memset+0x4>

08006a78 <siprintf>:
 8006a78:	b40e      	push	{r1, r2, r3}
 8006a7a:	b500      	push	{lr}
 8006a7c:	490b      	ldr	r1, [pc, #44]	; (8006aac <siprintf+0x34>)
 8006a7e:	b09c      	sub	sp, #112	; 0x70
 8006a80:	ab1d      	add	r3, sp, #116	; 0x74
 8006a82:	9002      	str	r0, [sp, #8]
 8006a84:	9006      	str	r0, [sp, #24]
 8006a86:	9107      	str	r1, [sp, #28]
 8006a88:	9104      	str	r1, [sp, #16]
 8006a8a:	4809      	ldr	r0, [pc, #36]	; (8006ab0 <siprintf+0x38>)
 8006a8c:	4909      	ldr	r1, [pc, #36]	; (8006ab4 <siprintf+0x3c>)
 8006a8e:	cb04      	ldmia	r3!, {r2}
 8006a90:	9105      	str	r1, [sp, #20]
 8006a92:	6800      	ldr	r0, [r0, #0]
 8006a94:	a902      	add	r1, sp, #8
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	f000 f870 	bl	8006b7c <_svfiprintf_r>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9a02      	ldr	r2, [sp, #8]
 8006aa0:	7013      	strb	r3, [r2, #0]
 8006aa2:	b01c      	add	sp, #112	; 0x70
 8006aa4:	bc08      	pop	{r3}
 8006aa6:	b003      	add	sp, #12
 8006aa8:	4718      	bx	r3
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	7fffffff 	.word	0x7fffffff
 8006ab0:	2000001c 	.word	0x2000001c
 8006ab4:	ffff0208 	.word	0xffff0208

08006ab8 <__ssputs_r>:
 8006ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aba:	688e      	ldr	r6, [r1, #8]
 8006abc:	b085      	sub	sp, #20
 8006abe:	0007      	movs	r7, r0
 8006ac0:	000c      	movs	r4, r1
 8006ac2:	9203      	str	r2, [sp, #12]
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	429e      	cmp	r6, r3
 8006ac8:	d83c      	bhi.n	8006b44 <__ssputs_r+0x8c>
 8006aca:	2390      	movs	r3, #144	; 0x90
 8006acc:	898a      	ldrh	r2, [r1, #12]
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	421a      	tst	r2, r3
 8006ad2:	d034      	beq.n	8006b3e <__ssputs_r+0x86>
 8006ad4:	2503      	movs	r5, #3
 8006ad6:	6909      	ldr	r1, [r1, #16]
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	9302      	str	r3, [sp, #8]
 8006ade:	6963      	ldr	r3, [r4, #20]
 8006ae0:	9802      	ldr	r0, [sp, #8]
 8006ae2:	435d      	muls	r5, r3
 8006ae4:	0feb      	lsrs	r3, r5, #31
 8006ae6:	195d      	adds	r5, r3, r5
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	106d      	asrs	r5, r5, #1
 8006aec:	3301      	adds	r3, #1
 8006aee:	181b      	adds	r3, r3, r0
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	d900      	bls.n	8006af6 <__ssputs_r+0x3e>
 8006af4:	001d      	movs	r5, r3
 8006af6:	0553      	lsls	r3, r2, #21
 8006af8:	d532      	bpl.n	8006b60 <__ssputs_r+0xa8>
 8006afa:	0029      	movs	r1, r5
 8006afc:	0038      	movs	r0, r7
 8006afe:	f000 fb23 	bl	8007148 <_malloc_r>
 8006b02:	1e06      	subs	r6, r0, #0
 8006b04:	d109      	bne.n	8006b1a <__ssputs_r+0x62>
 8006b06:	230c      	movs	r3, #12
 8006b08:	603b      	str	r3, [r7, #0]
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	89a2      	ldrh	r2, [r4, #12]
 8006b10:	4240      	negs	r0, r0
 8006b12:	4313      	orrs	r3, r2
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	b005      	add	sp, #20
 8006b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b1a:	9a02      	ldr	r2, [sp, #8]
 8006b1c:	6921      	ldr	r1, [r4, #16]
 8006b1e:	f000 faac 	bl	800707a <memcpy>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <__ssputs_r+0xc0>)
 8006b26:	401a      	ands	r2, r3
 8006b28:	2380      	movs	r3, #128	; 0x80
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	81a3      	strh	r3, [r4, #12]
 8006b2e:	9b02      	ldr	r3, [sp, #8]
 8006b30:	6126      	str	r6, [r4, #16]
 8006b32:	18f6      	adds	r6, r6, r3
 8006b34:	6026      	str	r6, [r4, #0]
 8006b36:	6165      	str	r5, [r4, #20]
 8006b38:	9e01      	ldr	r6, [sp, #4]
 8006b3a:	1aed      	subs	r5, r5, r3
 8006b3c:	60a5      	str	r5, [r4, #8]
 8006b3e:	9b01      	ldr	r3, [sp, #4]
 8006b40:	429e      	cmp	r6, r3
 8006b42:	d900      	bls.n	8006b46 <__ssputs_r+0x8e>
 8006b44:	9e01      	ldr	r6, [sp, #4]
 8006b46:	0032      	movs	r2, r6
 8006b48:	9903      	ldr	r1, [sp, #12]
 8006b4a:	6820      	ldr	r0, [r4, #0]
 8006b4c:	f000 fa9e 	bl	800708c <memmove>
 8006b50:	68a3      	ldr	r3, [r4, #8]
 8006b52:	2000      	movs	r0, #0
 8006b54:	1b9b      	subs	r3, r3, r6
 8006b56:	60a3      	str	r3, [r4, #8]
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	199e      	adds	r6, r3, r6
 8006b5c:	6026      	str	r6, [r4, #0]
 8006b5e:	e7da      	b.n	8006b16 <__ssputs_r+0x5e>
 8006b60:	002a      	movs	r2, r5
 8006b62:	0038      	movs	r0, r7
 8006b64:	f000 fb4e 	bl	8007204 <_realloc_r>
 8006b68:	1e06      	subs	r6, r0, #0
 8006b6a:	d1e0      	bne.n	8006b2e <__ssputs_r+0x76>
 8006b6c:	6921      	ldr	r1, [r4, #16]
 8006b6e:	0038      	movs	r0, r7
 8006b70:	f000 faa0 	bl	80070b4 <_free_r>
 8006b74:	e7c7      	b.n	8006b06 <__ssputs_r+0x4e>
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	fffffb7f 	.word	0xfffffb7f

08006b7c <_svfiprintf_r>:
 8006b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7e:	b0a1      	sub	sp, #132	; 0x84
 8006b80:	9003      	str	r0, [sp, #12]
 8006b82:	001d      	movs	r5, r3
 8006b84:	898b      	ldrh	r3, [r1, #12]
 8006b86:	000f      	movs	r7, r1
 8006b88:	0016      	movs	r6, r2
 8006b8a:	061b      	lsls	r3, r3, #24
 8006b8c:	d511      	bpl.n	8006bb2 <_svfiprintf_r+0x36>
 8006b8e:	690b      	ldr	r3, [r1, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10e      	bne.n	8006bb2 <_svfiprintf_r+0x36>
 8006b94:	2140      	movs	r1, #64	; 0x40
 8006b96:	f000 fad7 	bl	8007148 <_malloc_r>
 8006b9a:	6038      	str	r0, [r7, #0]
 8006b9c:	6138      	str	r0, [r7, #16]
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d105      	bne.n	8006bae <_svfiprintf_r+0x32>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	9a03      	ldr	r2, [sp, #12]
 8006ba6:	3801      	subs	r0, #1
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	b021      	add	sp, #132	; 0x84
 8006bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bae:	2340      	movs	r3, #64	; 0x40
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	ac08      	add	r4, sp, #32
 8006bb6:	6163      	str	r3, [r4, #20]
 8006bb8:	3320      	adds	r3, #32
 8006bba:	7663      	strb	r3, [r4, #25]
 8006bbc:	3310      	adds	r3, #16
 8006bbe:	76a3      	strb	r3, [r4, #26]
 8006bc0:	9507      	str	r5, [sp, #28]
 8006bc2:	0035      	movs	r5, r6
 8006bc4:	782b      	ldrb	r3, [r5, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <_svfiprintf_r+0x52>
 8006bca:	2b25      	cmp	r3, #37	; 0x25
 8006bcc:	d146      	bne.n	8006c5c <_svfiprintf_r+0xe0>
 8006bce:	1bab      	subs	r3, r5, r6
 8006bd0:	9305      	str	r3, [sp, #20]
 8006bd2:	d00c      	beq.n	8006bee <_svfiprintf_r+0x72>
 8006bd4:	0032      	movs	r2, r6
 8006bd6:	0039      	movs	r1, r7
 8006bd8:	9803      	ldr	r0, [sp, #12]
 8006bda:	f7ff ff6d 	bl	8006ab8 <__ssputs_r>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d100      	bne.n	8006be4 <_svfiprintf_r+0x68>
 8006be2:	e0ae      	b.n	8006d42 <_svfiprintf_r+0x1c6>
 8006be4:	6962      	ldr	r2, [r4, #20]
 8006be6:	9b05      	ldr	r3, [sp, #20]
 8006be8:	4694      	mov	ip, r2
 8006bea:	4463      	add	r3, ip
 8006bec:	6163      	str	r3, [r4, #20]
 8006bee:	782b      	ldrb	r3, [r5, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d100      	bne.n	8006bf6 <_svfiprintf_r+0x7a>
 8006bf4:	e0a5      	b.n	8006d42 <_svfiprintf_r+0x1c6>
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4252      	negs	r2, r2
 8006bfc:	6062      	str	r2, [r4, #4]
 8006bfe:	a904      	add	r1, sp, #16
 8006c00:	3254      	adds	r2, #84	; 0x54
 8006c02:	1852      	adds	r2, r2, r1
 8006c04:	1c6e      	adds	r6, r5, #1
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	60e3      	str	r3, [r4, #12]
 8006c0a:	60a3      	str	r3, [r4, #8]
 8006c0c:	7013      	strb	r3, [r2, #0]
 8006c0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c10:	7831      	ldrb	r1, [r6, #0]
 8006c12:	2205      	movs	r2, #5
 8006c14:	4853      	ldr	r0, [pc, #332]	; (8006d64 <_svfiprintf_r+0x1e8>)
 8006c16:	f000 fa25 	bl	8007064 <memchr>
 8006c1a:	1c75      	adds	r5, r6, #1
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d11f      	bne.n	8006c60 <_svfiprintf_r+0xe4>
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	06d3      	lsls	r3, r2, #27
 8006c24:	d504      	bpl.n	8006c30 <_svfiprintf_r+0xb4>
 8006c26:	2353      	movs	r3, #83	; 0x53
 8006c28:	a904      	add	r1, sp, #16
 8006c2a:	185b      	adds	r3, r3, r1
 8006c2c:	2120      	movs	r1, #32
 8006c2e:	7019      	strb	r1, [r3, #0]
 8006c30:	0713      	lsls	r3, r2, #28
 8006c32:	d504      	bpl.n	8006c3e <_svfiprintf_r+0xc2>
 8006c34:	2353      	movs	r3, #83	; 0x53
 8006c36:	a904      	add	r1, sp, #16
 8006c38:	185b      	adds	r3, r3, r1
 8006c3a:	212b      	movs	r1, #43	; 0x2b
 8006c3c:	7019      	strb	r1, [r3, #0]
 8006c3e:	7833      	ldrb	r3, [r6, #0]
 8006c40:	2b2a      	cmp	r3, #42	; 0x2a
 8006c42:	d016      	beq.n	8006c72 <_svfiprintf_r+0xf6>
 8006c44:	0035      	movs	r5, r6
 8006c46:	2100      	movs	r1, #0
 8006c48:	200a      	movs	r0, #10
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	782a      	ldrb	r2, [r5, #0]
 8006c4e:	1c6e      	adds	r6, r5, #1
 8006c50:	3a30      	subs	r2, #48	; 0x30
 8006c52:	2a09      	cmp	r2, #9
 8006c54:	d94e      	bls.n	8006cf4 <_svfiprintf_r+0x178>
 8006c56:	2900      	cmp	r1, #0
 8006c58:	d018      	beq.n	8006c8c <_svfiprintf_r+0x110>
 8006c5a:	e010      	b.n	8006c7e <_svfiprintf_r+0x102>
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	e7b1      	b.n	8006bc4 <_svfiprintf_r+0x48>
 8006c60:	4b40      	ldr	r3, [pc, #256]	; (8006d64 <_svfiprintf_r+0x1e8>)
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	1ac0      	subs	r0, r0, r3
 8006c66:	2301      	movs	r3, #1
 8006c68:	4083      	lsls	r3, r0
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	002e      	movs	r6, r5
 8006c70:	e7ce      	b.n	8006c10 <_svfiprintf_r+0x94>
 8006c72:	9b07      	ldr	r3, [sp, #28]
 8006c74:	1d19      	adds	r1, r3, #4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	9107      	str	r1, [sp, #28]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	db01      	blt.n	8006c82 <_svfiprintf_r+0x106>
 8006c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c80:	e004      	b.n	8006c8c <_svfiprintf_r+0x110>
 8006c82:	425b      	negs	r3, r3
 8006c84:	60e3      	str	r3, [r4, #12]
 8006c86:	2302      	movs	r3, #2
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	6023      	str	r3, [r4, #0]
 8006c8c:	782b      	ldrb	r3, [r5, #0]
 8006c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c90:	d10a      	bne.n	8006ca8 <_svfiprintf_r+0x12c>
 8006c92:	786b      	ldrb	r3, [r5, #1]
 8006c94:	2b2a      	cmp	r3, #42	; 0x2a
 8006c96:	d135      	bne.n	8006d04 <_svfiprintf_r+0x188>
 8006c98:	9b07      	ldr	r3, [sp, #28]
 8006c9a:	3502      	adds	r5, #2
 8006c9c:	1d1a      	adds	r2, r3, #4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	9207      	str	r2, [sp, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	db2b      	blt.n	8006cfe <_svfiprintf_r+0x182>
 8006ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca8:	4e2f      	ldr	r6, [pc, #188]	; (8006d68 <_svfiprintf_r+0x1ec>)
 8006caa:	7829      	ldrb	r1, [r5, #0]
 8006cac:	2203      	movs	r2, #3
 8006cae:	0030      	movs	r0, r6
 8006cb0:	f000 f9d8 	bl	8007064 <memchr>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d006      	beq.n	8006cc6 <_svfiprintf_r+0x14a>
 8006cb8:	2340      	movs	r3, #64	; 0x40
 8006cba:	1b80      	subs	r0, r0, r6
 8006cbc:	4083      	lsls	r3, r0
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	3501      	adds	r5, #1
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	7829      	ldrb	r1, [r5, #0]
 8006cc8:	2206      	movs	r2, #6
 8006cca:	4828      	ldr	r0, [pc, #160]	; (8006d6c <_svfiprintf_r+0x1f0>)
 8006ccc:	1c6e      	adds	r6, r5, #1
 8006cce:	7621      	strb	r1, [r4, #24]
 8006cd0:	f000 f9c8 	bl	8007064 <memchr>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d03c      	beq.n	8006d52 <_svfiprintf_r+0x1d6>
 8006cd8:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <_svfiprintf_r+0x1f4>)
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d125      	bne.n	8006d2a <_svfiprintf_r+0x1ae>
 8006cde:	2207      	movs	r2, #7
 8006ce0:	9b07      	ldr	r3, [sp, #28]
 8006ce2:	3307      	adds	r3, #7
 8006ce4:	4393      	bics	r3, r2
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	9307      	str	r3, [sp, #28]
 8006cea:	6963      	ldr	r3, [r4, #20]
 8006cec:	9a04      	ldr	r2, [sp, #16]
 8006cee:	189b      	adds	r3, r3, r2
 8006cf0:	6163      	str	r3, [r4, #20]
 8006cf2:	e766      	b.n	8006bc2 <_svfiprintf_r+0x46>
 8006cf4:	4343      	muls	r3, r0
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	189b      	adds	r3, r3, r2
 8006cfa:	0035      	movs	r5, r6
 8006cfc:	e7a6      	b.n	8006c4c <_svfiprintf_r+0xd0>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	425b      	negs	r3, r3
 8006d02:	e7d0      	b.n	8006ca6 <_svfiprintf_r+0x12a>
 8006d04:	2300      	movs	r3, #0
 8006d06:	200a      	movs	r0, #10
 8006d08:	001a      	movs	r2, r3
 8006d0a:	3501      	adds	r5, #1
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	7829      	ldrb	r1, [r5, #0]
 8006d10:	1c6e      	adds	r6, r5, #1
 8006d12:	3930      	subs	r1, #48	; 0x30
 8006d14:	2909      	cmp	r1, #9
 8006d16:	d903      	bls.n	8006d20 <_svfiprintf_r+0x1a4>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0c5      	beq.n	8006ca8 <_svfiprintf_r+0x12c>
 8006d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d1e:	e7c3      	b.n	8006ca8 <_svfiprintf_r+0x12c>
 8006d20:	4342      	muls	r2, r0
 8006d22:	2301      	movs	r3, #1
 8006d24:	1852      	adds	r2, r2, r1
 8006d26:	0035      	movs	r5, r6
 8006d28:	e7f1      	b.n	8006d0e <_svfiprintf_r+0x192>
 8006d2a:	ab07      	add	r3, sp, #28
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	003a      	movs	r2, r7
 8006d30:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <_svfiprintf_r+0x1f8>)
 8006d32:	0021      	movs	r1, r4
 8006d34:	9803      	ldr	r0, [sp, #12]
 8006d36:	e000      	b.n	8006d3a <_svfiprintf_r+0x1be>
 8006d38:	bf00      	nop
 8006d3a:	9004      	str	r0, [sp, #16]
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	d1d3      	bne.n	8006cea <_svfiprintf_r+0x16e>
 8006d42:	89bb      	ldrh	r3, [r7, #12]
 8006d44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006d46:	065b      	lsls	r3, r3, #25
 8006d48:	d400      	bmi.n	8006d4c <_svfiprintf_r+0x1d0>
 8006d4a:	e72e      	b.n	8006baa <_svfiprintf_r+0x2e>
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	4240      	negs	r0, r0
 8006d50:	e72b      	b.n	8006baa <_svfiprintf_r+0x2e>
 8006d52:	ab07      	add	r3, sp, #28
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	003a      	movs	r2, r7
 8006d58:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <_svfiprintf_r+0x1f8>)
 8006d5a:	0021      	movs	r1, r4
 8006d5c:	9803      	ldr	r0, [sp, #12]
 8006d5e:	f000 f879 	bl	8006e54 <_printf_i>
 8006d62:	e7ea      	b.n	8006d3a <_svfiprintf_r+0x1be>
 8006d64:	080074a4 	.word	0x080074a4
 8006d68:	080074aa 	.word	0x080074aa
 8006d6c:	080074ae 	.word	0x080074ae
 8006d70:	00000000 	.word	0x00000000
 8006d74:	08006ab9 	.word	0x08006ab9

08006d78 <_printf_common>:
 8006d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d7a:	0015      	movs	r5, r2
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	688a      	ldr	r2, [r1, #8]
 8006d80:	690b      	ldr	r3, [r1, #16]
 8006d82:	9000      	str	r0, [sp, #0]
 8006d84:	000c      	movs	r4, r1
 8006d86:	4293      	cmp	r3, r2
 8006d88:	da00      	bge.n	8006d8c <_printf_common+0x14>
 8006d8a:	0013      	movs	r3, r2
 8006d8c:	0022      	movs	r2, r4
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	3243      	adds	r2, #67	; 0x43
 8006d92:	7812      	ldrb	r2, [r2, #0]
 8006d94:	2a00      	cmp	r2, #0
 8006d96:	d001      	beq.n	8006d9c <_printf_common+0x24>
 8006d98:	3301      	adds	r3, #1
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	069b      	lsls	r3, r3, #26
 8006da0:	d502      	bpl.n	8006da8 <_printf_common+0x30>
 8006da2:	682b      	ldr	r3, [r5, #0]
 8006da4:	3302      	adds	r3, #2
 8006da6:	602b      	str	r3, [r5, #0]
 8006da8:	2706      	movs	r7, #6
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	401f      	ands	r7, r3
 8006dae:	d027      	beq.n	8006e00 <_printf_common+0x88>
 8006db0:	0023      	movs	r3, r4
 8006db2:	3343      	adds	r3, #67	; 0x43
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	1e5a      	subs	r2, r3, #1
 8006db8:	4193      	sbcs	r3, r2
 8006dba:	6822      	ldr	r2, [r4, #0]
 8006dbc:	0692      	lsls	r2, r2, #26
 8006dbe:	d430      	bmi.n	8006e22 <_printf_common+0xaa>
 8006dc0:	0022      	movs	r2, r4
 8006dc2:	9901      	ldr	r1, [sp, #4]
 8006dc4:	3243      	adds	r2, #67	; 0x43
 8006dc6:	9800      	ldr	r0, [sp, #0]
 8006dc8:	9e08      	ldr	r6, [sp, #32]
 8006dca:	47b0      	blx	r6
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d025      	beq.n	8006e1c <_printf_common+0xa4>
 8006dd0:	2306      	movs	r3, #6
 8006dd2:	6820      	ldr	r0, [r4, #0]
 8006dd4:	682a      	ldr	r2, [r5, #0]
 8006dd6:	68e1      	ldr	r1, [r4, #12]
 8006dd8:	4003      	ands	r3, r0
 8006dda:	2500      	movs	r5, #0
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d103      	bne.n	8006de8 <_printf_common+0x70>
 8006de0:	1a8d      	subs	r5, r1, r2
 8006de2:	43eb      	mvns	r3, r5
 8006de4:	17db      	asrs	r3, r3, #31
 8006de6:	401d      	ands	r5, r3
 8006de8:	68a3      	ldr	r3, [r4, #8]
 8006dea:	6922      	ldr	r2, [r4, #16]
 8006dec:	4293      	cmp	r3, r2
 8006dee:	dd01      	ble.n	8006df4 <_printf_common+0x7c>
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	18ed      	adds	r5, r5, r3
 8006df4:	2700      	movs	r7, #0
 8006df6:	42bd      	cmp	r5, r7
 8006df8:	d120      	bne.n	8006e3c <_printf_common+0xc4>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e010      	b.n	8006e20 <_printf_common+0xa8>
 8006dfe:	3701      	adds	r7, #1
 8006e00:	68e3      	ldr	r3, [r4, #12]
 8006e02:	682a      	ldr	r2, [r5, #0]
 8006e04:	1a9b      	subs	r3, r3, r2
 8006e06:	42bb      	cmp	r3, r7
 8006e08:	ddd2      	ble.n	8006db0 <_printf_common+0x38>
 8006e0a:	0022      	movs	r2, r4
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	3219      	adds	r2, #25
 8006e10:	9901      	ldr	r1, [sp, #4]
 8006e12:	9800      	ldr	r0, [sp, #0]
 8006e14:	9e08      	ldr	r6, [sp, #32]
 8006e16:	47b0      	blx	r6
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d1f0      	bne.n	8006dfe <_printf_common+0x86>
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	4240      	negs	r0, r0
 8006e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e22:	2030      	movs	r0, #48	; 0x30
 8006e24:	18e1      	adds	r1, r4, r3
 8006e26:	3143      	adds	r1, #67	; 0x43
 8006e28:	7008      	strb	r0, [r1, #0]
 8006e2a:	0021      	movs	r1, r4
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	3145      	adds	r1, #69	; 0x45
 8006e30:	7809      	ldrb	r1, [r1, #0]
 8006e32:	18a2      	adds	r2, r4, r2
 8006e34:	3243      	adds	r2, #67	; 0x43
 8006e36:	3302      	adds	r3, #2
 8006e38:	7011      	strb	r1, [r2, #0]
 8006e3a:	e7c1      	b.n	8006dc0 <_printf_common+0x48>
 8006e3c:	0022      	movs	r2, r4
 8006e3e:	2301      	movs	r3, #1
 8006e40:	321a      	adds	r2, #26
 8006e42:	9901      	ldr	r1, [sp, #4]
 8006e44:	9800      	ldr	r0, [sp, #0]
 8006e46:	9e08      	ldr	r6, [sp, #32]
 8006e48:	47b0      	blx	r6
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	d0e6      	beq.n	8006e1c <_printf_common+0xa4>
 8006e4e:	3701      	adds	r7, #1
 8006e50:	e7d1      	b.n	8006df6 <_printf_common+0x7e>
	...

08006e54 <_printf_i>:
 8006e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e56:	b089      	sub	sp, #36	; 0x24
 8006e58:	9204      	str	r2, [sp, #16]
 8006e5a:	000a      	movs	r2, r1
 8006e5c:	3243      	adds	r2, #67	; 0x43
 8006e5e:	9305      	str	r3, [sp, #20]
 8006e60:	9003      	str	r0, [sp, #12]
 8006e62:	9202      	str	r2, [sp, #8]
 8006e64:	7e0a      	ldrb	r2, [r1, #24]
 8006e66:	000c      	movs	r4, r1
 8006e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e6a:	2a6e      	cmp	r2, #110	; 0x6e
 8006e6c:	d100      	bne.n	8006e70 <_printf_i+0x1c>
 8006e6e:	e086      	b.n	8006f7e <_printf_i+0x12a>
 8006e70:	d81f      	bhi.n	8006eb2 <_printf_i+0x5e>
 8006e72:	2a63      	cmp	r2, #99	; 0x63
 8006e74:	d033      	beq.n	8006ede <_printf_i+0x8a>
 8006e76:	d808      	bhi.n	8006e8a <_printf_i+0x36>
 8006e78:	2a00      	cmp	r2, #0
 8006e7a:	d100      	bne.n	8006e7e <_printf_i+0x2a>
 8006e7c:	e08c      	b.n	8006f98 <_printf_i+0x144>
 8006e7e:	2a58      	cmp	r2, #88	; 0x58
 8006e80:	d04d      	beq.n	8006f1e <_printf_i+0xca>
 8006e82:	0025      	movs	r5, r4
 8006e84:	3542      	adds	r5, #66	; 0x42
 8006e86:	702a      	strb	r2, [r5, #0]
 8006e88:	e030      	b.n	8006eec <_printf_i+0x98>
 8006e8a:	2a64      	cmp	r2, #100	; 0x64
 8006e8c:	d001      	beq.n	8006e92 <_printf_i+0x3e>
 8006e8e:	2a69      	cmp	r2, #105	; 0x69
 8006e90:	d1f7      	bne.n	8006e82 <_printf_i+0x2e>
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6825      	ldr	r5, [r4, #0]
 8006e96:	1d0a      	adds	r2, r1, #4
 8006e98:	0628      	lsls	r0, r5, #24
 8006e9a:	d529      	bpl.n	8006ef0 <_printf_i+0x9c>
 8006e9c:	6808      	ldr	r0, [r1, #0]
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	da03      	bge.n	8006eac <_printf_i+0x58>
 8006ea4:	232d      	movs	r3, #45	; 0x2d
 8006ea6:	9a02      	ldr	r2, [sp, #8]
 8006ea8:	4240      	negs	r0, r0
 8006eaa:	7013      	strb	r3, [r2, #0]
 8006eac:	4e6b      	ldr	r6, [pc, #428]	; (800705c <_printf_i+0x208>)
 8006eae:	270a      	movs	r7, #10
 8006eb0:	e04f      	b.n	8006f52 <_printf_i+0xfe>
 8006eb2:	2a73      	cmp	r2, #115	; 0x73
 8006eb4:	d074      	beq.n	8006fa0 <_printf_i+0x14c>
 8006eb6:	d808      	bhi.n	8006eca <_printf_i+0x76>
 8006eb8:	2a6f      	cmp	r2, #111	; 0x6f
 8006eba:	d01f      	beq.n	8006efc <_printf_i+0xa8>
 8006ebc:	2a70      	cmp	r2, #112	; 0x70
 8006ebe:	d1e0      	bne.n	8006e82 <_printf_i+0x2e>
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	6809      	ldr	r1, [r1, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	6022      	str	r2, [r4, #0]
 8006ec8:	e003      	b.n	8006ed2 <_printf_i+0x7e>
 8006eca:	2a75      	cmp	r2, #117	; 0x75
 8006ecc:	d016      	beq.n	8006efc <_printf_i+0xa8>
 8006ece:	2a78      	cmp	r2, #120	; 0x78
 8006ed0:	d1d7      	bne.n	8006e82 <_printf_i+0x2e>
 8006ed2:	0022      	movs	r2, r4
 8006ed4:	2178      	movs	r1, #120	; 0x78
 8006ed6:	3245      	adds	r2, #69	; 0x45
 8006ed8:	7011      	strb	r1, [r2, #0]
 8006eda:	4e61      	ldr	r6, [pc, #388]	; (8007060 <_printf_i+0x20c>)
 8006edc:	e022      	b.n	8006f24 <_printf_i+0xd0>
 8006ede:	0025      	movs	r5, r4
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	3542      	adds	r5, #66	; 0x42
 8006ee4:	1d11      	adds	r1, r2, #4
 8006ee6:	6019      	str	r1, [r3, #0]
 8006ee8:	6813      	ldr	r3, [r2, #0]
 8006eea:	702b      	strb	r3, [r5, #0]
 8006eec:	2301      	movs	r3, #1
 8006eee:	e065      	b.n	8006fbc <_printf_i+0x168>
 8006ef0:	6808      	ldr	r0, [r1, #0]
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	0669      	lsls	r1, r5, #25
 8006ef6:	d5d3      	bpl.n	8006ea0 <_printf_i+0x4c>
 8006ef8:	b200      	sxth	r0, r0
 8006efa:	e7d1      	b.n	8006ea0 <_printf_i+0x4c>
 8006efc:	6819      	ldr	r1, [r3, #0]
 8006efe:	6825      	ldr	r5, [r4, #0]
 8006f00:	1d08      	adds	r0, r1, #4
 8006f02:	6018      	str	r0, [r3, #0]
 8006f04:	6808      	ldr	r0, [r1, #0]
 8006f06:	062e      	lsls	r6, r5, #24
 8006f08:	d505      	bpl.n	8006f16 <_printf_i+0xc2>
 8006f0a:	4e54      	ldr	r6, [pc, #336]	; (800705c <_printf_i+0x208>)
 8006f0c:	2708      	movs	r7, #8
 8006f0e:	2a6f      	cmp	r2, #111	; 0x6f
 8006f10:	d01b      	beq.n	8006f4a <_printf_i+0xf6>
 8006f12:	270a      	movs	r7, #10
 8006f14:	e019      	b.n	8006f4a <_printf_i+0xf6>
 8006f16:	066d      	lsls	r5, r5, #25
 8006f18:	d5f7      	bpl.n	8006f0a <_printf_i+0xb6>
 8006f1a:	b280      	uxth	r0, r0
 8006f1c:	e7f5      	b.n	8006f0a <_printf_i+0xb6>
 8006f1e:	3145      	adds	r1, #69	; 0x45
 8006f20:	4e4e      	ldr	r6, [pc, #312]	; (800705c <_printf_i+0x208>)
 8006f22:	700a      	strb	r2, [r1, #0]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	1d01      	adds	r1, r0, #4
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	6019      	str	r1, [r3, #0]
 8006f2e:	0615      	lsls	r5, r2, #24
 8006f30:	d521      	bpl.n	8006f76 <_printf_i+0x122>
 8006f32:	07d3      	lsls	r3, r2, #31
 8006f34:	d502      	bpl.n	8006f3c <_printf_i+0xe8>
 8006f36:	2320      	movs	r3, #32
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	6022      	str	r2, [r4, #0]
 8006f3c:	2710      	movs	r7, #16
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d103      	bne.n	8006f4a <_printf_i+0xf6>
 8006f42:	2320      	movs	r3, #32
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	439a      	bics	r2, r3
 8006f48:	6022      	str	r2, [r4, #0]
 8006f4a:	0023      	movs	r3, r4
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	3343      	adds	r3, #67	; 0x43
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	60a3      	str	r3, [r4, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	db58      	blt.n	800700c <_printf_i+0x1b8>
 8006f5a:	2204      	movs	r2, #4
 8006f5c:	6821      	ldr	r1, [r4, #0]
 8006f5e:	4391      	bics	r1, r2
 8006f60:	6021      	str	r1, [r4, #0]
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d154      	bne.n	8007010 <_printf_i+0x1bc>
 8006f66:	9d02      	ldr	r5, [sp, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d05a      	beq.n	8007022 <_printf_i+0x1ce>
 8006f6c:	0025      	movs	r5, r4
 8006f6e:	7833      	ldrb	r3, [r6, #0]
 8006f70:	3542      	adds	r5, #66	; 0x42
 8006f72:	702b      	strb	r3, [r5, #0]
 8006f74:	e055      	b.n	8007022 <_printf_i+0x1ce>
 8006f76:	0655      	lsls	r5, r2, #25
 8006f78:	d5db      	bpl.n	8006f32 <_printf_i+0xde>
 8006f7a:	b280      	uxth	r0, r0
 8006f7c:	e7d9      	b.n	8006f32 <_printf_i+0xde>
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	680d      	ldr	r5, [r1, #0]
 8006f82:	1d10      	adds	r0, r2, #4
 8006f84:	6949      	ldr	r1, [r1, #20]
 8006f86:	6018      	str	r0, [r3, #0]
 8006f88:	6813      	ldr	r3, [r2, #0]
 8006f8a:	062e      	lsls	r6, r5, #24
 8006f8c:	d501      	bpl.n	8006f92 <_printf_i+0x13e>
 8006f8e:	6019      	str	r1, [r3, #0]
 8006f90:	e002      	b.n	8006f98 <_printf_i+0x144>
 8006f92:	066d      	lsls	r5, r5, #25
 8006f94:	d5fb      	bpl.n	8006f8e <_printf_i+0x13a>
 8006f96:	8019      	strh	r1, [r3, #0]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9d02      	ldr	r5, [sp, #8]
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	e04f      	b.n	8007040 <_printf_i+0x1ec>
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	1d11      	adds	r1, r2, #4
 8006fa4:	6019      	str	r1, [r3, #0]
 8006fa6:	6815      	ldr	r5, [r2, #0]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	0028      	movs	r0, r5
 8006fae:	f000 f859 	bl	8007064 <memchr>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d001      	beq.n	8006fba <_printf_i+0x166>
 8006fb6:	1b40      	subs	r0, r0, r5
 8006fb8:	6060      	str	r0, [r4, #4]
 8006fba:	6863      	ldr	r3, [r4, #4]
 8006fbc:	6123      	str	r3, [r4, #16]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9a02      	ldr	r2, [sp, #8]
 8006fc2:	7013      	strb	r3, [r2, #0]
 8006fc4:	e03c      	b.n	8007040 <_printf_i+0x1ec>
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	002a      	movs	r2, r5
 8006fca:	9904      	ldr	r1, [sp, #16]
 8006fcc:	9803      	ldr	r0, [sp, #12]
 8006fce:	9d05      	ldr	r5, [sp, #20]
 8006fd0:	47a8      	blx	r5
 8006fd2:	1c43      	adds	r3, r0, #1
 8006fd4:	d03e      	beq.n	8007054 <_printf_i+0x200>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	079b      	lsls	r3, r3, #30
 8006fda:	d415      	bmi.n	8007008 <_printf_i+0x1b4>
 8006fdc:	9b07      	ldr	r3, [sp, #28]
 8006fde:	68e0      	ldr	r0, [r4, #12]
 8006fe0:	4298      	cmp	r0, r3
 8006fe2:	da39      	bge.n	8007058 <_printf_i+0x204>
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	e037      	b.n	8007058 <_printf_i+0x204>
 8006fe8:	0022      	movs	r2, r4
 8006fea:	2301      	movs	r3, #1
 8006fec:	3219      	adds	r2, #25
 8006fee:	9904      	ldr	r1, [sp, #16]
 8006ff0:	9803      	ldr	r0, [sp, #12]
 8006ff2:	9e05      	ldr	r6, [sp, #20]
 8006ff4:	47b0      	blx	r6
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d02c      	beq.n	8007054 <_printf_i+0x200>
 8006ffa:	3501      	adds	r5, #1
 8006ffc:	68e3      	ldr	r3, [r4, #12]
 8006ffe:	9a07      	ldr	r2, [sp, #28]
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	42ab      	cmp	r3, r5
 8007004:	dcf0      	bgt.n	8006fe8 <_printf_i+0x194>
 8007006:	e7e9      	b.n	8006fdc <_printf_i+0x188>
 8007008:	2500      	movs	r5, #0
 800700a:	e7f7      	b.n	8006ffc <_printf_i+0x1a8>
 800700c:	2800      	cmp	r0, #0
 800700e:	d0ad      	beq.n	8006f6c <_printf_i+0x118>
 8007010:	9d02      	ldr	r5, [sp, #8]
 8007012:	0039      	movs	r1, r7
 8007014:	f7f9 f906 	bl	8000224 <__aeabi_uidivmod>
 8007018:	5c73      	ldrb	r3, [r6, r1]
 800701a:	3d01      	subs	r5, #1
 800701c:	702b      	strb	r3, [r5, #0]
 800701e:	2800      	cmp	r0, #0
 8007020:	d1f7      	bne.n	8007012 <_printf_i+0x1be>
 8007022:	2f08      	cmp	r7, #8
 8007024:	d109      	bne.n	800703a <_printf_i+0x1e6>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	07db      	lsls	r3, r3, #31
 800702a:	d506      	bpl.n	800703a <_printf_i+0x1e6>
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	6922      	ldr	r2, [r4, #16]
 8007030:	4293      	cmp	r3, r2
 8007032:	dc02      	bgt.n	800703a <_printf_i+0x1e6>
 8007034:	2330      	movs	r3, #48	; 0x30
 8007036:	3d01      	subs	r5, #1
 8007038:	702b      	strb	r3, [r5, #0]
 800703a:	9b02      	ldr	r3, [sp, #8]
 800703c:	1b5b      	subs	r3, r3, r5
 800703e:	6123      	str	r3, [r4, #16]
 8007040:	9b05      	ldr	r3, [sp, #20]
 8007042:	aa07      	add	r2, sp, #28
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	0021      	movs	r1, r4
 8007048:	9b04      	ldr	r3, [sp, #16]
 800704a:	9803      	ldr	r0, [sp, #12]
 800704c:	f7ff fe94 	bl	8006d78 <_printf_common>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d1b8      	bne.n	8006fc6 <_printf_i+0x172>
 8007054:	2001      	movs	r0, #1
 8007056:	4240      	negs	r0, r0
 8007058:	b009      	add	sp, #36	; 0x24
 800705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705c:	080074b5 	.word	0x080074b5
 8007060:	080074c6 	.word	0x080074c6

08007064 <memchr>:
 8007064:	b2c9      	uxtb	r1, r1
 8007066:	1882      	adds	r2, r0, r2
 8007068:	4290      	cmp	r0, r2
 800706a:	d101      	bne.n	8007070 <memchr+0xc>
 800706c:	2000      	movs	r0, #0
 800706e:	4770      	bx	lr
 8007070:	7803      	ldrb	r3, [r0, #0]
 8007072:	428b      	cmp	r3, r1
 8007074:	d0fb      	beq.n	800706e <memchr+0xa>
 8007076:	3001      	adds	r0, #1
 8007078:	e7f6      	b.n	8007068 <memchr+0x4>

0800707a <memcpy>:
 800707a:	2300      	movs	r3, #0
 800707c:	b510      	push	{r4, lr}
 800707e:	429a      	cmp	r2, r3
 8007080:	d100      	bne.n	8007084 <memcpy+0xa>
 8007082:	bd10      	pop	{r4, pc}
 8007084:	5ccc      	ldrb	r4, [r1, r3]
 8007086:	54c4      	strb	r4, [r0, r3]
 8007088:	3301      	adds	r3, #1
 800708a:	e7f8      	b.n	800707e <memcpy+0x4>

0800708c <memmove>:
 800708c:	b510      	push	{r4, lr}
 800708e:	4288      	cmp	r0, r1
 8007090:	d902      	bls.n	8007098 <memmove+0xc>
 8007092:	188b      	adds	r3, r1, r2
 8007094:	4298      	cmp	r0, r3
 8007096:	d303      	bcc.n	80070a0 <memmove+0x14>
 8007098:	2300      	movs	r3, #0
 800709a:	e007      	b.n	80070ac <memmove+0x20>
 800709c:	5c8b      	ldrb	r3, [r1, r2]
 800709e:	5483      	strb	r3, [r0, r2]
 80070a0:	3a01      	subs	r2, #1
 80070a2:	d2fb      	bcs.n	800709c <memmove+0x10>
 80070a4:	bd10      	pop	{r4, pc}
 80070a6:	5ccc      	ldrb	r4, [r1, r3]
 80070a8:	54c4      	strb	r4, [r0, r3]
 80070aa:	3301      	adds	r3, #1
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d1fa      	bne.n	80070a6 <memmove+0x1a>
 80070b0:	e7f8      	b.n	80070a4 <memmove+0x18>
	...

080070b4 <_free_r>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	0005      	movs	r5, r0
 80070b8:	2900      	cmp	r1, #0
 80070ba:	d010      	beq.n	80070de <_free_r+0x2a>
 80070bc:	1f0c      	subs	r4, r1, #4
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	da00      	bge.n	80070c6 <_free_r+0x12>
 80070c4:	18e4      	adds	r4, r4, r3
 80070c6:	0028      	movs	r0, r5
 80070c8:	f000 f8d4 	bl	8007274 <__malloc_lock>
 80070cc:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <_free_r+0x90>)
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <_free_r+0x2c>
 80070d4:	6063      	str	r3, [r4, #4]
 80070d6:	6014      	str	r4, [r2, #0]
 80070d8:	0028      	movs	r0, r5
 80070da:	f000 f8cc 	bl	8007276 <__malloc_unlock>
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d909      	bls.n	80070f8 <_free_r+0x44>
 80070e4:	6821      	ldr	r1, [r4, #0]
 80070e6:	1860      	adds	r0, r4, r1
 80070e8:	4283      	cmp	r3, r0
 80070ea:	d1f3      	bne.n	80070d4 <_free_r+0x20>
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	1841      	adds	r1, r0, r1
 80070f2:	6021      	str	r1, [r4, #0]
 80070f4:	e7ee      	b.n	80070d4 <_free_r+0x20>
 80070f6:	0013      	movs	r3, r2
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	d001      	beq.n	8007102 <_free_r+0x4e>
 80070fe:	42a2      	cmp	r2, r4
 8007100:	d9f9      	bls.n	80070f6 <_free_r+0x42>
 8007102:	6819      	ldr	r1, [r3, #0]
 8007104:	1858      	adds	r0, r3, r1
 8007106:	42a0      	cmp	r0, r4
 8007108:	d10b      	bne.n	8007122 <_free_r+0x6e>
 800710a:	6820      	ldr	r0, [r4, #0]
 800710c:	1809      	adds	r1, r1, r0
 800710e:	1858      	adds	r0, r3, r1
 8007110:	6019      	str	r1, [r3, #0]
 8007112:	4282      	cmp	r2, r0
 8007114:	d1e0      	bne.n	80070d8 <_free_r+0x24>
 8007116:	6810      	ldr	r0, [r2, #0]
 8007118:	6852      	ldr	r2, [r2, #4]
 800711a:	1841      	adds	r1, r0, r1
 800711c:	6019      	str	r1, [r3, #0]
 800711e:	605a      	str	r2, [r3, #4]
 8007120:	e7da      	b.n	80070d8 <_free_r+0x24>
 8007122:	42a0      	cmp	r0, r4
 8007124:	d902      	bls.n	800712c <_free_r+0x78>
 8007126:	230c      	movs	r3, #12
 8007128:	602b      	str	r3, [r5, #0]
 800712a:	e7d5      	b.n	80070d8 <_free_r+0x24>
 800712c:	6821      	ldr	r1, [r4, #0]
 800712e:	1860      	adds	r0, r4, r1
 8007130:	4282      	cmp	r2, r0
 8007132:	d103      	bne.n	800713c <_free_r+0x88>
 8007134:	6810      	ldr	r0, [r2, #0]
 8007136:	6852      	ldr	r2, [r2, #4]
 8007138:	1841      	adds	r1, r0, r1
 800713a:	6021      	str	r1, [r4, #0]
 800713c:	6062      	str	r2, [r4, #4]
 800713e:	605c      	str	r4, [r3, #4]
 8007140:	e7ca      	b.n	80070d8 <_free_r+0x24>
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	200000ec 	.word	0x200000ec

08007148 <_malloc_r>:
 8007148:	2303      	movs	r3, #3
 800714a:	b570      	push	{r4, r5, r6, lr}
 800714c:	1ccd      	adds	r5, r1, #3
 800714e:	439d      	bics	r5, r3
 8007150:	3508      	adds	r5, #8
 8007152:	0006      	movs	r6, r0
 8007154:	2d0c      	cmp	r5, #12
 8007156:	d21e      	bcs.n	8007196 <_malloc_r+0x4e>
 8007158:	250c      	movs	r5, #12
 800715a:	42a9      	cmp	r1, r5
 800715c:	d81d      	bhi.n	800719a <_malloc_r+0x52>
 800715e:	0030      	movs	r0, r6
 8007160:	f000 f888 	bl	8007274 <__malloc_lock>
 8007164:	4a25      	ldr	r2, [pc, #148]	; (80071fc <_malloc_r+0xb4>)
 8007166:	6814      	ldr	r4, [r2, #0]
 8007168:	0021      	movs	r1, r4
 800716a:	2900      	cmp	r1, #0
 800716c:	d119      	bne.n	80071a2 <_malloc_r+0x5a>
 800716e:	4c24      	ldr	r4, [pc, #144]	; (8007200 <_malloc_r+0xb8>)
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <_malloc_r+0x36>
 8007176:	0030      	movs	r0, r6
 8007178:	f000 f86a 	bl	8007250 <_sbrk_r>
 800717c:	6020      	str	r0, [r4, #0]
 800717e:	0029      	movs	r1, r5
 8007180:	0030      	movs	r0, r6
 8007182:	f000 f865 	bl	8007250 <_sbrk_r>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d12b      	bne.n	80071e2 <_malloc_r+0x9a>
 800718a:	230c      	movs	r3, #12
 800718c:	0030      	movs	r0, r6
 800718e:	6033      	str	r3, [r6, #0]
 8007190:	f000 f871 	bl	8007276 <__malloc_unlock>
 8007194:	e003      	b.n	800719e <_malloc_r+0x56>
 8007196:	2d00      	cmp	r5, #0
 8007198:	dadf      	bge.n	800715a <_malloc_r+0x12>
 800719a:	230c      	movs	r3, #12
 800719c:	6033      	str	r3, [r6, #0]
 800719e:	2000      	movs	r0, #0
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	680b      	ldr	r3, [r1, #0]
 80071a4:	1b5b      	subs	r3, r3, r5
 80071a6:	d419      	bmi.n	80071dc <_malloc_r+0x94>
 80071a8:	2b0b      	cmp	r3, #11
 80071aa:	d903      	bls.n	80071b4 <_malloc_r+0x6c>
 80071ac:	600b      	str	r3, [r1, #0]
 80071ae:	18cc      	adds	r4, r1, r3
 80071b0:	6025      	str	r5, [r4, #0]
 80071b2:	e003      	b.n	80071bc <_malloc_r+0x74>
 80071b4:	684b      	ldr	r3, [r1, #4]
 80071b6:	428c      	cmp	r4, r1
 80071b8:	d10d      	bne.n	80071d6 <_malloc_r+0x8e>
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	0030      	movs	r0, r6
 80071be:	f000 f85a 	bl	8007276 <__malloc_unlock>
 80071c2:	0020      	movs	r0, r4
 80071c4:	2207      	movs	r2, #7
 80071c6:	300b      	adds	r0, #11
 80071c8:	1d23      	adds	r3, r4, #4
 80071ca:	4390      	bics	r0, r2
 80071cc:	1ac3      	subs	r3, r0, r3
 80071ce:	d0e7      	beq.n	80071a0 <_malloc_r+0x58>
 80071d0:	425a      	negs	r2, r3
 80071d2:	50e2      	str	r2, [r4, r3]
 80071d4:	e7e4      	b.n	80071a0 <_malloc_r+0x58>
 80071d6:	6063      	str	r3, [r4, #4]
 80071d8:	000c      	movs	r4, r1
 80071da:	e7ef      	b.n	80071bc <_malloc_r+0x74>
 80071dc:	000c      	movs	r4, r1
 80071de:	6849      	ldr	r1, [r1, #4]
 80071e0:	e7c3      	b.n	800716a <_malloc_r+0x22>
 80071e2:	2303      	movs	r3, #3
 80071e4:	1cc4      	adds	r4, r0, #3
 80071e6:	439c      	bics	r4, r3
 80071e8:	42a0      	cmp	r0, r4
 80071ea:	d0e1      	beq.n	80071b0 <_malloc_r+0x68>
 80071ec:	1a21      	subs	r1, r4, r0
 80071ee:	0030      	movs	r0, r6
 80071f0:	f000 f82e 	bl	8007250 <_sbrk_r>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d1db      	bne.n	80071b0 <_malloc_r+0x68>
 80071f8:	e7c7      	b.n	800718a <_malloc_r+0x42>
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	200000ec 	.word	0x200000ec
 8007200:	200000f0 	.word	0x200000f0

08007204 <_realloc_r>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	0007      	movs	r7, r0
 8007208:	000d      	movs	r5, r1
 800720a:	0016      	movs	r6, r2
 800720c:	2900      	cmp	r1, #0
 800720e:	d105      	bne.n	800721c <_realloc_r+0x18>
 8007210:	0011      	movs	r1, r2
 8007212:	f7ff ff99 	bl	8007148 <_malloc_r>
 8007216:	0004      	movs	r4, r0
 8007218:	0020      	movs	r0, r4
 800721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800721c:	2a00      	cmp	r2, #0
 800721e:	d103      	bne.n	8007228 <_realloc_r+0x24>
 8007220:	f7ff ff48 	bl	80070b4 <_free_r>
 8007224:	0034      	movs	r4, r6
 8007226:	e7f7      	b.n	8007218 <_realloc_r+0x14>
 8007228:	f000 f826 	bl	8007278 <_malloc_usable_size_r>
 800722c:	002c      	movs	r4, r5
 800722e:	42b0      	cmp	r0, r6
 8007230:	d2f2      	bcs.n	8007218 <_realloc_r+0x14>
 8007232:	0031      	movs	r1, r6
 8007234:	0038      	movs	r0, r7
 8007236:	f7ff ff87 	bl	8007148 <_malloc_r>
 800723a:	1e04      	subs	r4, r0, #0
 800723c:	d0ec      	beq.n	8007218 <_realloc_r+0x14>
 800723e:	0029      	movs	r1, r5
 8007240:	0032      	movs	r2, r6
 8007242:	f7ff ff1a 	bl	800707a <memcpy>
 8007246:	0029      	movs	r1, r5
 8007248:	0038      	movs	r0, r7
 800724a:	f7ff ff33 	bl	80070b4 <_free_r>
 800724e:	e7e3      	b.n	8007218 <_realloc_r+0x14>

08007250 <_sbrk_r>:
 8007250:	2300      	movs	r3, #0
 8007252:	b570      	push	{r4, r5, r6, lr}
 8007254:	4c06      	ldr	r4, [pc, #24]	; (8007270 <_sbrk_r+0x20>)
 8007256:	0005      	movs	r5, r0
 8007258:	0008      	movs	r0, r1
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	f7ff fada 	bl	8006814 <_sbrk>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d103      	bne.n	800726c <_sbrk_r+0x1c>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d000      	beq.n	800726c <_sbrk_r+0x1c>
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	bd70      	pop	{r4, r5, r6, pc}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	20000eb0 	.word	0x20000eb0

08007274 <__malloc_lock>:
 8007274:	4770      	bx	lr

08007276 <__malloc_unlock>:
 8007276:	4770      	bx	lr

08007278 <_malloc_usable_size_r>:
 8007278:	1f0b      	subs	r3, r1, #4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	1f18      	subs	r0, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	da01      	bge.n	8007286 <_malloc_usable_size_r+0xe>
 8007282:	580b      	ldr	r3, [r1, r0]
 8007284:	18c0      	adds	r0, r0, r3
 8007286:	4770      	bx	lr

08007288 <_init>:
 8007288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728a:	46c0      	nop			; (mov r8, r8)
 800728c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728e:	bc08      	pop	{r3}
 8007290:	469e      	mov	lr, r3
 8007292:	4770      	bx	lr

08007294 <_fini>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729a:	bc08      	pop	{r3}
 800729c:	469e      	mov	lr, r3
 800729e:	4770      	bx	lr
